<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Certified CyberDefender Certification 考試心得分享</title>
      <link href="/2025/10/14/CCD/"/>
      <url>/2025/10/14/CCD/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>鐵人賽的最後一天，我想要分享我在第一天提到的 Certified CyberDefender Certification，也是我考的第一張藍隊的證照，內容會包括考試內容、準備心得、考試過程……等等，並且似乎在中文圈還沒有人詳細介紹這張證照，<del>我就當第一個首殺的了</del></p><p><img src="/assets/6ZSbD_caO3dOOdMtbxnER8q_J6OlrnJWRgQkFs1jFUA=.png"></p><hr><h1 id="關於-CCD"><a href="#關於-CCD" class="headerlink" title="關於 CCD"></a>關於 CCD</h1><p>這邊先分享一下關於CCD 難度的問題</p><p>首先可以先看一下 <a href="https://pauljerimy.com/security-certification-roadmap/">Paul Jerimy 整理的證照地圖</a>，整體可以看到 CCD 是排在挺高的地方，代表它是偏難並且不適合新手去考的，另外一個參照是 HTB 的 CDSA，它的難度是被認為是比 CCD 還要簡單的。</p><p><img src="/assets/mzparHC0o6TCP7i_VbxgJpi5X41AvnooYpnYzWzf4u4=.jpeg"></p><p>但是它在 <a href="https://cyberdefenders.org/community/cybersecurity-roadmap/">CyberDefender 的 RoadMap</a> 中 CCD 是被評為比 CDSA 還要簡單的</p><p><img src="/assets/LyNGc2i8JPfrazqwiSmjHYdf8Rc2S0opUFjLr8NByrI=.png"></p><p>我個人覺得 CCD 難度會取決於 Lab 以及課程的完成程度，如果全部 Lab 以及課程全部完成了那考試難度是中等，如果直接考那考試難度是偏高，Lab 以及課程接下來會介紹。</p><p>另一方面是價格的部分，CCD 的價格是 800 美金，而比較知名的 BTL2 它需要 2190 美金，所以考 CCD 也算一種<del>省錢路線</del></p><p>我選擇這張證照的契機是我看到了這篇 <a href="https://www.reddit.com/r/cybersecurity/comments/1b6jnf5/ccdcertified_cyberdefender_certification_give_soc/?tl=zh-hant">Reddit 論壇</a>，有一則留言說 CCD 雖然比 BTL1 較貴也較難，但在課程或考試上會收穫比較好，我選擇想要學比較多東西，因此選擇了挑戰 CCD</p><h2 id="CCD考試介紹"><a href="#CCD考試介紹" class="headerlink" title="CCD考試介紹"></a>CCD考試介紹</h2><p>CCD 是一個實作導向的 SOC 分析師認證，提供的課程包含以下內容</p><ul><li>威脅狩獵</li><li>硬碟鑑識</li><li>邊界防禦-Email 安全</li><li>記憶體鑑識</li><li>網路鑑識</li><li>數位取證</li><li>Incident Response</li><li>鑑識證據蒐集</li><li>惡意程式分析</li></ul><p>課程幾乎包含了 SOC 分析師需要的所有相關知識，但是在考試時只會考以下內容，這裡也提一下主要使用的工具以及大致的內容</p><ul><li>威脅狩獵<ul><li>ELK</li><li>給一個 APT 攻擊的情境，在 ELK 中找出攻擊過程</li></ul></li><li>硬碟鑑識<ul><li>Event Log Explorer</li><li>Eric Zimmerman’s tools</li><li>分析 Windows disk file</li></ul></li><li>記憶體鑑識<ul><li>Volatility2</li><li>分析 Windows 記憶體</li></ul></li><li>網路鑑識<ul><li>Wireshark</li><li>Zui</li><li>NetworkMiner</li><li>分析 pcap 封包</li></ul></li></ul><p>考試時間為 48 小時，考試過程沒有監考，可以查閱所有資料，包括它提供的教材，並且可以隨時開始進行考試，這 48 小時每個主題分別會給一個情境，並有數題題目，威脅狩獵的題目是最多的，有 20 題左右，另外三題皆為 10 題以內，總共會是 40 題左右。通過的分數為 70%，另外如果你考試分數到了 85% 會額外得到一個金色 Coin，<strong>非常帥</strong>，如果是 70%~85% 是一個銀色的 Coin。</p><p><img src="/assets/zxCcH7QXDfKQcQ-kguFd0DhLvWKrF7FdYGWWoHrlZaA=.png"></p><p>source : <a href="https://x.com/CyberDefenders/status/1645759783192915969">https://x.com/CyberDefenders/status/1645759783192915969</a></p><p>這個考試是不用寫報告的，但是你在回答問題時，它不會立即驗證你的答案是否正確，並且會需要在每一題的底下敘述解題過程，如果答案錯誤或者沒寫會根據你寫的內容判定是否部分給分。</p><p>在報名 CCD 證照考試後它會提供教材以及 Lab 可以練習，Lab 全部做完的話會有 5% 的 bonus，但是這個 bonus 只會在如果你是 65%~69% 時才會有加分。教材的部分是在一年內都可以存取，但是 Lab 只有 4 個月的存取時間，這些時間都是可以延長的，但就是要多花錢。</p><p>報名一次 CCD 可以有兩次的考試資格，第一次考試必須在報名的 4 個月內考，第二次考試必須在報名的一年內考，意思是必須要在 4 個月內考至少一次，不然的話考試次數會被浪費掉。</p><p>考試結束後會在 14 個工作天內收到結果，並且會有每個主題的評分。</p><hr><h1 id="CCD-準備＋考試心得"><a href="#CCD-準備＋考試心得" class="headerlink" title="CCD 準備＋考試心得"></a>CCD 準備＋考試心得</h1><p>在報 CCD 之前，關於 SOC 分析師的相關技能我接觸過的有：玩過 Volatility、用過 Wireshark 會看封包，然後沒接觸過硬碟鑑識以及威脅狩獵，大概就是這樣，所以是偏新手的狀態，目標是希望拿到那酷酷的金色 coin。</p><h2 id="考前準備"><a href="#考前準備" class="headerlink" title="考前準備"></a>考前準備</h2><p>我是在 2025&#x2F;05&#x2F;04 時開始進行 CCD 的教材與 Lab 練習，是在 2025&#x2F;07&#x2F;14~2025&#x2F;07&#x2F;16 進行 CCD 考試</p><p>中間經過了 2 個多月的時間，排除期末以及其他事情，大約是 1 個月左右的時間，這一個月時間我主要就是把教材全部翻過一遍，Lab 都做一遍，在做 Lab 之前是沒有官方解答的，做完閱讀詳解的權限才會開起來，我每個 Lab 平均花 3~4 小時完成，在考試前 Lab 我原本已經快做完了，但是 CyberDefender 官方突然改版，每個主題多新增了 1~2 個 Lab，然後原本的 Lab 變成不會計算在 bonus 的判定內，然後之前的題目詳解全部開放，變成要完成新增的那幾個 Lab 才會拿到 bonus，看到這改版直接傻眼，所以又花了億點時間做新增的題目，在考試前終於將全部的 Lab 完成了。</p><p><img src="/assets/rw65oq9JanNLeq9L-PtWlEPBl9hITN-vGaCqE5snxFc=.png"></p><p>這邊大力推薦一下它的教材，它的教材做的非常豐富，每個主題都會有大量的工具以及概念，除了文字與圖片的講解之外，都還會有另外錄一次影片教學，有時候用文字看有點看不懂，但看影片操作一次就看懂了，並且教材內容都會從 0 開始教，所以如果是新手也可以聽得懂，另外它們會幫忙整理 Cheatsheet，讓我們在考試時可以看那張 Cheatsheet 找線索，因此學習這個教材讓我收穫很大。</p><p>在考前我也另外練習了 CyberDefender 裡面的免費 Lab，一開始碰到不會的就會直接開提示或官解，到後面練到一看到題目想問的就大概會有一個方向要去下什麼指令或者取哪個地方找線索，我覺得練習 Lab 還蠻重要的，提早適應一下考試的感覺，然後爬文時發現威脅狩獵的部分還蠻重要的，所以有多練習威脅狩獵的題目，結果來說真的是挺重要的。</p><h2 id="考試過程"><a href="#考試過程" class="headerlink" title="考試過程"></a>考試過程</h2><p>在 2025&#x2F;07&#x2F;14 第一天中午 11:00 左右按下開始後就進行了考試，總共有四大主題，威脅狩獵提供了 ELK 環境，硬碟鑑識、記憶體鑑識與網路鑑識提供了同一個 Windows 環境。我的順序是網路鑑識 -&gt; 記憶體鑑識 -&gt; 硬碟鑑識 -&gt; 威脅狩獵</p><p>我一開始看網路鑑識，網路鑑識的題目比較簡單，主要用 Wireshark 就可以全解了，網路鑑識全部解完後，再進行記憶體鑑識以及硬碟鑑識，記憶體鑑識我有些題卡住之後就會轉去做硬碟鑑識，並且它們的每題的解題敘述都寫好寫滿，因為我覺得我有些題不太確定，但可惜的是只能寫 300 字，所以只能寫個大概而已，然後建議要在網路比較好的地方，不然寫一寫會當機，當時解到了 15 號的凌晨 3、4 點，進度在記憶體鑑識以及硬碟鑑識各解差不多 3&#x2F;4 的進度以及威脅狩獵還沒有碰的情況下先跑去睡覺了。</p><p>第二天起來大約也快中午了，起床直接繼續解，將記憶體鑑識以及硬碟鑑識解完後開始碰威脅狩獵，記憶體鑑識以及硬碟鑑識我覺得整體難度中偏高，主要是 Volatility 的 Plugin 使用真的要很熟悉，以及 Event ID、註冊表位置會需要熟一點，建議一定要配一個 CheatSheet，忘記了可以直接看，不然會查到死。在威脅狩獵到一半，我突然接收到我隊友一個訊息，7&#x2F;16 要去全國技能競賽報到，地點在北部，我現在在南部，然後我看了一下行事曆</p><p><img src="/assets/e7wScU-feMFwwBfjAcijBVUOYMxqqZstCK1n8cFtNgc=.png"></p><p>我再重新看了一次全國技能競賽簡章</p><p><img src="/assets/Y2V9QiGHPUQiDAHUMWmLivpwpu-9uMgIkoMxLL6N0F8=.png"></p><p>ok，完全記錯時間了，現在時間下午 5:45，腦袋風暴之後我計算出我只要在隔天凌晨 5:00 前解完然後搭客運衝上去就安全上壘了，因此開始刺激的瘋狂解題，結局是有完整的將威脅狩獵解完，並且每題都檢查一遍，威脅狩獵的題目整體中偏高，主要威脅狩獵都會需要使用到網路鑑識以及硬碟鑑識的概念，並且 ELK 的語法要很熟，所以難度會比硬碟鑑識與記憶體鑑識還要高一點。</p><p>整體考試給我的感覺時間其實給的挺充裕的，根據官方說法設 48 小時是希望你有足夠時間，不要太過壓力。另外考的內容有些會出現在課程的 Lab 中，所以考前會建議要把 Lab 全部都要完成，並且熟練每個操作。</p><h2 id="考試結果"><a href="#考試結果" class="headerlink" title="考試結果"></a>考試結果</h2><p>到了 7&#x2F;24 號我收到了我通過的結果</p><p><img src="/assets/9l2zJ2YCRBtzMSL1tJdli03OFgzmsM7cPEIt-VllvVk=.png"></p><p>除了開心以外，我期待我有沒有拿到金色的 coin，考過之後它會提供考試的結果以及每個主題的評分</p><p><img src="/assets/0d0LDQTEzgP8mcX3hGin244nmg9fD3IVe4MbvGVyv6o=.png"></p><p>可惜離拿到金色 coin 還有一點距離，然後我看到我的記憶體鑑識的評分讓我直接回去重讀記憶體鑑識，另外因為我不是當下截圖，我記得之前會詳細說每個主題評審給的建議以及回饋，但現在不見了，不確定之後會不會回來。</p><p>最後放上通過後的證書</p><p><img src="/assets/NSe443TQsFKvGzYRsXYbah0-1uKthWsZ6NijtIjMuWs=.png"></p><p>另外到了現在 2025&#x2F;10&#x2F;14，我還沒收到我的銀色 coin QQ，如果來了會再補上</p><h2 id="給目前考慮-CCD-的人"><a href="#給目前考慮-CCD-的人" class="headerlink" title="給目前考慮 CCD 的人"></a>給目前考慮 CCD 的人</h2><p>建議在付錢前要先評估 4 個月內有沒有空將時間投在 CCD 當中，因為會需要花大量時間練習以及閱讀教材，但是可以學到非常扎實且豐富的內容，對於沒有接觸過藍隊的玩家，可以先嘗試玩玩看 CyberDefender 裡面的免費 Lab，看是否有興趣再付錢也不遲。</p><h2 id="給正在準備-CCD-證照的人"><a href="#給正在準備-CCD-證照的人" class="headerlink" title="給正在準備 CCD 證照的人"></a>給正在準備 CCD 證照的人</h2><p>建議威脅狩獵的題目會需要多做一點，像是判斷誰在攻擊，如何攻擊，以及判斷的 MITRE ATT&amp;CK 的 TTP 會需要多練習，而且威脅狩獵題目很多，會需要比其他題目還要再熟練一點，不然會花太多時間在上面，另外會需要自己做筆記，因為過程中可能會出現這個事件是什麼 Event ID 或者這個設定的註冊表路徑在哪裡，做筆記會省非常多時間</p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了 Certified CyberDefender Certification 的準備過程以及考試心得分享，今天也是鐵人賽的最後一天，這 30 天內分享了藍隊相關的技術與工具，包括了記憶體鑑識、OSINT、網路鑑識、硬碟鑑識以及威脅狩獵，最後以 Certified CyberDefender 這張證照作為結尾，<del>然後我考完這張證照我的綽號突然多一個賽博守護者了</del>，如果有任何問題都歡迎來跟我說～可以到我的 <a href="https://yunshiuan.com/cosy-resume/">Blog</a> 找到我的聯絡方式或者瀏覽其他我寫的內容，明年希望有空可再花 30 天跟大家分享。</p>]]></content>
      
      
      <categories>
          
          <category> Certificate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 記憶體鑑識 </tag>
            
            <tag> 威脅狩獵 </tag>
            
            <tag> Certified CyberDefender </tag>
            
            <tag> CCD </tag>
            
            <tag> 證照考試 </tag>
            
            <tag> 硬碟鑑識 </tag>
            
            <tag> 網路鑑識 </tag>
            
            <tag> 藍隊 </tag>
            
            <tag> SOC </tag>
            
            <tag> 資安 </tag>
            
            <tag> 考試心得 </tag>
            
            <tag> Volatility </tag>
            
            <tag> Wireshark </tag>
            
            <tag> ELK </tag>
            
            <tag> 鐵人賽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boss Of The SOC v1 下</title>
      <link href="/2025/10/13/BossOfSOC3/"/>
      <url>/2025/10/13/BossOfSOC3/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>接續昨天的內容，今天會分享 Boss Of The SOC v1 剩下的  Q21~ Q32 的解題過程，學習 Threat Hunting 的流程，解題平台同樣會使用 CyberDefender</p><hr><h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><p>本次實作實驗聚焦在 APT（高階持續性威脅）情境與勒索軟體情境。你將扮演 Alice Bluebird 的角色——剛被聘為 Wayne Enterprises 的 SOC 分析師，負責偵測與防禦各類網路攻擊。</p><h2 id="場景-1（APT）："><a href="#場景-1（APT）：" class="headerlink" title="場景 1（APT）："></a>場景 1（APT）：</h2><p>今天是 Alice 在 Wayne Enterprises 安全部門（Security Operations Center，SOC）的第一天。Lucius 叫 Alice 坐下並給她第一個任務：一份來自高譚市警察局（Gotham City Police Department, GCPD）的備忘錄。GCPD 發現線上有證據（<a href="http://pastebin.com/Gw6dWjS9%EF%BC%89%E9%A1%AF%E7%A4%BA%E7%B6%B2%E7%AB%99">http://pastebin.com/Gw6dWjS9）顯示網站</a> <a href="http://www.imreallynotbatman.com/">www.imreallynotbatman.com</a> 在 Wayne Enterprises 的 IP 位址空間內被入侵。該駭客組織有多重目標……但他們的作案手法之一是篡改網站以羞辱被害者。Lucius 要求 Alice 判定 <a href="http://www.imreallynotbatman.com(wayne/">www.imreallynotbatman.com（Wayne</a> 企業執行長的個人部落格）是否確實遭到入侵。</p><p>在此情境中，使用者社群在瀏覽 Wayne Enterprises 網站時回報看到下列被篡改的圖片，且部分回報提到「P01s0n1vy」。若你不熟悉，P01s0n1vy 是一個曾針對 Wayne Enterprises 的 APT 組織。你作為 Alice 的目標是調查該網站篡改事件，並嘗試依照 Lockheed Martin Kill Chain 重建攻擊流程。</p><p><img src="/assets/kNpb6q5LoVBZaQL696hxc5NUhEZYM2Y6amfiOkUtQXA=.png"></p><h2 id="場景-2（勒索軟體）："><a href="#場景-2（勒索軟體）：" class="headerlink" title="場景 2（勒索軟體）："></a>場景 2（勒索軟體）：</h2><p>在第二個情境中，你的一位使用者在 Windows 桌面上看到一張圖片，表示系統上的檔案已被加密，必須付款才能取回檔案。看起來 Wayne Enterprises 有一台主機感染了 Cerber 勒索軟體，你的目標是調查這起勒索事件。</p><p><img src="/assets/XMxnyYYAgsqi2e8fgkpYi93wDgWY461l01mIV_P_MgM=.png"></p><hr><blockquote><p>Q21 : Ransomware: What fully qualified domain name (FQDN) makes the Cerber ransomware attempt to direct the user to at the end of its encryption phase?</p></blockquote><p>題目敘述說惡意程式會讓使用者嘗試去請求 domain ，要找出FQDN</p><p>我想要先知道內部有哪些 IP 有在進行 DNS 查詢</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;&quot;botsv1&quot; sourcetype&#x3D;&quot;stream:dns&quot;| table src_ip| stats count by src_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/sYm2KnhgFYCkdM9sQJ_4SWm4Wfc7Cdngvk7lwpW0Jp8=.png"></p><p>這邊知道192.168.2.50、192.168.250.100、192.168.250.20、192.168.250.40、192.168.250.70 這些內部 IP 有在進行 DNS 查詢，接下來我先看192.168.250.0&#x2F;24 內 IP 查詢了哪些 domain，</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;&quot;botsv1&quot; sourcetype&#x3D;&quot;stream:dns&quot; src_ip&#x3D;192.168.250.0&#x2F;24 | table  src_ip,dest_ip,query&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/OMbF3JUJiANeRWwDsBVF2A-In4u5w0v0fjWPRff2WmE=.png"></p><p>接下來會有很多其他的 DNS 記錄出來 我們可以點擊不可能是答案的 FQDN ，然後選擇 Exclude from result ，然後它就會在 Search 欄位中自動產出將此FQDN 排除查詢的語法。</p><p><img src="/assets/IoBJChn4M4fthuMfAPQoc1e6b4G-eXwv6hstSV2nq_M=.png"></p><p>經過層層篩選後最後查詢如下</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;&quot;botsv1&quot; sourcetype&#x3D;&quot;stream:dns&quot; src_ip&#x3D;192.168.250.0&#x2F;24  &quot;query&#123;&#125;&quot;!&#x3D;&quot;*.in-addr.arpa&quot; &quot;query&#123;&#125;&quot;!&#x3D;&quot;demo-01&quot;  &quot;query&#123;&#125;&quot;!&#x3D;&quot;*.authdns.ripe.net&quot;  &quot;query&#123;&#125;&quot;!&#x3D;&quot;*.microsoft.com&quot; &quot;query&#123;&#125;&quot;&#x3D;*.*.* &quot;query&#123;&#125;&quot;!&#x3D;&quot;*.waynecorpinc.local&quot;  &quot;query&#123;&#125;&quot;!&#x3D;&quot;dns.msftncsi.com&quot;  &quot;query&#123;&#125;&quot;!&#x3D;&quot;*.globalrootservers.net&quot; | table  src_ip,dest_ip,query&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/jzPkKSf2XPhZ_kdZBN_vHdWs9SodRqw0Hdol4W8JsjY=.png"></p><p>這邊可以看到 cerberhhyed5frqa.xmfir0.win 這個 FQDN，而這個網址在情境的圖片上有出現，因此是這題的答案</p><blockquote><p>ans : cerberhhyed5frqa.xmfir0.win</p></blockquote><hr><blockquote><p>Q22 : Ransomware: What was the most likely IP address of we8105desk in 24AUG2016?</p></blockquote><p>題目想要問 we8105desk 這個 host 它最有可能的 IP 位置是什麼，時間限制在2016&#x2F;08&#x2F;24 中</p><p>首先先來調整時間，選擇時間並選擇 DataRange，調整為查詢08&#x2F;24&#x2F;2016 到 08&#x2F;25&#x2F;2016這段時間的資料</p><p><img src="/assets/l1jatLA2J8_nIfT-W0ySlWGVeQuBHTsKq6ZrZNWqTms=.png"></p><p>接下來查詢 host 為 we8105desk 的 source IP 記錄，因為是查詢 Sysmon 來源的關係所以是使用 SourceIp 當作查詢來源 IP</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 host&#x3D;we8105desk source&#x3D;WinEventLog:Microsoft-Windows-Sysmon&#x2F;Operational| stats count by SourceIp | sort -count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/ZXDBGmZerwfzhgg20VYhTIab7F3el5JViBuBlzlz1qk=.png"></p><p>這邊可以看到答案是 192.168.250.100</p><blockquote><p>ans : 192.168.250.100</p></blockquote><hr><blockquote><p>Q23 : Ransomware: Amongst the Suricata signatures that detected the Cerber malware, which one alerted the fewest number of times? Submit ONLY the signature ID value as the answer. (No punctuation, just 7 integers.)</p></blockquote><p>這題想要問 Suricata 產生的警報，當中關於 Cerber malware 出現最少的 signature 是哪一個</p><p>可以用以下的語法查詢，將 signature 與 signature_id 抓出來</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata Cerber | table alert.signature alert.signature_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/SUW4b8xNVYYgib6Y3L8SLD1NeyFdmlv0pC-9KT0GKzc=.png"></p><p>可以很明顯的看到 <code>ETPRO TROJAN Ransomware/Cerber Checkin 2</code> 這個 signature 只出現一次，而它的 id 為2816763 ，則為答案</p><blockquote><p>ans : 2816763</p></blockquote><hr><blockquote><p>Q24 : Ransomware: The VBScript found in question 25 launches 121214.tmp. What is the ParentProcessId of this initial launch?</p></blockquote><p>這題需要先Q25，可以先去看 Q25 的解題過程</p><p>題目敘述說在Q25 找到 關於VBScript 是 121214.tmp被執行了，請問啟動這個VBScript 的父進程 ID 是什麼？</p><p>可以先將ParentImage、ParentProcessId以及CommandLine 抓出來查看</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;xmlwineventlog *.vbs| table ParentImage ParentProcessId CommandLine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/cn-02vrj7Ro2hRDX_3l34zNpoDpJ3d--i0_5yj-7Lyo=.png"></p><p>這邊可以很清楚的看到啟動121214.tmp 的父進程是 wscript.exe ，它的ID 為3968，這正是我們的答案</p><blockquote><p>ans : 3968</p></blockquote><hr><blockquote><p>Q25 : Ransomware: During the initial Cerber infection a VB script is run. The entire script from this execution, pre-pended by the name of the launching .exe, can be found in a field in Splunk. What is the length in characters of the value of this field?</p></blockquote><p>題目敘述說當 Cerber 惡意程式執行時，初始會先執行 VB script，而這個 VB script 的產生包含前面啟動它的 exe 檔 可以在 Splunk 的其中一個欄位找到，最後問這個欄位裡面的值總共有多少 characters</p><p>看到題目敘述，可以直接聯想到的是 CommandLine 欄位，所以我們先把 EventLog 的 CommandLine 欄位抓出來，並且限制檔名為 .vbs</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;xmlwineventlog *.vbs| table CommandLine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/48ggord4P-7U5Euy77ESb7wgPZPyzklMo8loEzzXW_M=.png"></p><p>可以看到下面一大串的 cmd.exe…….. 並且後面接 <code>GSI=%APPDATA%\%RANDOM%.vbs</code> 這邊就可以確定是題目所說。</p><p>接下來要計算裡面有多少字元，使用的是 eval 的 len 函式</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;xmlwineventlog *.vbs| eval cmdlenght&#x3D;len(CommandLine)| table CommandLine cmdlenght<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/NsHJjeRVHk2NQIl9gw8oRwmXM2WSI3lcQOAvMZljaoU=.png"></p><p>這邊它幫我們計算出答案為4490</p><blockquote><p>ans : 4490</p></blockquote><hr><blockquote><p>Q26 : Ransomware: The malware downloads a file that contains the Cerber ransomware crypto code. What is the name of that file?</p></blockquote><p>題目敘述說惡意程式去下載一個包含 Cerber 勒索病毒加密程式碼的檔案，它的檔案名稱是什麼</p><p>我先把 192.168.250.100 (we8105desk) HTTP 的 GET 請求全部先抓下來</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 source&#x3D;&quot;stream:http&quot; src_ip&#x3D;192.168.250.100 http_method&#x3D;GET| table  src_ip,dest_ip,site,src_headers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/tO3hZ1-M67gHdIfdlzVWlYr4RjE5w5rVxvEXMrR_Ns4=.png"></p><p>當中最可疑的是它向 <code>solidaritedeproximite.org</code> 請求一個 mhtr.jpg 檔案</p><p>我們單獨看一下關於有包含 mhtr.jpg 的記錄</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 mhtr.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/3qLVjpkrNx1j5OKEazxyKyRjn6aJd4IHKxs2-Th5SSQ=.png"></p><p>發現到有 <code>fgt_utm</code> 的記錄跳出來，在 Splunk 中通常指的是來自 FortiGate 防火牆的 Unified Threat Management 安全日誌類型的 sourcetype，用來記錄防毒、入侵防禦、網頁過濾等安全事件。</p><p>我們使用 fgt_utm 記錄，並把 filename,msg,analyticscksum 欄位抓出來</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;fgt_utm&quot; mhtr.jpg| table filename,msg,analyticscksum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/wX3qtK3vMoJ_wBsisJ0D4TGBsSh3WWWES9-kVGMwxwM=.png"></p><p>可以看到它偵測 mhtr.jpg 為惡意檔案，並且有 sha256 給我們，我們將它丟入 <a href="https://www.virustotal.com/gui/file/9c1cabc16826273ad69f59af06f12fe6484e2eb0b5d3c87a690993934675e459">VirusTotal</a></p><p><img src="/assets/KjYcIdDLUwD5_-oBYnxh2l1kwJn7bt6Nrmb71pDr14E=.png"></p><p>可以看到它是惡意程式，那 mhtr.jpg 就是我們的答案</p><blockquote><p>ans : mhtr.jpg</p></blockquote><hr><blockquote><p>Q27 : Ransomware: Now that you know the name of the ransomware’s encryptor file, what obfuscation technique does it likely use?</p></blockquote><p>題目問 mhtr.jpg 使用了何種混淆技術</p><p>jpg 可以被辨識出惡意程式，有很大的可能使用了隱寫術 (Steganography)，將惡意程式隱藏在圖片中，因此答案就是 Steganography</p><blockquote><p>ans : Steganography</p></blockquote><hr><blockquote><p>Q28 : Ransomware: What is the name of the USB key inserted by Bob Smith?</p></blockquote><p>題目問 Bob Smith 插入的 USB 名稱是什麼</p><p>在 Splunk 中提供了一個 sourcetype，名稱為 winregistry，用來監控 Windows 註冊表 key／value 的建立、修改、刪除等操作。</p><p>另外關於 USB 的其中一個註冊表路徑會在 <code>SYSTEM\ControlSet001\USBSTOR</code>，主要用途是記錄曾經連接過的 USB 裝置資訊，例如製造商、產品、序號、FriendlyName 等等</p><p>因此我們將 <code>USBSTOR</code> 底下的 value 抓出來，並且用 dedup 將重複的 value 刪除，只保留第一筆出來的值</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 source&#x3D;&quot;winregistry&quot; host&#x3D;we8105desk USBSTOR| table registry_value_data | dedup registry_value_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/B7j-ZowtUGr4m3r3GkRhOsm_eHvyijuT3v9bNfFIRzM=.png"></p><p>這邊就可以看到 USB 的名稱為 MIRANDA_PRI</p><blockquote><p>ans : MIRANDA_PRI</p></blockquote><hr><blockquote><p>Q29 : Ransomware: Bob Smith’s workstation (we8105desk) was connected to a file server during the ransomware outbreak. What is the IP address of the file server?</p></blockquote><p>題目敘述 Bob Smith’s workstation 在 ransomware 執行期間去連線了 file server，請問 file server 的 IP 是什麼？</p><p>連線 file server 的 protocol 可能會有 SMB 或者 FTP，FTP 是空的，那我們可以著重去看 SMB</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;stream:smb&quot; src_ip&#x3D;192.168.250.100| table dest_ip| dedup dest_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/yOqGwKrU-ZM7IjAYNdpFOfs2S1L4Z0hW5ixVwDSsEIU=.png"></p><p>接下來要再更確認一點，file server 可能會進行登入，因此我們加上 login&#x3D;”bob.smith”</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;stream:smb&quot; src_ip&#x3D;192.168.250.100 login&#x3D;&quot;bob.smith&quot;| table dest_ip| dedup dest_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/9yawfJ9r2QGw0qUBPTIYITVz6gXLxAQGGFcAJeFblNM=.png"></p><p>這樣就確定了 192.168.250.20 是 file server </p><blockquote><p>ans : 192.168.250.20</p></blockquote><hr><blockquote><p>Q30 : Ransomware: How many distinct PDFs did the ransomware encrypt on the remote file server?</p></blockquote><p>題目問有多少個遠端 pdf 被加密了</p><p>我們在上一題知道 file server 的 IP 為 192.168.250.20，我們另外先拿一下它的 domain name</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;stream:smb&quot; src_ip&#x3D;192.168.250.100 dest_ip&#x3D;192.168.250.20 path&#x3D;*| table path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/qEWsjAJB7FUV9Mq7acGsjdBlmDRUI1hj8Kd1x4wE9uo=.png"></p><p>這邊得知了 domain name 為 we9041srv.waynecorpinc.local</p><p>首先我先搜尋 wineventlog 中有沒有關於 .pdf 的記錄</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;wineventlog&quot; *.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/xJ0cOJW0DDg-M8pGh77C8_DVq-sVjUcXcwSXEbI-zOM=.png"></p><p>發現到有，並且是從 192.168.250.100 請求 we9041srv.waynecorpinc.local 的一個 pdf<br>因此我們將所有關於這個的記錄抓下來，並用 stats 中的 dc 幫我們算總共有幾個檔案</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;&quot;wineventlog&quot; *.pdf  EventCode&#x3D;5145 Source_Address&#x3D;192.168.250.100| stats dc(Relative_Target_Name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/B-ZLsIdRUo5P-2poxSx5cJ8Qark7Byogq2TCf8i5JyU=.png"></p><p>總共是 257 個，則 257 為答案</p><blockquote><p>ans : 257</p></blockquote><hr><blockquote><p>Q31 : Ransomware: The Cerber ransomware encrypts files located in Bob Smith’s Windows profile. How many .txt files does it encrypt?</p></blockquote><p>這題問的是在 Bob Smith 的電腦上有多少的 .txt 檔被 ransomware 鎖起來了</p><p>首先我們先使用 Sysmon 將針對 Bob Smith 內的 .txt 的操作抓下來，並且看是哪個檔案對 .txt 操作</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 source&#x3D;&quot;wineventlog:microsoft-windows-sysmon&#x2F;operational&quot; TargetFilename&#x3D;&quot;C:\\Users\\bob.smith.WAYNECORPINC\\*.txt&quot;| table Image TargetFilename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/aslGsxq9wbcm5wT5VeqfAuUnScwW0MXR-gC6Kb-YIZs=.png"></p><p>可以看到是有一個 osk.exe 對 .txt 檔做操作，</p><p>那我們可以 EventID&#x3D;1 去看這個 osk.exe 的 hash </p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 source&#x3D;&quot;wineventlog:microsoft-windows-sysmon&#x2F;operational&quot; EventCode&#x3D;1 Image&#x3D;&quot;C:\\Users\\bob.smith.WAYNECORPINC\\AppData\\Roaming\\&#123;35ACA89F-933F-6A5D-2776-A3589FB99832&#125;\\osk.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/bGRAyITwgDbzGkIxST7PVBbBAzYcou8g5XtO2PGhEQs=.png"></p><p>得到的 MD5 hash 為 <a href="https://189ccf15-ac01-4578-b319-8cf69e039163.cyberdefenders.network/en-US/app/search/search?q=search%20index=botsv1%20source=%22wineventlog:microsoft-windows-sysmon/operational%22%20EventCode=1%20Image=%22C:%5C%5CUsers%5C%5Cbob.smith.WAYNECORPINC%5C%5CAppData%5C%5CRoaming%5C%5C%7B35ACA89F-933F-6A5D-2776-A3589FB99832%7D%5C%5Cosk.exe%22&display.page.search.mode=smart&dispatch.sample_ratio=1&workload_pool=&earliest=0&latest=now&display.page.search.tab=events&display.general.type=events&sid=1760368198.162#">EE0828A4E4C195D97313BFC7D4B531F1</a>，丟進給 <a href="https://www.virustotal.com/gui/file/37397f8d8e4b3731749094d7b7cd2cf56cacb12dd69e0131f07dd78dff6f262b">VirusTotal</a> 後</p><p><img src="/assets/wqQ9cuHeud9mqmV_is1wvugWnlvXxOlf-VlSPy-RNGE=.png"></p><p>可以確定它是惡意程式</p><p>接下來針對這個 osk.exe 去計算所有 .txt 的數量</p><p><img src="/assets/gRO7TyyW0T3ZEP7-XUY6yZMG1GJPKE-N3D7Njwya-34=.png"></p><p>答案出來為 406，則 406 為這題的答案</p><blockquote><p>ans : 406</p></blockquote><hr><blockquote><p>Q32 : Ransomware: What was the first suspicious domain visited by we8105desk in 24AUG2016?</p></blockquote><p>題目問 we8105desk 在 2016&#x2F;08&#x2F;24 時訪問了哪個可疑 domain？</p><p>我們在 Q26 中發現它會去向 <code>solidaritedeproximite.org</code> 請求 jpg 檔，而 <code>solidaritedeproximite.org</code> 則為這題的解答。</p><blockquote><p>ans : solidaritedeproximite.org</p></blockquote><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天把 Boss Of The SOC v1 最後幾題題目分享完了，今天也學到了更多 Threat Hunting 的技巧，這場 Boss Of The SOC v1 我覺得題目都出得很好，都可以學到非常多的東西，除了 v1 之外也有 v2、v3，歡迎大家可以挑戰。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boss Of The SOC </tag>
            
            <tag> Splunk </tag>
            
            <tag> Threat Hunting </tag>
            
            <tag> 威脅狩獵 </tag>
            
            <tag> 資安競賽 </tag>
            
            <tag> APT </tag>
            
            <tag> 勒索軟體 </tag>
            
            <tag> Web Defacement </tag>
            
            <tag> 暴力破解 </tag>
            
            <tag> 漏洞掃描 </tag>
            
            <tag> OSINT </tag>
            
            <tag> 惡意軟體分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boss Of The SOC v1 中</title>
      <link href="/2025/10/12/BossOfSOC2/"/>
      <url>/2025/10/12/BossOfSOC2/</url>
      
        <content type="html"><![CDATA[<h1 id="Day28-Boss-Of-The-SOC-v1-中"><a href="#Day28-Boss-Of-The-SOC-v1-中" class="headerlink" title="Day28 Boss Of The SOC v1 中"></a>Day28 Boss Of The SOC v1 中</h1><h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>接續昨天的內容，今天會分享 Boss Of The SOC v1 Q11~ Q20 的解題過程，學習 Threat Hunting 的流程，解題平台同樣會使用 CyberDefender</p><hr><h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><p>本次實作實驗聚焦在 APT（高階持續性威脅）情境與勒索軟體情境。你將扮演 Alice Bluebird 的角色——剛被聘為 Wayne Enterprises 的 SOC 分析師，負責偵測與防禦各類網路攻擊。</p><h2 id="場景-1（APT）："><a href="#場景-1（APT）：" class="headerlink" title="場景 1（APT）："></a>場景 1（APT）：</h2><p>今天是 Alice 在 Wayne Enterprises 安全部門（Security Operations Center，SOC）的第一天。Lucius 叫 Alice 坐下並給她第一個任務：一份來自高譚市警察局（Gotham City Police Department, GCPD）的備忘錄。GCPD 發現線上有證據（<a href="http://pastebin.com/Gw6dWjS9%EF%BC%89%E9%A1%AF%E7%A4%BA%E7%B6%B2%E7%AB%99">http://pastebin.com/Gw6dWjS9）顯示網站</a> <a href="http://www.imreallynotbatman.com/">www.imreallynotbatman.com</a> 在 Wayne Enterprises 的 IP 位址空間內被入侵。該駭客組織有多重目標……但他們的作案手法之一是篡改網站以羞辱被害者。Lucius 要求 Alice 判定 <a href="http://www.imreallynotbatman.com(wayne/">www.imreallynotbatman.com（Wayne</a> 企業執行長的個人部落格）是否確實遭到入侵。</p><p>在此情境中，使用者社群在瀏覽 Wayne Enterprises 網站時回報看到下列被篡改的圖片，且部分回報提到「P01s0n1vy」。若你不熟悉，P01s0n1vy 是一個曾針對 Wayne Enterprises 的 APT 組織。你作為 Alice 的目標是調查該網站篡改事件，並嘗試依照 Lockheed Martin Kill Chain 重建攻擊流程。</p><p><img src="/assets/kNpb6q5LoVBZaQL696hxc5NUhEZYM2Y6amfiOkUtQXA=.png"></p><h2 id="場景-2（勒索軟體）："><a href="#場景-2（勒索軟體）：" class="headerlink" title="場景 2（勒索軟體）："></a>場景 2（勒索軟體）：</h2><p>在第二個情境中，你的一位使用者在 Windows 桌面上看到一張圖片，表示系統上的檔案已被加密，必須付款才能取回檔案。看起來 Wayne Enterprises 有一台主機感染了 Cerber 勒索軟體，你的目標是調查這起勒索事件。</p><p><img src="/assets/XMxnyYYAgsqi2e8fgkpYi93wDgWY461l01mIV_P_MgM=.png"></p><hr><blockquote><p>Q11 : Web Defacement: This attack used dynamic DNS to resolve to the malicious IP. What is the fully qualified domain name (FQDN) associated with this attack?</p></blockquote><p>這題想要問是哪個FQDN 在進行攻擊</p><p>在Q10 可以看到 192.168.250.70 對prankglassinebracket.jumpingcrab.com 請求圖片，而prankglassinebracket.jumpingcrab.com 就是我們想要的答案</p><p><img src="/assets/Q4BQsOFmAx6I7jH9goDcf-MGpRlOr2Ocb1LG0GUrdu8=.png"></p><blockquote><p>ans : prankglassinebracket.jumpingcrab.com</p></blockquote><hr><blockquote><p>Q12: Web Defacement: What IP address has Po1s0n1vy tied to domains that are pre-staged to attack Wayne Enterprises?</p></blockquote><p>從Q11 我們可以得到他去請求的 FQDN 叫做 <code>prankglassinebracket.jumpingcrab.com</code> ，我們可以再確認一下這個 FQDN 的 IP 是什麼</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;stream:http src_ip&#x3D;192.168.250.70| table src_ip,dest_ip,site,src_headers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/2ChrVHaw6WBVh-DZf7m-0KgknWSklENqTx-sjMpnjb4=.png"></p><p>最下方可以看到 23.22.63.114 對應的 FQDN 就是 prankglassinebracket.jumpingcrab.com ，23.22.63.114 在Q5 我們確定它是在進行暴力破解登入後台，因此23.22.63.114 就是我們這題的答案</p><blockquote><p>ans : 23.22.63.114</p></blockquote><hr><blockquote><p>Q13 : Web Defacement: Based on the data gathered from this attack and common open-source intelligence sources for domain names, what is the email address most likely associated with the Po1s0n1vy APT group?</p></blockquote><p>這題需要利用前面蒐集到的資料獲得 Po1s0n1vy APT 組織相關的電子郵件地址</p><p>總結一下我們目前得到的</p><ul><li>23.22.63.114 (prankglassinebracket.jumpingcrab.com) : 暴破密碼，送圖片</li><li>40.80.148.42 : 掃描網頁漏洞</li></ul><p>接下來我將23.22.63.114丟進 VirusTotal ，可以看到它之前解析為Po1s0n1vy.com</p><p><img src="/assets/xd27jCJYccOCx5qdHj2Zq1apiGGRst3gNdmbViatinA=.png"></p><p>而在情境敘述中的備忘錄也有提到Po1s0n1vy.com這個網站</p><p>接下來可以使用 <a href="https://www.whoxy.com/">whoxy</a> 這個網站，它可以幫我們查關於這個網域的資訊，另外也可以查詢誰之前擁有了這個網域。</p><p>查詢結果如下</p><p><a href="https://www.whoxy.com/po1s0n1vy.com#history">https://www.whoxy.com/po1s0n1vy.com#history</a></p><p><img src="/assets/cffA2Y3jHDGoOTdqfSE7l0V6BpAyBkAYzVdGcD_75-4=.png"></p><p>這邊可以看到 Email 是<a href="mailto:&#108;&#x69;&#x6c;&#x6c;&#105;&#x61;&#110;&#46;&#114;&#111;&#x73;&#101;&#x40;&#x70;&#111;&#49;&#x73;&#48;&#x6e;&#49;&#x76;&#x79;&#x2e;&#x63;&#x6f;&#109;">lillian.rose@po1s0n1vy.com</a> </p><p>這邊不是其他的email 是因為題目給的格式是<code>*******.****@**********.***</code></p><blockquote><p>ans : <a href="mailto:&#x6c;&#105;&#108;&#x6c;&#105;&#97;&#x6e;&#x2e;&#114;&#111;&#x73;&#101;&#64;&#x70;&#x6f;&#x31;&#x73;&#48;&#x6e;&#x31;&#x76;&#121;&#46;&#99;&#111;&#109;">lillian.rose@po1s0n1vy.com</a></p></blockquote><hr><blockquote><p>Q14 : Web Defacement: GCPD reported that common TTP (Tactics, Techniques, Procedures) for the Po1s0n1vy APT group, if initial compromise fails, is to send a spear-phishing email with custom malware attached to their intended target. This malware is usually connected to Po1s0n1vy’s initial attack infrastructure. Using research techniques, provide the SHA256 hash of this malware.</p></blockquote><p>題目說GCPD 報告指出Po1s0n1vy 如果初始的攻擊失敗，接下來會寄釣魚信件並戴上惡意附件，而這個惡意附件的程式會常常與Po1s0n1vy 的基礎攻擊設施做溝通，想問這個惡意程式的 SHA256</p><p>在 VirusTotal 中，關於 IP 會顯示之前出現惡意軟體與這個 IP 連線的功能，因此我們將23.22.63.114 丟進 VirusTotal 中，並選擇 Relation 頁面。</p><p><img src="/assets/U2Zb0bpFQ_0lNJMMVHXv1gq10LH72ViVl1NiWeKGRKM=.png"></p><p>那經過嘗試答案會是 MirandaTateScreensaver.scr.exe ，點進去後就會拿到這個惡意程式的 sha256</p><p><img src="/assets/kAguqxryYp9DeA6kjwiYTuLJwRJMoJx0vsAx-KtPlVM=.png"></p><blockquote><p>ans : 9709473ab351387aab9e816eff3910b9f28a7a70202e250ed46dba8f820f34a8</p></blockquote><hr><blockquote><p>Q15 : Web Defacement: What is the special hex code associated with the customized malware discussed in the previous question? (Hint: It’s not in Splunk)</p></blockquote><p>這題想要得知前一題的惡意程式的special hex code</p><p>這題會需要看VirusTotal 的<a href="https://www.virustotal.com/gui/file/9709473ab351387aab9e816eff3910b9f28a7a70202e250ed46dba8f820f34a8/community">Community</a> 頁面，因為有些人會在這邊貼出報告以及special hex code</p><p><img src="/assets/XitpF8FFxr2ZS_0sxAJxeZAZUpoxNasnAMTKP2ZW8A4=.png"></p><blockquote><p>ans : 53 74 65 76 65 20 42 72 61 6e 74 27 73 20 42 65 61 72 64 20 69 73 20 61 20 70 6f 77 65 72 66 75 6c 20 74 68 69 6e 67 2e 20 46 69 6e 64 20 74 68 69 73 20 6d 65 73 73 61 67 65 20 61 6e 64 20 61 73 6b 20 68 69 6d 20 74 6f 20 62 75 79 20 79 6f 75 20 61 20 62 65 65 72 21 21 21</p></blockquote><hr><blockquote><p>Q16 : Web Defacement: One of Po1s0n1vy’s staged domains has some disjointed “unique” whois information. Concatenate the two codes together and submit them as a single answer.</p></blockquote><p>題目說Po1s0n1vy 暫時架設的 domain 當中包含兩段分開出現的「唯一代碼／字串」，把那兩段代碼 串接成一個單一答案 提交</p><p>我們在 Q13 時用 VirusTotal 掃描這個 IP 它之前關聯的 domain，總共有以下 domain</p><ul><li><a href="https://www.virustotal.com/gui/domain/waynecorpnc.com">waynecorpnc.com</a></li><li><a href="https://www.virustotal.com/gui/domain/ec2-23-22-63-114.compute-1.amazonaws.com">ec2-23-22-63-114.compute-1.amazonaws.com</a></li><li><a href="https://www.virustotal.com/gui/domain/po1s0n1vy.com">po1s0n1vy.com</a></li><li><a href="https://www.virustotal.com/gui/domain/prankglassinebracket.jumpingcrab.com">prankglassinebracket.jumpingcrab.com</a></li></ul><p>我們每個都可以用 <a href="https://www.whoxy.com/">whoxy</a> 查看</p><p>答案會在 waynecorpnc.com 中，但是現在已經找不到該domain 的詳細資訊了，所以我參考了其他人的 <a href="https://jk105.gitlab.io/infosec/post/cyberdefenders_bossofthesoc1/">writeup</a> ，答案會在 company_name 與 mailing_address 中</p><p><img src="/assets/WtVuDsZjlmCcFeKZBQgGG1m9D1Q4AxkQUE14DMKXGyQ=.png"></p><p>source : <a href="https://jk105.gitlab.io/infosec/post/cyberdefenders/_bossofthesoc1/">https://jk105.gitlab.io/infosec/post/cyberdefenders\_bossofthesoc1/</a></p><blockquote><p>ans : 31 73 74 32 66 69 6E 64 67 65 74 73 66 72 65 65 62 65 65 72 66 72 6F 6D 72 79 61 6E 66 69 6E 64 68 69 6D 74 6F 67 65 74</p></blockquote><hr><blockquote><p>Q17 : Web Defacement: One of the passwords in the brute force attack is James Brodsky’s favorite Coldplay song. Hint: we are looking for a six-character word on this one. Which is it?</p></blockquote><p>這題問的是爆破的密碼中有一個是James Brodsky’s favorite Coldplay song ，要找出那個密碼</p><p>這題我們可以嘗試使用 splunk 的 lookup 功能，Splunk 的 lookup 是一種 查表功能，可以把外部資源（例如 CSV、KV Store 或自定義資料表）中的欄位值與事件資料中的欄位做匹配，然後把匹配到的欄位值加入到事件資料中以豐富資料內容</p><p>首先我們需要先獲得 Coldplay 的所有歌，<a href="https://www.kaggle.com/datasets/faizalkarim/coldplay-albums-and-live-shows?resource=download">Kaggle</a> 網站中有人有整理出來，可以免費下載</p><p>接下來我們要匯入到 splunk 中，選擇Settings-&gt;Lookups</p><p><img src="/assets/f64hU00irMb4r15CevzuVfxGo5GDplea9MF5hR1EW_k=.png"></p><p>進入 Lookups頁面後我們要先新增 Lookup table ，點擊第一個的Add new ，將剛剛的下載的 csv 檔丟入</p><p><img src="/assets/GO9IRY2LEw4QVueocZcCQ4VzvW_07CVq43nxzCHRE9E=.png"></p><p>按下Save 之後要記得改權限，預設應該是Private ，要記得改成 Global 。</p><p><img src="/assets/hdByWKZlYlj9uE6aR6GQoe0yw7eLo6UMe5vtUKEzvNI=.png"></p><p>接下來要定義這個表的路徑以及欄位輸出方式</p><p>點選 Lookups 的首頁的第二行Add new ，接下來去指定剛剛丟進去的 csv 表，要記得開啟進階選項把 Case sensitive match 取消勾選</p><p><img src="/assets/3bznzUqDU1ujXoEwOpSRUXmT3yqzy7peIVtO-D2qjuI=.png"></p><p>接下來就可以回到search 頁面使用 lookup 語法，匹配欄位資料</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| lookup Coldplay name as pass output duration| search duration&#x3D;*| table pass duration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lookup 的語法解說如下</p><ul><li>lookup Coldplay：呼叫名為 Coldplay 的 lookup 表格</li><li>name as pass：將當前搜尋結果中的pass欄位對應到對應表的name欄位</li><li>output duration：從 lookup 表格輸出 duration 欄位至事件資料</li></ul><p>而加上search duration&#x3D;* 是因為只有被對應到的 pass 會出現duration，因此加上這個保證出來的會是匹配到的</p><p><img src="/assets/mW7xHnpiq_iqPlDT21PsoZceDyLPkD1CwssxulNkPlk=.png"></p><p>題目提示是六個字，因此是答案是yellow </p><blockquote><p>ans : yellow</p></blockquote><hr><blockquote><p>Q18 : Web Defacement: What was the average password length used in the password brute-forcing attempt? (Round to a closest whole integer. For example “5” not “5.23213”)</p></blockquote><p>題目想要我們計算出所有嘗試的密碼長度</p><p>要計算 password 的平均長度，我們會需要使用到 eval 與 stats 幫助我們計算，eval 提供了基本的運算操作以及豐富的函式，<a href="https://help.splunk.com/en/splunk-cloud-platform/search/search-reference/10.0.2503/search-commands/eval">官方doc</a></p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| eval length &#x3D; len(pass) | stats avg(length) as avglength | eval rounded &#x3D; round(avglength, 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們將pass提取出來後，使用len計算每一個pass 的長度，接下來用stats 提供的avg 計算所有欄位的平均長度，最後在使用 eval 的 round 幫我們做四捨五入操作</p><p><img src="/assets/2c1yATfALElIHxDzSUF1GHSVnCVk0OjI8U-DAjAv5Ic=.png"></p><p>答案計算出來為 6</p><blockquote><p>ans : 6</p></blockquote><hr><blockquote><p>Q19 : Web Defacement: How many seconds elapsed between the brute force password scan identified the correct password and the compromised login? Round to 2 decimal places.</p></blockquote><p>題目想要問識別出正確密碼到被成功登入之間經過了多少秒</p><p>我們在 Q9 得知了被爆破出來的密碼是 batman，因此我們先用 search 語法將 batman 密碼的請求先篩出來</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| search pass&#x3D;&quot;batman&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/5_9NUx3oXQErFGjdK89pTRrJncTrI3r-dr5iQhHBAsw=.png"></p><p>Time 欄位相減的秒數為 92.17</p><blockquote><p>ans : 92.17</p></blockquote><hr><blockquote><p>Q20 : Web Defacement: How many unique passwords were attempted in the brute force attempt?</p></blockquote><p>題目想要問攻擊者嘗試了多少種密碼</p><p>這邊我們可以使用 stats 當中 dc 這個函式，dc 是 Splunk 中的去重計數函式 ，全稱為 “distinct count”</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| stats dc(pass) as &quot;attempt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/9iSpRiZZHUassgH2fFCF0IJr92jRFOeNS3pBWP3zcyA=.png"></p><p>答案出來為412</p><blockquote><p>ans : 412</p></blockquote><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了 Boss Of The SOC v1 的Q11~Q20 解題過程，今天體驗到 Threat Hunting 的過程並不只是單純看SIEM 找攻擊證據，也需要配合 OSINT 找出 APT 組織訊息，並且今天也學到了更多的 Splunk 搜尋的用法，語法越來越多，感覺做筆記真的挺重要的，像是我在做今天的內容時會忘記一些語法怎麼用然後就會往回看昨天寫的內容，明天會把剩下的題目分享完</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boss Of The SOC </tag>
            
            <tag> Splunk </tag>
            
            <tag> Threat Hunting </tag>
            
            <tag> 威脅狩獵 </tag>
            
            <tag> 資安競賽 </tag>
            
            <tag> APT </tag>
            
            <tag> 勒索軟體 </tag>
            
            <tag> Web Defacement </tag>
            
            <tag> 暴力破解 </tag>
            
            <tag> 漏洞掃描 </tag>
            
            <tag> OSINT </tag>
            
            <tag> 惡意軟體分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boss Of The SOC v1 上</title>
      <link href="/2025/10/11/BossOfSOC1/"/>
      <url>/2025/10/11/BossOfSOC1/</url>
      
        <content type="html"><![CDATA[<h1 id="Day27-Boss-Of-The-SOC-v1-上"><a href="#Day27-Boss-Of-The-SOC-v1-上" class="headerlink" title="Day27 Boss Of The SOC v1 上"></a>Day27 Boss Of The SOC v1 上</h1><h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會分享 Boss Of The SOC v1 Q1 ~ Q10 的解題過程，解題平台會使用 CyberDefender，因為 Splunk 環境已經幫我們架設好了，也可以在平台上驗證答案的正確性。</p><hr><h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><p>本次實作實驗聚焦在 APT（高階持續性威脅）情境與勒索軟體情境。你將扮演 Alice Bluebird 的角色——剛被聘為 Wayne Enterprises 的 SOC 分析師，負責偵測與防禦各類網路攻擊。</p><h2 id="場景-1（APT）："><a href="#場景-1（APT）：" class="headerlink" title="場景 1（APT）："></a>場景 1（APT）：</h2><p>今天是 Alice 在 Wayne Enterprises 安全部門（Security Operations Center，SOC）的第一天。Lucius 叫 Alice 坐下並給她第一個任務：一份來自高譚市警察局（Gotham City Police Department, GCPD）的備忘錄。GCPD 發現線上有證據（<a href="http://pastebin.com/Gw6dWjS9%EF%BC%89%E9%A1%AF%E7%A4%BA%E7%B6%B2%E7%AB%99">http://pastebin.com/Gw6dWjS9）顯示網站</a> <a href="http://www.imreallynotbatman.com/">www.imreallynotbatman.com</a> 在 Wayne Enterprises 的 IP 位址空間內被入侵。該駭客組織有多重目標……但他們的作案手法之一是篡改網站以羞辱被害者。Lucius 要求 Alice 判定 <a href="http://www.imreallynotbatman.com(wayne/">www.imreallynotbatman.com（Wayne</a> 企業執行長的個人部落格）是否確實遭到入侵。</p><p>在此情境中，使用者社群在瀏覽 Wayne Enterprises 網站時回報看到下列被篡改的圖片，且部分回報提到「P01s0n1vy」。若你不熟悉，P01s0n1vy 是一個曾針對 Wayne Enterprises 的 APT 組織。你作為 Alice 的目標是調查該網站篡改事件，並嘗試依照 Lockheed Martin Kill Chain 重建攻擊流程。</p><p><img src="/assets/kNpb6q5LoVBZaQL696hxc5NUhEZYM2Y6amfiOkUtQXA=.png"></p><h2 id="場景-2（勒索軟體）："><a href="#場景-2（勒索軟體）：" class="headerlink" title="場景 2（勒索軟體）："></a>場景 2（勒索軟體）：</h2><p>在第二個情境中，你的一位使用者在 Windows 桌面上看到一張圖片，表示系統上的檔案已被加密，必須付款才能取回檔案。看起來 Wayne Enterprises 有一台主機感染了 Cerber 勒索軟體，你的目標是調查這起勒索事件。</p><p><img src="/assets/XMxnyYYAgsqi2e8fgkpYi93wDgWY461l01mIV_P_MgM=.png"></p><hr><blockquote><p>Q1 : This is a simple question to get you familiar with submitting answers. What is the name of the company that makes the software that you are using for this competition? Just a six-letter word with no punctuation.</p></blockquote><p>因為題目給的環境是 Splunk，這邊回答 splunk 即可。</p><p><img src="/assets/icMNAy1R14lhSyuRYQVk2lmq8FB6TmKnw5bcI1zeRa8=.png"></p><blockquote><p>Ans :  splunk</p></blockquote><hr><blockquote><p>Q2 : Web Defacement: What content management system is imreallynotbatman.com likely using? (Please do not include punctuation such as . , ! ? in your answer. We are looking for alpha characters only.)</p></blockquote><p>題目想要找出 <code>imreallynotbatman.com</code> 網站使用了什麼 CMS 系統。</p><p>因此我們會用到 Search 功能。</p><p>來到 Search &amp; Report 頁面在 Search 欄位搜尋：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;&quot;botsv1&quot; imreallynotbatman.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Splunk 收到日誌或事件後，會根據設定儲存在不同的 index<br>這段搜尋語法的意思是在資料索引為botsv1中，找出字串中包含 <code>imreallynotbatman.com</code>。<br>data indexes 可以在 Setting-&gt; DATA -&gt; Index 中得知<br><img src="/assets/s7Yn9AMSgsP7iMFp1_kteGCWUZgVydpg8wxoXVaY1Mw=.png"></p><p>看第一個 Log 就可以發現使用的是 <code>joomla</code>。</p><p><img src="/assets/6KmCQjyMKDS5-zRyLEXLBBfFIzOziopvdBwhCd6LJiM=.png"></p><blockquote><p>ans : <code>joomla</code></p></blockquote><hr><blockquote><p>Q3 : Web Defacement: What is the likely IP address of someone from the Po1s0n1vy group scanning imreallynotbatman.com for web application vulnerabilities?</p></blockquote><p>接下來他想要找的是 Po1s0n1vy 用來掃描 imreallynotbatman.com 的 IP 是什麼？</p><p>有一個線索是知道這個 IP 有進行網頁漏洞掃描，有一個方向是我們可以使用在 Day17 提到的 Suricata，它會產生網路連接的 Log，因此我們搜尋的範圍可以限制在 Suricata 的 log 下，搜尋指令如下：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/JxJw2skLZ9umeMi8nqi2Oawi__n6MDwXb8f9NJlSCYA=.png"></p><p>然後我們想要專注的是<strong>來源 IP</strong>，因此我們會需要用到 table 語法，它可以將我們想要的欄位單獨拉出來做一張表格，讓我們可以專注在分析這個欄位上。</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com | table src_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/OhDFwdXkJxXoIpb1xqzNuy-uyBeSzR4Ds3i5LoryWiw=.png"></p><p>這邊我們獲得了每個 Suricata log 的來源 IP，接下來進行統計，因為我想要得到的是這個 IP 出現幾次，數量很多會有很高的機率是進行掃描，所以接下來會使用到 stats 語法，它提供了一些基本的統計功能。</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com | table src_ip | stats count by src_ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/XOGDycf1lecuXmMmaM985JoLpyxsQW9OIUYvABV4ZMA=.png"></p><p>這樣就看得出來答案就是 <code>40.80.148.42</code>，另外如果想要數量由大排到小，可以使用 sort 語法，預設是由小排到大，加上 <code>-</code> 可以讓它變成由大排到小。</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com | table src_ip | stats count by src_ip | sort -count reverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets/be5iJG9bbqLEDr3wZZV59naJ4B8Du_ciK_RTg4cMfdA=.png"></p><blockquote><p>ans : <code>40.80.148.42</code></p></blockquote><hr><blockquote><p>Q4 : Web Defacement: What company created the web vulnerability scanner used by Po1s0n1vy? Type the company name. (For example, “Microsoft” or “Oracle”)</p></blockquote><p>這題想要搜尋到他們使用的 scanner 工具是什麼。</p><p>一樣我們可以使用 Suricata 工具，它除了可以產生網路連接 log 之外，還可以根據自訂規則產生警報，如抓到某個掃描工具的 Signature。</p><p>所以我們可以針對 Suricata 產生的 alert 去分析：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com src_ip&#x3D;40.80.148.42 alert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/PF6XbKoFeldNiTIGNzQa2S3TylhVgZqSQfC96KNtyHA=.png"></p><p>signature 欄位顯示偵測到的是什麼相關操作，因此我們用 table 專注去看 alert.signature 有沒有相關的線索：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;suricata http.hostname&#x3D;imreallynotbatman.com src_ip&#x3D;40.80.148.42 alert| table alert.signature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/FFuDTSF0_gvnDMjyPdFes-eoxr2Iy8NVLD0YUvxLKZs=.png"></p><p>接下來就可以找到這個 value：</p><pre class="line-numbers language-none"><code class="language-none">ET SCAN Acunetix Accept HTTP Header detected scan in progress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出 Acunetix 就是我們需要的答案。</p><blockquote><p>ans : Acunetix</p></blockquote><hr><blockquote><p>Q5 : Web Defacement: What IP address is likely attempting a brute force password attack against imreallynotbatman.com?</p></blockquote><p>要找到哪個 IP 在對 imreallynotbatman.com 進行暴力破解。</p><p>需要對網站進行帳號密碼的暴力破解，會需要用到 POST 的 method，我們可以針對 POST 操作做查看，並且也會需要知道 POST 帶的資料，確認是不是在做暴力破解，查詢可以用以下指令：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 http_method&#x3D;POST dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http| table src_ip, form_data, uri<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sourcetype=stream:http</code> 代表是拿 Splunk Stream app 所收集到並且屬於 HTTP 流量資料，而 <code>dest_ip=192.168.250.70</code> 是 imreallynotbatman.com 的 IP，在前幾題的操作可以得知。</p><p><img src="/assets/YlPiSsFhTTIy4alIrPTC0E81cW-xZcJU14fKd8qyayo=.png"></p><p>這邊可以看出來是 23.22.63.114 在進行暴力破解。</p><blockquote><p>ans : 23.22.63.114</p></blockquote><hr><blockquote><p>Q6 : Web Defacement: What was the first brute force password used</p></blockquote><p>這題要獲得第一個暴力破解嘗試的密碼。</p><p>這題可以使用 sort 將時間排序：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 http_method&#x3D;POST dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http src_ip&#x3D;23.22.63.114| table src_ip, form_data, uri _time| sort _time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/39-8d3Nvl4wzQTMjMF4pyt3Z9T5fbnjtIBP4MTLXBnQ=.png"></p><p>看到第一列的 password 參數是 12345678。</p><blockquote><p>ans : 12345678</p></blockquote><hr><blockquote><p>Q7 : Web Defacement: What is the name of the executable uploaded by Po1s0n1vy? Please include the file extension. (For example, “notepad.exe” or “favicon.ico”)</p></blockquote><p>這題要找的是 Po1s0n1vy 上傳的執行檔的檔名是什麼。</p><p>在 HTTP 中，如果上傳一個檔案會使用 <code>multipart/form-data</code>，代表會將不同 type 的資料透過一次請求傳送出去，因此我們可以用 <code>multipart/form-data</code> 縮小我們的搜尋範圍，另外語法也支援 regex，在搜尋執行檔上比較方便：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 http_method&#x3D;POST dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http multipart&#x2F;form-data *.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/YVwaJ7YoOM-RMWk-A5KU8bH-aYXv1Bg-BFKJo1a-ZSo=.png"></p><p>可以發現到上傳的執行檔檔名為 3791.exe。</p><blockquote><p>ans : 3791.exe</p></blockquote><hr><blockquote><p>Q8 : Web Defacement: What is the MD5 hash of the executable uploaded?</p></blockquote><p>這題問 3791.exe 的 MD5 值是多少。</p><p>要取得 MD5 的值，會需要看關於 winlog 的紀錄，這邊會提到一個工具 - <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/sysmon">Sysmon</a>，它會記錄系統內發生的重要事件，包含 Process Create、Network Connect、檔案建立與變更、Registry Modification。 </p><p>以下是 Sysmon 的 Event ID：</p><h3 id="Sysmon"><a href="#Sysmon" class="headerlink" title="Sysmon"></a>Sysmon</h3><table><thead><tr><th>Event ID</th><th>說明</th></tr></thead><tbody><tr><td>1</td><td>Process Create（程式啟動）</td></tr><tr><td>2</td><td>File creation time changed（時間戳被修改）</td></tr><tr><td>3</td><td>Network connection（TCP 連線）</td></tr><tr><td>5</td><td>Process Terminate（程式終止）</td></tr><tr><td>6</td><td>Driver Loaded（驅動載入）</td></tr><tr><td>7</td><td>Image Loaded（DLL載入）</td></tr><tr><td>8</td><td>CreateRemoteThread（遠端執行緒注入）</td></tr><tr><td>9</td><td>RawAccessRead（磁碟原始存取）</td></tr><tr><td>10</td><td>ProcessAccess（程式存取他人記憶體）</td></tr><tr><td>11</td><td>File Create（檔案建立）</td></tr><tr><td>12</td><td>Registry Key Create（註冊表鍵建立）</td></tr><tr><td>13</td><td>Registry Value Set（註冊表值修改）</td></tr><tr><td>14</td><td>Registry Key Delete（註冊表鍵刪除）</td></tr><tr><td>15</td><td>FileCreateStreamHash（建立 ADS）</td></tr><tr><td>22</td><td>DNS Query（DNS 查詢事件）</td></tr><tr><td>23</td><td>File Delete（檔案刪除）</td></tr><tr><td>25</td><td>Process Tampering（程式記憶體被修改）</td></tr><tr><td>26</td><td>File Deleted and Overwritten（防止取證）</td></tr><tr><td>255</td><td>Sysmon 設定被修改（Config change）</td></tr></tbody></table><p>其中 Event ID &#x3D; 1 有 MD5 可以查看，那這樣我們就搜尋 3791.exe 的執行紀錄，獲得它的 MD5 值：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 source &#x3D; WinEventLog:Microsoft-Windows-Sysmon&#x2F;Operational 3791.exe EventCode&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/juHx-R1ointkAU6o-_IgpSKURGIDc0xy64Q9Lcizq1g=.png"></p><p>而我們專心看這個紀錄：</p><p><img src="/assets/VtTVFx0LRq1LMC0GeOJe7sqZy9cI0_yULvm2phY2C7Q=.png"></p><p>它的 ParentCommandLine 是 <code>cmd.exe/c &quot;3791.exe2&amp;gt;&amp;amp;1</code>，以及這邊顯示的 <code>&lt;DataName=&#39;Image&#39;&gt;C:\inetpub\wwwroot\joomla\3791.exe&lt;/Data&gt;&lt;DataName=&#39;CommandLine&#39;&gt;3791.exe</code>，代表這個紀錄是關於 3791.exe 的資訊，所以往後面看它的 MD5 值是 AAE3F5A29935E6ABCC2C2754D12A9AF0。</p><blockquote><p>ans : AAE3F5A29935E6ABCC2C2754D12A9AF0</p></blockquote><hr><blockquote><p>Q9 : Web Defacement: What was the correct password for admin access to the content management system running “imreallynotbatman.com”?</p></blockquote><p>這題想要問是哪個密碼成功進入了 imreallynotbatman.com。</p><p>我們可以在解 Q5 的時候知道登入的頁面是在 <code>/joomla/administrator/index.php</code>，並且它是用暴力破解的方式嘗試登入系統，所以如果有一個密碼與其他登入次數比其他的還多就有可能會是正確的密碼，但是它的密碼是放在 form_data 欄位，這個欄位會包含其他的文字資訊，因此我們會需要用到 rex 語法：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| stats count by pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>rex 的欄位說明如下：</p><ul><li>field&#x3D;form_data：表示只在事件的 form_data 欄位內容中執行正規表達式（而不是整個 _raw）。</li><li>“passwd&#x3D;(?<pass>\w+)”：正規表達式本體：<ul><li>passwd&#x3D;：字面匹配字串 passwd&#x3D;（例如 HTML 表單或 HTTP body 裡的參數名）。</li><li>(?<pass>\w+)：命名捕獲群組，會把匹配到的內容放到 Splunk 欄位 pass 中。<ul><li>\w+ 表示一或多個「字母、數字或底線（underscore）」。</li></ul></li></ul></li></ul><p>原本的 form_data 長這樣：</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;admin&amp;task&#x3D;login&amp;return&#x3D;aW5kZXgucGhw&amp;option&#x3D;com_login&amp;passwd&#x3D;topgun&amp;49e63c55a9730eee52c7ea0448de3a01&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此它會提取 <code>passwd=</code> 後面的字串，直到碰到不是字母、數字或底線為止，然後它會變成單獨的 pass 欄位。</p><p><img src="/assets/bDwPdvFgqR8HTS-_cHAqJUw8P4v7Kczqt2wjET1hwak=.png"></p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 dest_ip&#x3D;192.168.250.70 sourcetype&#x3D;stream:http http_method&#x3D;POST uri&#x3D;&#x2F;joomla&#x2F;administrator&#x2F;index.php| rex field&#x3D;form_data &quot;passwd&#x3D;(?&lt;pass&gt;\w+)&quot;| stats count by pass| sort -count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets/O7MkDnpyKaqjyMnhCJipRzitRuH_45-EXW9K7hO0R2I=.png"></p><blockquote><p>ans : batman</p></blockquote><hr><blockquote><p>Q10 Web Defacement: What is the name of the file that defaced the imreallynotbatman.com website? Please submit only the name of the file with the extension (For example, “notepad.exe” or “favicon.ico”).</p></blockquote><p>題目想問是哪個檔案名稱污染了 imreallynotbatman.com 網頁。</p><p>這邊應該是想要問情境 1 當中進入網站出現一張圖片。</p><p>代表它之前可能會去下載過，因此可以用以下指令查詢它之前請求的頁面：</p><pre class="line-numbers language-none"><code class="language-none">index&#x3D;botsv1 sourcetype&#x3D;stream:http src_ip&#x3D;192.168.250.70 | table site src_headers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/assets/Q4BQsOFmAx6I7jH9goDcf-MGpRlOr2Ocb1LG0GUrdu8=.png"></p><p>這邊可以看到它去一個網頁請求 <code>poisonivy-is-coming-for-you-batman.jpeg</code> 圖片，這個就是答案。</p><blockquote><p>ans : poisonivy-is-coming-for-you-batman.jpeg</p></blockquote><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了 Boss Of The SOC v1 的 Q1 ~ Q10 的解題過程，當中分享了一些 Splunk 的用法以及 Threat Hunting 的過程，明天會繼續分享 Boss Of The SOC v1 剩餘題目。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boss Of The SOC </tag>
            
            <tag> Splunk </tag>
            
            <tag> Threat Hunting </tag>
            
            <tag> 威脅狩獵 </tag>
            
            <tag> 資安競賽 </tag>
            
            <tag> APT </tag>
            
            <tag> 勒索軟體 </tag>
            
            <tag> Web Defacement </tag>
            
            <tag> 暴力破解 </tag>
            
            <tag> 漏洞掃描 </tag>
            
            <tag> Suricata </tag>
            
            <tag> Sysmon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尋找蟑螂是不是也算是一種威脅狩獵？</title>
      <link href="/2025/10/10/ThreatHunting_intro/"/>
      <url>/2025/10/10/ThreatHunting_intro/</url>
      
        <content type="html"><![CDATA[<p>現在科技持續進步的時代，網路架構與技術越來越複雜，攻擊也越來越精密，如果只是依賴原有的自動化工具去達成防禦效果，常常還是會有漏網之魚，因此今天會分享什麼是 Threat Hunting，以及在 Threat Hunting 中會需要使用到什麼技術或工具。</p><hr><h1 id="🔫-Threat-Hunting"><a href="#🔫-Threat-Hunting" class="headerlink" title="🔫 Threat Hunting"></a>🔫 Threat Hunting</h1><p>傳統的資安防禦方式是使用自動化工具（如：防火牆、IDS&#x2F;IPS）去偵測已知攻擊行為，像是病毒特徵碼、惡意 IP 或異常登入，如果自動化工具偵測到就會發送警報，資安人員接收到後就開始進行處理。</p><p>而 Threat Hunting 是一個<strong>主動式</strong>的防禦，資安人員會主動去看 SIEM（安全資訊與事件管理）或各式數據，分析可疑行為，而不是等警報出現才處理；分析過程會根據自己假設的攻擊情境或威脅情資，檢視日誌（Log）或網路流量（Network Traffic）。</p><p>例如：</p><ul><li>近期 PowerShell 活動量增加，由於攻擊者常利用 PowerShell 進行偵查、橫向移動或憑證竊取，會不會是遭受到了什麼攻擊？<ul><li>查詢 Event ID 4104（Script Block Logging） 的記錄</li></ul></li><li>如果近期某個漏洞被廣泛利用，我們的系統會不會也正遭到相同的攻擊？<ul><li><a href="https://nvd.nist.gov/vuln/detail/cve-2021-44228">Log4Shell (CVE-2021-44228)</a></li><li>檢查是否有連接到可疑的 LDAP 或 RMI 伺服器</li><li>搜尋包含 <code>$&#123;jndi:</code> 字串的日誌記錄</li><li>查詢 Event ID 4688（Process Creation） 包含 <code>java</code> 且父進程是 Web 應用程式</li><li>搜尋是否有可疑的 .class 或 .jar 檔案被建立</li></ul></li></ul><p>如果發現蒐集到的證據使假設成立，會需要進一步地解析整個攻擊流程，後續也需要進行相關的處理，包括啟動事件回應程序、通報相關單位、隔離與清除威脅以及事件後檢討，但如果假設沒有成立，也可以當作一次經驗參考。</p><p>整體來說可以發現 Threat Hunting 的基本流程是 Trigger&#x2F;Hypotheses（從異常&#x2F;已知行為或威脅情資建立假設）→ Investigation（蒐集證據）→ Uncover（進一步分析）→ Inform &amp; Enrich，並且在威脅狩獵中這流程會持續循環。</p><p><img src="/assets/of-U2Ye_YQ9AateRbdTn0JX6zAyJ2iWWj6YU5isWn3o=.png"></p><p>source : <a href="https://www.nist.gov/system/files/documents/2017/04/20/2017-04-10_-_sqrrl_enterprise.pdf">NIST</a></p><hr><p>在威脅狩獵的過程中會需要站在攻擊者的角度思考，<strong>MITRE ATT&amp;CK 框架</strong>可以很好地幫助我們預測攻擊者的下一步，並建立更精準的獵捕策略。</p><h1 id="MITRE-ATT-CK"><a href="#MITRE-ATT-CK" class="headerlink" title="MITRE ATT&amp;CK"></a>MITRE ATT&amp;CK</h1><p>網站：<a href="https://attack.mitre.org/">https://attack.mitre.org/</a></p><p>MITRE ATT&amp;CK (Adversarial Tactics, Techniques, and Common Knowledge) 是一個全球可存取、基於現實世界觀察的網路對手戰術和技術知識庫。它由 MITRE 公司開發，旨在幫助資安專業人員更好地理解、檢測和防禦網路攻擊。</p><p>這個框架將攻擊行為分為三個層級：</p><ul><li><strong>Tactics（戰術）</strong>：攻擊者在特定階段的目標</li><li><strong>Techniques（技術）</strong>：達成該目標的方法。</li><li><strong>Sub-Techniques（子技術）</strong>：更細節的具體實作方式。</li></ul><p><img src="/assets/UdPk5OTiE-5Q08137RurBVranBuDvwPROyjrNzk0N5A=.png"></p><p>以下介紹常見的 ATT&amp;CK 戰術範例</p><table><thead><tr><th><strong>Initial Access（初始存取）</strong></th><th>攻擊者如何進入你的系統或網路</th></tr></thead><tbody><tr><td><strong>Execution（執行）</strong></td><td>攻擊者如何執行惡意程式碼</td></tr><tr><td><strong>Persistence（持久化）</strong></td><td>攻擊者如何維持長期存取</td></tr><tr><td><strong>Discovery（探索）</strong></td><td>攻擊者如何蒐集環境資訊</td></tr><tr><td><strong>Privilege Escalation（權限提升）</strong></td><td>攻擊者如何取得更高權限</td></tr><tr><td><strong>Lateral Movement（橫向移動）</strong></td><td>攻擊者如何在網路內擴散</td></tr><tr><td><strong>Command and Control（C2 控制）</strong></td><td>攻擊者如何遠端操控受害系統</td></tr><tr><td><strong>Exfiltration（資料外洩）</strong></td><td>攻擊者如何竊取資料</td></tr></tbody></table><p>這邊舉昨天提到的釣魚攻擊為例，釣魚攻擊屬於 Initial Access 分類中的 Techniques，編號為 <a href="https://attack.mitre.org/techniques/T1566/">T1566</a>。</p><p><img src="/assets/u_yIEtavx4bbjApsHpG1TQ3Yqv1d7OrxjrxVS9oiCfI=.png"></p><p>點進後會進入到關於釣魚攻擊介紹以及它的 Sub-Techniques，像是關於釣魚信件中的惡意附件的子技術就是 T1566.001。</p><p><img src="/assets/bEXBHcsJGE2XMfRSaNVultYj33MSp9nVu5yqYKOyCO4=.png"></p><hr><p>一開始提到 Threat Hunting 的過程中會需要主動去看 SIEM，目前最常見的 SIEM 分別是 ELK 以及 Splunk。</p><h2 id="Elastic-Stack"><a href="#Elastic-Stack" class="headerlink" title="Elastic Stack"></a>Elastic Stack</h2><p>官網：<a href="https://www.elastic.co/elastic-stack">https://www.elastic.co/elastic-stack</a></p><p>Elastic Stack 是一套在業界非常常用的日誌／資料搜尋、分析、可視化平台，Elastic Stack 是由三個開源工具的縮寫：Elasticsearch、Logstash、Kibana，並將這三者整合起來，另外 Elastic Stack是開源軟體。</p><p><img src="/assets/QGoCaXWy-l_hx5rXtdkXyElqXszPLW75psYcSr19bus=.png"></p><p><code>source: https://www.geeksforgeeks.org/software-engineering/what-is-elastic-stack-and-elasticsearch/</code></p><table><thead><tr><th><strong>元件</strong></th><th><strong>功能 &#x2F; 角色</strong></th><th><strong>特點補充</strong></th></tr></thead><tbody><tr><td><strong>Elasticsearch</strong></td><td>搜索與分析引擎：負責儲存、索引與查詢資料</td><td>基於 Lucene，支援分散式架構、橫向擴展、近即時查詢。</td></tr><tr><td><strong>Logstash</strong></td><td>資料收集與轉換管道</td><td>從多個來源收資料、做過濾／解析／變換，然後輸出到 Elasticsearch 或其他目標。</td></tr><tr><td><strong>Kibana</strong></td><td>資料視覺化與探索介面</td><td>對 Elasticsearch 中的資料做查詢、分析、繪圖、做 Dashboard／報表。</td></tr></tbody></table><h2 id="Splunk"><a href="#Splunk" class="headerlink" title="Splunk"></a>Splunk</h2><p>官網連結：<a href="https://www.splunk.com/zh/_tw">https://www.splunk.com/zh\_tw</a></p><p>Splunk 是一套專為機器產生資料（machine-generated data，如日誌、事件、度量、流量資料等）而設計的平台，能將這些資料進行接收、索引、搜尋、分析、視覺化。</p><p><img src="/assets/YV0SlHH_JnWflN_GVbRkyNQBowxdGQ7fZMEbWiEC6kk=.png"></p><p><code>source: https://www.splunk.com/zh_tw/products.html</code></p><p>接下來的三天我會使用 Splunk 進行 Threat Hunting 挑戰，題目會來自 Splunk 舉辦的 Boss Of The SOC，過程中也會介紹 Splunk 的使用方式。</p><h2 id="Boss-Of-The-SOC"><a href="#Boss-Of-The-SOC" class="headerlink" title="Boss Of The SOC"></a>Boss Of The SOC</h2><p>Boss Of The SOC (BOTS) 是 Splunk 舉辦的全球性網路安全競賽，這是一個基於真實世界攻擊場景的威脅狩獵競賽，參賽者需要在模擬的企業環境中識別、分析和回應各種網路攻擊。</p><p><img src="/assets/EZVoHdZRfHrOWC7SjpB6d75R399yqpqqNj5Z9dV2yow=.png"></p><p><a href="https://www.wepro180.com/221130_splunkbots/">相關報導</a></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了 Threat Hunting 的概念以及當中使用到的 MITRE ATT&amp;CK 與 SIEM 工具；接下來三天會透過 Boss Of The SOC 學習並分享 Threat Hunting 的詳細過程。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boss Of The SOC </tag>
            
            <tag> Splunk </tag>
            
            <tag> Threat Hunting </tag>
            
            <tag> 威脅狩獵 </tag>
            
            <tag> MITRE ATT&amp;CK </tag>
            
            <tag> SIEM </tag>
            
            <tag> Elastic Stack </tag>
            
            <tag> 資安防禦 </tag>
            
            <tag> 主動式防禦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果我用 Email 釣魚，這樣可以釣到真正的美人魚嗎</title>
      <link href="/2025/10/09/EmailSecurity/"/>
      <url>/2025/10/09/EmailSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>Email - 我們常常在生活中會使用到，透過 Email 我們可以不受距離限制的跟其他人溝通，十分方便，但這方便也會帶來資安風險，最常遇到的就是釣魚信件了，釣魚信件常常會偽裝成正常的組織或公司，引誘使用者點擊，如果使用者點擊了釣魚信件的網址或者下載了附件，有可能洩漏電腦的機密資料或者讓電腦中毒，並且釣魚信件使用門檻較低但殺傷力很大，是 APT 組織攻擊時最常用的初始攻擊向量，因此今天想要分享的是 Email Security</p><hr><h1 id="Email-Security"><a href="#Email-Security" class="headerlink" title="Email Security"></a>Email Security</h1><p>一個 Email 帳號的組成，會由一個小老鼠<code>@</code> 將左右隔開</p><ul><li>左半部分是依照使用者設定的字串，因此可以取名為<code>aaaabbbccc123</code> 、 <code>admin</code> 、<code>me</code> 皆可</li><li>右半部分是組織的 Domain Name，像是常見的 <code>gmail.com</code>；如果自己有架設 Email Server，就會是自己的 domain，如：<code>yunshiuan.com</code></li></ul><p><img src="/assets/RrromGCNVsSXy7dWVTw1aLyjocOQzZtGr4ggahqd7Fs=.png"></p><p><code>source: https://flickr.com/photos/jameschen1/24160994516/</code></p><p>到這邊就會有一個偽造正常信件的方式：如果攻擊者註冊了一個與正常組織幾乎相同、只差一個字的 domain，甚至直接冒用正常組織的 Domain Name 來欺騙使用者，只要使用者一個不注意就可能把它當成正常信件而被釣到，這個攻擊被稱為 <strong>Email Spoofing</strong></p><h1 id="Email-Spoofing"><a href="#Email-Spoofing" class="headerlink" title="Email Spoofing"></a>Email Spoofing</h1><p>攻擊者會試圖使用與常見組織相似或相同的 email 欺騙使用者認為是正常郵件。</p><p>ex : 可以透過 <a href="https://emkei.cz/">這個網頁</a>  偽造 Email 傳給使用者，這邊將 Email 偽造成<code>support@paypal.com</code> 並傳一封帳號異常的信給使用者</p><p><img src="/assets/PiPU_SyMgnQoKCb7bRDCvsyttMnbLm9Dt8RXKp7TKBk=.png"></p><p>那這樣只單看 Email 是很難分辨是否為釣魚信件，所以會透過郵件驗證協定 <strong>DMARC</strong> 來偵測郵件偽造攻擊。</p><h2 id="DMARC"><a href="#DMARC" class="headerlink" title="DMARC"></a>DMARC</h2><p>DMARC 是一種郵件驗證協定，它讓郵件網域擁有者能聲明當收到未通過驗證的郵件時該如何處理。</p><p>我在 demo 時寄到我個人的信箱，使用 Cloudflare 的 Email Routing 功能轉發郵件；因此當我把釣魚信寄到自己的信箱時，因未通過 DMARC 驗證而被拒收。</p><p><img src="/assets/aeeOF3FAMAlT_FXaTinD9zx6HRYzvPoellic9cvMBvM=.png"></p><p>如果DMARC 驗證通過的話會像下方圖示的一樣。</p><p><img src="/assets/cOeVnUSdeBGztRM6cfg0XEqzFCD75DgvYr24PX0TF7g=.png"></p><p>可以看到主要的驗證方式會使用到 SPF 以及 DKIM。</p><h2 id="SPF"><a href="#SPF" class="headerlink" title="SPF"></a>SPF</h2><p>SPF 是一種電子郵件驗證協定，它讓網域擁有者能夠指定哪些郵件伺服器有權代表該網域寄送郵件。這份「授權清單」會以 DNS TXT 記錄 的形式公開發布，接收方的郵件伺服器則可在收信時檢查寄件伺服器是否被授權，以判斷郵件是否可信。</p><p>可以使用 <code>dig</code> 指令查看 SPF</p><pre class="line-numbers language-none"><code class="language-none">$ dig yunshiuan.com  TXT | grep spfyunshiuan.com.377INTXT&quot;v&#x3D;spf1 include:_spf.mx.cloudflare.net ~all&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>v&#x3D;spf1：指定 SPF 協定版本</li><li>include:_spf.mx.cloudflare.net：授權清單由 Cloudflare 維護</li><li>~all：非授權來源標記為 SoftFail（可疑）<br>（若設定 -all 則代表 Fail，非授權來源應被拒絕）</li></ul><h2 id="DKIM"><a href="#DKIM" class="headerlink" title="DKIM"></a>DKIM</h2><p>DKIM 是電子郵件驗證機制之一，讓收件方可以驗證一封郵件是否真正由該網域授權寄出，並確認郵件在傳送過程中是否被篡改；它透過數位簽章機制實現。寄件方使用私鑰對郵件內容進行簽名，收件方則從 DNS 查出對應的公鑰來驗證。</p><p>DKIM 的公鑰會被發布在 DNS TXT 紀錄中，格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;selector&gt;._domainkey.&lt;domain&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 Cloudflare 舉例，它的 selector 是 <code>cf2024-1</code>，查詢 DKIM 也可使用 <code>dig</code> 指令</p><pre class="line-numbers language-none"><code class="language-none">$ dig cf2024-1._domainkey.yunshiuan.com TXT | grep DKIMcf2024-1._domainkey.yunshiuan.com. 377 IN TXT&quot;v&#x3D;DKIM1; h&#x3D;sha256; k&#x3D;rsa; p&#x3D;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiweykoi+o48IOGuP7GR3X0MOExCUDY&#x2F;BCRHoWBnh3rChl7WhdyCxW3jgq1daEjPPqoi7sJvdg5hEQVsgVRQP4DcnQDVjGMbASQtrY4WmB1VebF+RPJB2ECPsEDTpeiI5ZyUAwJaVX7r6bznU67g7LvFq35yIo4sdlmtZGV+i0H4cpYH9+3JJ78k&quot; &quot;m4KXwaf9xUJCWF6nxeD+qG6Fyruw1Qlbds2r85U9dkNDVAS3gioCvELryh1TxKGiVTkg4wqHTyHfWsp7KD3WQHYJn0RyfJJu6YEmL77zonn7p2SRMvTMP3ZEXibnC9gz3nnhR6wcYL8Q7zXypKTMD58bTixDSJwIDAQAB&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>總結來說 DMARC 驗證流程會是：接收方收到郵件後，先檢查 SPF 和 DKIM 認證，再根據 DMARC 政策決定郵件的處理方式（放行、隔離或拒絕）。</p><p>DMARC 記錄可以在 <code>_dmarc.&lt;domain&gt;</code> 找到</p><pre class="line-numbers language-none"><code class="language-none">$ dig _dmarc.any.run TXT                                                                             ; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; _dmarc.any.run TXT;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 31385;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4095;; QUESTION SECTION:;_dmarc.any.run.INTXT;; ANSWER SECTION:_dmarc.any.run.377INTXT&quot;v&#x3D;DMARC1; p&#x3D;quarantine; sp&#x3D;quarantine;&quot;;; Query time: 226 msec;; SERVER: 100.100.100.100#53(100.100.100.100);; WHEN: Thu Oct 09 20:09:24 CST 2025;; MSG SIZE  rcvd: 94<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>v&#x3D;DMARC1 : DMARC 版本</li><li>p&#x3D;quarantine : 主要政策，對主域名認證失敗的郵件進行隔離</li><li>sp&#x3D;quarantine : 子域名政策，對子域名認證失敗的郵件也進行隔離</li></ul><hr><p>但是DMARC 也不一定是萬能的，還是有可能會被 Bypass ，對於大公司來說如果員工點了釣魚信件，並且執行了信件內附件或者網址，會對公司造成巨大的危害，因此社交工程演練是非常重要的</p><blockquote><p>社交工程演練是<strong>模擬真實攻擊情境，測試員工對釣魚郵件、電話詐騙等社交工程攻擊的識別和應對能力，並透過教育訓練提升整體資安意識的安全演練活動</strong>。</p></blockquote><p>關於釣魚信件的社交工程演練，有一個開源的平台可以使用 - <a href="https://github.com/gophish/gophish/releases">Gophish</a> </p><h1 id="Gophish"><a href="#Gophish" class="headerlink" title="Gophish"></a>Gophish</h1><p>下載連結：<a href="https://github.com/gophish/gophish/releases">https://github.com/gophish/gophish/releases</a></p><p>Gophish 是一個開源的釣魚模擬平台，用於進行社交工程演練，可以快速建立和發送釣魚郵件，追蹤點擊率和提交率，幫助組織測試員工的資安意識並提供教育訓練。</p><p><code>source : https://ui-code.com/archives/779</code></p><p>安裝很簡單，將 ZIP 下載之後執行裡面的執行檔就能架起</p><p><img src="/assets/9yIIcEGIjBtwp2TUs8hEn1hT_Il_Buo1FbIYSVM9nP0=.png"></p><p>如果要遠端也可以登入admin 介面，要去config.json 將admin 網址改成<code>0.0.0.0:3333</code></p><p>若要遠端也能登入 Admin 介面，請在 config.json 將 Admin 位址改成 <code>0.0.0.0:3333</code></p><p>架起來後會給你帳號密碼，網頁進入<code>0.0.0.0:3333</code>後登入就可以開始使用了</p><p><img src="/assets/gI4Up0C79FNgdPy_IY4j4hZSu3scYdFss05qVW5NJb8=.png"></p><p>裡面的功能非常豐富，包括</p><ul><li><strong>活動管理</strong>: 建立&#x2F;排程釣魚活動，指定目標群組、郵件模板、登入頁與寄件設定，並即時監控結果。</li><li><strong>目標群組</strong>: 管理收件人清單，支援手動新增與 CSV 匯入。</li><li><strong>郵件模板</strong>: 視覺化編輯與變數插入（如 &#123;&#123;.FirstName&#125;&#125;），可預覽與測試寄送。</li><li><strong>登入頁</strong>: 匯入&#x2F;客製 HTML，選擇是否擷取提交資料，支援點擊後&#x2F;提交後導向。</li><li><strong>寄件設定</strong>: 設定 SMTP（主機、帳密、TLS&#x2F;SSL、自訂寄件者&#x2F;標頭），支援測試連線。</li><li><strong>即時追蹤</strong>: 記錄寄送、開啟、點擊、提交資料（含 IP、User-Agent）；可選「回報」事件。</li><li><strong>儀表板與報表</strong>: 活動概況、成效趨勢，結果支援 CSV 匯出。</li><li><strong>REST API</strong>: 提供完整 API 以自動化建立活動、上傳模板&#x2F;名單、擷取結果。</li><li><strong>網域與證書</strong>: 自訂追蹤&#x2F;寄送網域與 TLS 憑證配置，提升可信度與達投遞率。</li></ul><p><img src="/assets/2xWCIDOeOd16WAYIllSS5iysk0uLCS1ibgVpO_vFsy4=.png"></p><p><code>source : https://ui-code.com/archives/779</code></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>對於藍隊來說，預防釣魚信件是資安防護的重要一環。今天介紹的 Email 驗證機制（DMARC、SPF、DKIM）以及 Gophish 釣魚信件社交工程演練平台，都是預防釣魚信件攻擊的關鍵技術與工具。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phishing </tag>
            
            <tag> SPF </tag>
            
            <tag> DKIM </tag>
            
            <tag> DMARC </tag>
            
            <tag> Gophish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我不只想要 VirusTotal，我全都要</title>
      <link href="/2025/10/08/malware_plateform/"/>
      <url>/2025/10/08/malware_plateform/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>當在 Disk 中或在 Memory 中抓到了一個惡意程式，可能會想要把它丟進 VirusTotal 網站去看是不是已知的惡意軟體，或者去分析它有 Drop 什麼檔案以及連接什麼 IP，但是有時候只看 VirusTotal 獲得到的資訊是不夠的，透過不同的分析網站比對可以獲得完整惡意程式資訊。</p><p>今天會分享包含 VirusTotal 在內的惡意軟體檢測與分析網站</p><hr><h1 id="VirusTotal"><a href="#VirusTotal" class="headerlink" title="VirusTotal"></a>VirusTotal</h1><p>連結：<a href="https://www.virustotal.com/gui/home/upload">https://www.virustotal.com/gui/home/upload</a></p><p>VirusTotal 是一個線上服務，讓使用者可以上傳檔案、URL、Domain、IP 或 Hash 進行分析，以檢測是否含有惡意軟體、惡意連結、釣魚等威脅，VirusTotal 內把多個防毒引擎、網頁掃描器、威脅情報來源彙整在一起，並且裡面會跑沙箱獲得惡意程式行為</p><p><img src="/assets/gMfDOnx2P7vfSTa0t39KTSF4X51TsNEZ1JieQp1GN9Y=.png"></p><p>使用方式是在上方的搜尋欄輸入 Hash、IP、Domain，或至上傳頁面上傳惡意程式</p><p><img src="/assets/wVcdSKbGTJgrc4GYZeCk1VWOvjD2NKPOKSYt9_s5xPg=.png"></p><p>這裡介紹一下 VirusTotal 分析完後提供的頁面資訊</p><h2 id="Detection"><a href="#Detection" class="headerlink" title="Detection"></a>Detection</h2><p>這個頁面提供了多家的 antivirus 引擎的偵測結果，會顯示出辨識的惡意程式家族與標籤</p><p><img src="/assets/z3PpmUJlTskTOc-_l2CYf5VAZNTDMKlxMQ3i28g1sos=.png"></p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>這個頁面會列出惡意程式的大小、型態、雜湊，以及編譯、修改時間</p><p><img src="/assets/tvFgDnMjsBkHGBDXWKh2CtBid7nsv75o1We8A6U8X1E=.png"></p><p>PE 結構（Sections、Imports&#x2F;Exports）、簽章資訊、字串等</p><p><img src="/assets/-yTNwLT3_1naezKvF3WWA6if8ccs7-ctpuBf63FxELQ=.png"></p><h2 id="Relations"><a href="#Relations" class="headerlink" title="Relations"></a>Relations</h2><p>這個頁面會列出惡意程式連線的 IP、Domain </p><p><img src="/assets/rGfLfkJ0NLPqqubsITDG8YcSD_oXKpVZ90nQ10vh7T0=.png"></p><p>以及執行惡意程式時產生的檔案</p><p><img src="/assets/hNljM3GQjeIAib7Jbc6JH5X6n9aESH8pVix3NyaGWp4=.png"></p><h2 id="Behavior"><a href="#Behavior" class="headerlink" title="Behavior"></a>Behavior</h2><p>這裡會列出惡意程式跑在多種沙箱中的行為</p><p><img src="/assets/FbaXPCeyc1-V85aF3NNLqvM8J-bA8NuaXak9nMfQ4d8=.png"></p><p>當中會有 Network 的分析</p><p><img src="/assets/OhyS62SmzrqyOeKDsNXGOIr1k3M7VSM5kGmzncOPy9M=.png"></p><p>當中也有檔案的操作，包含檔案開啟、修改、刪除、創建</p><p><img src="/assets/6-oZNV1IMKjgu5wbtjl5TjhnAu7kPSfdVJ4m-kjurNA=.png"></p><p>Process 的創建以及 Command 的記錄</p><p><img src="/assets/zJdkjUtwInk-OW6R7zFKZaWdJmPniYZuo9vIRsHfHsk=.png"></p><h2 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h2><p>這個頁面大多數會有人分享其他惡意程式檢測平台的 Report </p><p><img src="/assets/KXXwfCJI5ITKqJD8oFD6YiINevnuM8DAk7YjVPM9kG0=.png"></p><hr><h1 id="ANY-RUN"><a href="#ANY-RUN" class="headerlink" title="ANY.RUN"></a>ANY.RUN</h1><p>連結：<a href="https://any.run/">https://any.run/</a></p><p>ANY.RUN 是一個互動式線上惡意程式沙箱，允許使用者在受控的虛擬環境中動態執行可疑檔案或網址，觀察其行為、網路活動、檔案／登錄表操作等等</p><p><img src="/assets/-ipWo-VWZ1bBq9M0ip9AO1AW3ijwawfUVE_86kzXMPU=.png"></p><p>如果要使用它的沙箱功能，就像 VirusTotal 一樣可以直接丟惡意程式進去分析的話，會需要先註冊帳戶，如果不想註冊的話，可以直接前往 <a href="https://app.any.run/submissions">https://app.any.run/submissions</a> 並使用 Hash 查詢有沒有人之前丟過的惡意程式</p><p>假設我查詢 hash 為 <code>ced525930c76834184b4e194077c8c4e7342b3323544365b714943519a0f92af</code> 的惡意程式</p><p><img src="/assets/wf3oQc9EpL8An_hXnvPKekdTlcrO5clXLA2HHXto9Gs=.png"></p><p>然後點選其中一個，也可以進入到沙箱分析結果頁面</p><p><img src="/assets/rgOQ9BgqW3CpsBVaEnONX00EBqyz8ce9z1Eoq5GmGQE=.png"></p><p>這邊介紹一下 Report 介面，首先可以先看右邊的功能列，功能包含你可以下載這個惡意程式，以及在惡意程式啟動時執行了什麼行為</p><p><img src="/assets/Pb8iPUJignS3owgETQh_oKV0DrQJy8eDm7t2yfmFQx0=.png"></p><p>如果想要詳細分析其中一個檔案，點擊他就會出現詳細訊息</p><p><img src="/assets/uDYCE6z7kaaGJyXNgruAqM7W3SB-CmNOx9XFiV8wLcY=.png"></p><p>點選 More Info 之後就會進入到這個程式的完整分析內容</p><p><img src="/assets/TuHLpPHsOnJkkZGA_e4CjCrF45L98ZXRK9mWvHOIq9s=.png"></p><p>這個頁面有一個很方便的功能，它會列出惡意程式行為的嚴重程度，假設我想要了解 <code>T1053.005 Scheduled Task (1)</code> 這個行為，並且想要知道它下的 Cmdline，可以點擊下方的 <code>Uses Task Scheduler to run other applications</code> 就會跳出視窗並顯示詳細內容</p><p><img src="/assets/ZL3yijW5pBAeEDHXbe6EVXN0sc9pld1JxCrkcPeBQDo=.png"></p><p>回到分析主頁，下方是顯示 Network 相關分析結果，也有看檔案操作的頁面</p><p><img src="/assets/yyT6D73zz3KtGYHdOElmGIztskP0I4j4MQNd2N0-Rj8=.png"></p><hr><h1 id="MalwareBazaar"><a href="#MalwareBazaar" class="headerlink" title="MalwareBazaar"></a>MalwareBazaar</h1><p>連結：<a href="https://bazaar.abuse.ch/browse/">https://bazaar.abuse.ch/browse/</a></p><p>MalwareBazaar 是由 abuse.ch 所運營的惡意軟體樣本分享平台，旨在讓資安研究人員、antivirus 廠商、威脅情報團隊能夠更容易地交換與取得惡意軟體樣本，如果有想要查詢的惡意程式可以來這個網站查</p><p><img src="/assets/WjzEU8V90NjOlZCZa8f61be1PPxTNpUIJ-_39gDptlo=.png"></p><p>它有一個查詢的語法，需要照著它的語法不然會找不到</p><pre class="line-numbers language-none"><code class="language-none">Search syntax is as follow: keyword:search_termFollowing is a list of accepted keywords along with an example search_termmd5:1b109efade90ace7d953507adb1f1563 ( run)sha256:11b16ba733f2f4f10ac58021eecaf5668551a73e2a1acfae99745c50bfccbb44 ( run)signature:CobaltStrike ( run)tag:TA505 ( run)file_type:rtf ( run)user:malware_traffic ( run)clamav:SecuriteInfo.com.Artemis1FBB04F6EAF7.17086.UNOFFICIAL ( run)yara:win_asyncrat_j1 ( run)serial_number:51CD5393514F7ACE2B407C3DBFB09D8D ( run)issuer_cn:Sectigo RSA Code Signing CA ( run)imphash:756fdea446bc618b4804509775306c0d ( run)tlsh:8DD484F440EF10A2F25F852936ADBE9401B2B1C7DBDA5E08137DE5311BBDA633A0564D ( run)telfhash:52d0a7c198b4972c99e60578ed5c5bb29106216620070b20cf10a5d4d83b440f40db59 ( run)gimphash:b43f35a8610180bcb184238555a0858a6c160a2d872566e7e9633221308b34fd ( run)dhash_icon:f8dcbeffbffecee8 ( run)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假設我現在要查sha256 是<code>ced525930c76834184b4e194077c8c4e7342b3323544365b714943519a0f92af</code> 的惡意程式</p><p><img src="/assets/h5BRvZtDGV6UzkjnyWHJoiFVyPj1qiOAVfCeJ7KTCa8=.png"></p><p>這樣就成功找到了，首先會列出基本的訊息</p><p><img src="/assets/dhEkCdxVv7tqQkAy65vx9ZPsWCww_ZVAfR4ES2eojPM=.png"></p><p>這個網站不錯的地方是它會去整理各大惡意程式檢測平台的 Report，並列出來 Report 網址或者檢測結果</p><p><img src="/assets/MPS_tDeEXUcke389E3C6h51m7s3_fHIANLYQh00okQ=.png"></p><hr><h1 id="Malpedia"><a href="#Malpedia" class="headerlink" title="Malpedia"></a>Malpedia</h1><p>連結：<a href="https://malpedia.caad.fkie.fraunhofer.de/">https://malpedia.caad.fkie.fraunhofer.de/</a></p><p>Malpedia 是由 Fraunhofer FKIE所維運的一個「惡意軟體百科 + 參考樣本集」平台，惡意軟體家族百科與研究資源，提供家族描述、別名、已知樣本參考、YARA 規則、相關研究連結。</p><p><img src="/assets/2dvHSIedbNMendmEHvAO8F2RepgjV8q_V2Of8pGfZi0=.png"></p><p>假設我們剛剛的 XWorm 惡意程式，可以直接在搜尋欄打上 XWorm</p><p><img src="/assets/QbiEpyzJnEPDzDRdwNEz7JdUil3UzOlx_OD_1ug3E_8=.png"></p><p>這些皆是針對於 XWorm 的研究，可以點進去參考</p><p>另外也可以尋找這是哪個組織發出來的</p><p>可以在 Family 頁面中搜尋 XWorm</p><p><img src="/assets/NSHxGJOQdrVMnCIB7qpIba_49beBljRTv3kp9hmIss=.png"></p><p>點進去後可以看到這隻惡意程式相關的訊息，包含 Actor</p><p><img src="/assets/w6h7nMg7-aII3T313yGWoVOqf72mqCKIPX7RPRfIQZU=.png"></p><p>那這邊就可以看到 Actor 是 <code>Hive0137</code> </p><p>點擊後可以看到該 Actor 的相關資訊</p><p><img src="/assets/QzHW9EOxvKz5xMAcFYHqeUAO6nFinJiYTmo4Tdfx9cc=.png"></p><hr><h1 id="Triage"><a href="#Triage" class="headerlink" title="Triage"></a>Triage</h1><p>連結： <a href="https://tria.ge/reports/public">https://tria.ge/reports/public</a></p><p>Triage 是由 Hatching 提供的線上惡意程式沙箱台，用來自動執行、分析可疑檔案並生成行為報告，協助安全分析師快速篩選與分類威脅樣本。</p><p><img src="/assets/tur58FvV11eeExk1BKcPqd2fqstHnhwZd39997p7hCI=.png"></p><p>它可以像 VirusTotal 一樣上傳惡意程式並分析或者搜尋之前已經上傳過的惡意程式</p><p>搜尋的方式就是點選右上角的 Search 後也是可以用 Hash 搜尋</p><p><img src="/assets/fgbYNIkhdgIgR5syn8hEHZAzsxh33-q_IKZMooswMmI=.png"></p><p>點進去後就會出現分析報告</p><p><img src="/assets/LSq6C5CnL3srr-davFhRkk2fxAeZAvhPQnt6kGkVyAk=.png"></p><p>而如果是要上傳惡意程式，需要先進行登入，登入後上面列的 Submit 是上傳惡意程式的頁面</p><p><img src="/assets/XLiYnj_Z4f0BPL-Azp2DnSM75KXVZGJUKYSCCspUbus=.png"></p><p>上傳完後也會出現 Report 的頁面</p><p>Report 頁面有包含</p><ul><li>環境與 metadata</li><li>樣本基本資訊（雜湊、大小、評分、標籤）</li><li>提取出的惡意設定（C2、安裝位置、檔案名）</li><li>偵測簽章 &#x2F; 行為標記</li><li>進程行為</li><li>網路行為</li><li>MITRE ATT&amp;CK 對應技術</li><li>可下載的記憶體 &#x2F; 生成檔案</li></ul><hr><h1 id="為什麼需要多方參考？"><a href="#為什麼需要多方參考？" class="headerlink" title="為什麼需要多方參考？"></a>為什麼需要多方參考？</h1><p>這邊舉一個例子<a href="https://cyberdefenders.org/blueteam-ctf-challenges/icedid/"> CyberDefender IcedID</a></p><blockquote><p>Q5 : Could you specify the threat actor linked to the sample provided?</p></blockquote><p>在 <a href="https://www.virustotal.com/gui/file/d86405130184186154daa4a5132dd1364ab05d1f14034c7f0a0cda690a91116d/behavior">VirusTotal</a> 中沒有關於 threat actor 的線索，但它有偵測到惡意軟體的 Family 是 <strong>IcedID</strong></p><p>因此可以去我們剛剛介紹到的 <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.icedid">Malpedia</a> 尋找相關線索</p><p><img src="/assets/Aug_2ivQYiQDV_m94jHTrm8tplsH8oivmSwJKqQwSmQ=.png"></p><blockquote><p>Q6 : In the Execution phase, what function does the malware employ to fetch extra payloads onto the system?</p></blockquote><p>如果去 <a href="https://www.virustotal.com/gui/file/d86405130184186154daa4a5132dd1364ab05d1f14034c7f0a0cda690a91116d/behavior">VirusTotal</a> 看的話會找不太到答案是什麼，但是去 <a href="https://tria.ge/250903-lnktqaap7v">Triage</a> 一下就看到了答案是 <code>URLDownloadToFileA</code> </p><p><img src="/assets/wdadI6YwpcvvD1IPJqAb3H7bHP8hAUzgawiw3tp1HPo=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了幾個常用的惡意軟體檢測與分析平台，透過多平台分析找出惡意程式的行為與資訊，並且省去自行逆向的時間。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 惡意軟體 </tag>
            
            <tag> 威脅情報 </tag>
            
            <tag> 動態分析 </tag>
            
            <tag> 沙箱 </tag>
            
            <tag> VirusTotal </tag>
            
            <tag> ANY.RUN </tag>
            
            <tag> MalwareBazaar </tag>
            
            <tag> Malpedia </tag>
            
            <tag> Triage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只知道執行過什麼是滿足不了我的，我整顆 NTFS 硬碟都要檢查</title>
      <link href="/2025/10/07/NTFS/"/>
      <url>/2025/10/07/NTFS/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>前幾天介紹了 Prefetch，它能幫我們找出哪些可執行檔曾在系統上啟動過、啟動次數與所用路徑等線索。但 Prefetch 的適用範圍有限，對於尚未被執行或已改名&#x2F;偽裝的惡意程式，Prefetch 記錄可能不存在或不可靠。</p><p>因此今天會分享什麼是 NTFS ，並利用 NTFS 的特性追蹤檔案與資料夾的建立、移動、改名與刪除等活動。</p><hr><h1 id="NTFS-是什麼？"><a href="#NTFS-是什麼？" class="headerlink" title="NTFS 是什麼？"></a>NTFS 是什麼？</h1><p>NTFS 是 Microsoft 為 Windows NT 系列作業系統開發的檔案日誌型檔案系統，會維護交易記錄來確保資料一致性，如果有格式化過硬碟的經驗，應該對 NTFS 有點印象</p><p><img src="/assets/Xu4Z2bpyPFqpt7fuTTJbL51n_b8WIrg3_RZsCiEkkvI=.png"></p><p>NTFS 會在每個 Volume 上以系統檔案記錄檔案與目錄的活動，包含建立、修改、刪除等。這個機制能讓 NTFS 在發生停電或系統崩潰時進行復原並保持系統一致性。</p><p>因此 NTFS 的 Volume 中會建立許多隱藏的系統檔案，這些檔名都以<code>$</code> 開頭，以下介紹幾個主要的檔案</p><p><img src="/assets/NcuJtL00WGNGFrbG6t_I0HD1PrG4QcBJ3l3nQyjoH20=.png"></p><hr><h2 id="MFT"><a href="#MFT" class="headerlink" title="$MFT"></a>$MFT</h2><p>路徑：<code>&lt;Volume_Root&gt;\$MFT</code></p><p>$MFT 是 NTFS 檔案系統的核心元件，儲存所有檔案和目錄的metadata（如名稱、大小、時間戳、權限等）。<br>由一系列固定大小的檔案記錄組成，每個記錄包含一個檔案或目錄的所有屬性。</p><p>下方圖片是使用 <a href="https://ericzimmerman.github.io/#!index.md">MFT Explorer</a> 把 MFT 內的資料視覺化顯示出來</p><p><img src="/assets/LKoPSOtJbxLBBf-25Wy6a6Pdf2PagV_pacqey3WPJBw=.png"></p><h2 id="UsnJrnl"><a href="#UsnJrnl" class="headerlink" title="$UsnJrnl"></a>$UsnJrnl</h2><p>路徑：<code>&lt;Volume_Root&gt;\$Extend\$UsnJrnl:$J</code></p><p>$UsnJrnl 的主要功能是追蹤 NTFS 上所有文件與目錄的變更。每當文件被創建、修改、刪除、重命名、移動，或其屬性／安全描述符發生變化時，$UsnJrnl 都會記錄一條對應條目。這些條目包括變更類型、發生時間、關聯的 USN（更新序列號）、文件 ID、父目錄 ID、文件名稱、屬性與大小等資訊。</p><p><img src="/assets/cQfi8Udc0DTBsNYPvThawCXqM082PrXrodQAtZ_VH8Q=.png"></p><h2 id="LogFile"><a href="#LogFile" class="headerlink" title="$LogFile"></a>$LogFile</h2><p>路徑：<code>&lt;Volume_Root&gt;\$LogFile</code></p><p>$LogFile 與 $UsnJrnl 紀錄的內容差不多，但是紀錄的是更底層的操作，其功能是作為 NTFS 的 transaction log，記錄對 metadata 所做的各種操作（如 MFT 新增／修改／刪除、目錄索引更新、Bitmap Allocation、$UsnJrnl 本身的更新等）。在進行 metadata 變更前，系統會先將這些交易寫入 $LogFile，以確保即便系統意外中斷，也可利用日誌進行回滾或重做操作，以保持文件系統的一致性與完整性。</p><p><img src="/assets/0rdT1ORbwNlebwEt7OXnRopij-tFJVEr5PXan4DQRoA=.png"></p><h2 id="I30"><a href="#I30" class="headerlink" title="$I30"></a>$I30</h2><p>在 NTFS 檔案系統中，每一個 Directory 都維護一個 Index，用來快速查找該目錄下的檔案與子目錄，當目錄內容改變 (如新增、刪除、重命名) 時，對應的 index entry 也會被修改或標記為已刪除 (Flags 欄位)，因為是標記的關係，所以可以在<code>$I30</code> 中找到被刪除的檔案。</p><p><img src="/assets/CGFDolSOV19jk_scmOtNOnpFMABkF3YeLx_g2mG76Lw=.png"></p><p>整體來說這些檔案記錄了<strong>從檔案／目錄的建立、修改、刪除、重命名、移動、屬性變更，底層交易操作（如 MFT 重組、索引更新）等所有可供恢復、驗證與時間線重建的線索</strong>。</p><p>因此這些檔案都是在進行 Disk Forensic 時很重要的檔案，</p><p>接下來可以開始使用工具進行分析，首先有一個很方便的工具-NTFS Log Tracker</p><hr><h1 id="NTFS-Log-Tracker"><a href="#NTFS-Log-Tracker" class="headerlink" title="NTFS Log Tracker"></a>NTFS Log Tracker</h1><p>下載連結： <a href="https://sites.google.com/site/forensicnote/ntfs-log-tracker">https://sites.google.com/site/forensicnote/ntfs-log-tracker</a></p><p>NTFS Log Tracker 是一款專門用來解析 NTFS 上 $LogFile 和 UsnJrnl:$J 的工具。 它可以從交易日誌與變更日誌中挑出檔案／目錄操作的記錄。</p><p><img src="/assets/icAM7IWI3LvNSrDBmhOmy5cGEzp09GpK-dinwOSbtyU=.png"></p><p>填上對應檔案的路徑</p><p><img src="/assets/hFcjva1sejXuwvwZjLaD60MFdZe6FS2HDJgTsNGphjE=.png"></p><p>按下右上角的 Parse 之後會先把資料都儲存成一個 DB，這邊幫它取名以及輸出的路徑</p><p><img src="/assets/EOWJWa9jI9Oo_YlfKFZjHfHSsssQj7qrHWYUPRjkGao=.png"></p><p>選擇好後就會開始進行分析</p><p><img src="/assets/DG2D3gmzJq6Xs7ar_F0kw4LThRBfLuUG7aIE9lyk8oE=.png"></p><p>結束後就會出現 $LogFile 以及 UsnJrnl:$J 的內容</p><p><img src="/assets/0m_erXlMLOZR4CnCdmW7tevpuuIOkLZCdUxp95dTunY=.png"></p><p>另外也可以把它們匯出成 CSV 檔案</p><p><img src="/assets/-QjIqTFArdJExEa85qymNdtSPPa_HZOrYVz2fmOQOWc=.png"></p><p>同樣可以使用 <a href="https://ericzimmerman.github.io/#!index.md">Timeline Explorer</a> 或者其他查看 CSV 檔案的軟體查看</p><p><img src="/assets/g1tx-sJ6dvFR19b2NJ-SlCuIZDWt8F5_Ajg0pKzuXH4=.png"></p><hr><p>而 <code>$I30</code> 檔案可以使用 MFTECmd 分析</p><h2 id="MFTECmd"><a href="#MFTECmd" class="headerlink" title="MFTECmd"></a>MFTECmd</h2><p>下載連結：<a href="https://ericzimmerman.github.io/#!index.md">https://ericzimmerman.github.io/#!index.md</a></p><p>MFTECmd 是由數位鑑識專家 Eric Zimmerman 開發的 Windows command-line 工具，</p><p>用來解析 NTFS 檔案系統中由 $MFT 與其衍生紀錄，例如：</p><ul><li>$MFT</li><li>$LogFile</li><li>$UsnJrnl</li><li>$Boot</li><li>$Secure</li><li>$Extend\$UsnJrnl</li><li>$I30</li></ul><p>並將其轉成 CSV 檔案</p><p>首先找到要鑑識的目錄，並提取其 <code>$I30</code> 內容</p><p><img src="/assets/pWkdQsp10SNyj8hJ5rJ2V_jEM1SYnI-z8-Hak-LF6N0=.png"></p><p>接下來下指令將它轉換成 CSV 檔案</p><p><img src="/assets/FPsRisIYrXMyG_LyDIXtF63__b0J8jlG8LpqAm0sPQ0=.png"></p><p>轉換後可以使用 <a href="https://ericzimmerman.github.io/#!index.md">Timeline Explorer</a> 或者其他查看 CSV 檔案的軟體查看</p><p><img src="/assets/XM56jj6p4EatiIDTljlbRIsJ-SHMJj8bBHFqZ69r9RI=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了 NTFS 檔案系統的核心元件，包括 <code>$MFT</code>、<code>$UsnJrnl</code>、<code>$LogFile</code> 和 <code>$I30</code> 等系統檔案，這些檔案記錄了檔案系統的各種操作活動。</p><p>透過 NTFS Log Tracker 和 MFTECmd 工具，我們可以分析這些系統檔案，重建檔案操作的時間線，獲得更多線索</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTFS </tag>
            
            <tag> 檔案系統鑑識 </tag>
            
            <tag> Disk Forensic </tag>
            
            <tag> MFT </tag>
            
            <tag> UsnJrnl </tag>
            
            <tag> LogFile </tag>
            
            <tag> I30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>現在請讓我看看你的瀏覽器紀錄</title>
      <link href="/2025/10/06/Browser_forensic/"/>
      <url>/2025/10/06/Browser_forensic/</url>
      
        <content type="html"><![CDATA[<h1 id="Day22-現在請讓我看看你的瀏覽器紀錄"><a href="#Day22-現在請讓我看看你的瀏覽器紀錄" class="headerlink" title="Day22 現在請讓我看看你的瀏覽器紀錄"></a>Day22 現在請讓我看看你的瀏覽器紀錄</h1><h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會分享在 Disk Forensic 下，如何分析瀏覽器中的各種記錄，包括下載記錄、瀏覽歷史、Cookie、密碼、書籤等，以及如何讀取和分析這些資料。</p><hr><h2 id="瀏覽器-Web-Browser"><a href="#瀏覽器-Web-Browser" class="headerlink" title="瀏覽器 Web Browser"></a>瀏覽器 Web Browser</h2><p>Web Browser 是應用程式，用於存取和顯示網頁內容。瀏覽器不僅能顯示網頁，還能儲存使用者偏好設定、記錄瀏覽歷史、管理書籤和密碼、快取網頁內容、儲存 Cookie 和會話資料、記錄下載檔案資訊。</p><p><img src="/assets/PME2ctLgsmW5gOdGRY1b9s3H5NB99taFKugq3i_bB0o=.png"></p><p><code>source: https://3c.ltn.com.tw/news/39285</code></p><p>以下是目前的瀏覽器系列</p><ul><li>Chromium 系列<ul><li>Google Chrome </li><li>Microsoft Edge</li><li>Opera</li><li>Brave</li></ul></li><li>Firefox 系列<ul><li>Mozilla Firefox</li><li>Waterfox</li></ul></li><li>其他瀏覽器<ul><li>Safari </li><li>Internet Explorer</li></ul></li></ul><p>通常資料會存在 <code>C:\Users\&lt;username&gt;\AppData</code></p><hr><h1 id="AppData-目錄結構"><a href="#AppData-目錄結構" class="headerlink" title="AppData 目錄結構"></a>AppData 目錄結構</h1><p>Windows 系統中，應用程式的使用者資料通常儲存在 <code>AppData</code> 目錄下：</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\&lt;username&gt;\AppData\├── Local\├── Roaming\        └── LocalLow\       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Local : 儲存大容量，臨時或易刪除的資料</li><li>Roaming : 跨裝置同步資料，會跟著使用者帳戶移動到其他電腦</li><li>LocalLow：與 Local 類似，但是應用程式被授予的權限較低</li></ul><p>以下介紹一些常用的瀏覽器的資料儲存位置以及可以分析的檔案</p><hr><h1 id="🌐-瀏覽器資料鑑識"><a href="#🌐-瀏覽器資料鑑識" class="headerlink" title="🌐  瀏覽器資料鑑識"></a>🌐  瀏覽器資料鑑識</h1><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h2><p><strong>位置：</strong> <code>C:\Users\&lt;user&gt;\AppData\Local\Google\Chrome\User Data\Default</code></p><pre class="line-numbers language-none"><code class="language-none">C:\Users\&lt;user&gt;\AppData\Local\Google\Chrome\User Data\Default\├── History               # 瀏覽歷史和下載記錄├── Network\Cookies       # Cookie 資料├── Login Data            # 儲存的密碼├── Web Data              # 自動填入資料├── Bookmarks             # 書籤├── Preferences           # 使用者偏好設定├── Cache\                # 快取資料├── Local Storage\        # 本地儲存├── Session Storage\      # 會話儲存└── IndexedDB\            # 索引資料庫<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets/t3wC0oXhNjW5IAY58wESdbEguCnaBPvkbUMzF7wKS0w=.png"></p><h2 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a>Microsoft Edge</h2><p><strong>位置：</strong> <code>C:\Users\&lt;user&gt;\AppData\Local\Microsoft\Edge\User Data\Default</code></p><pre class="line-numbers language-none"><code class="language-none">C:\Users\&lt;user&gt;\AppData\Local\Microsoft\Edge\User Data\Default\├── History               # 瀏覽歷史和下載記錄├── Cookies               # Cookie 資料├── Login Data            # 儲存的密碼├── Web Data              # 自動填入資料├── Preferences           # 使用者偏好設定├── Cache\                # 快取資料├── Local Storage\        # 本地儲存├── Session Storage\      # 會話儲存└── IndexedDB\            # 索引資料庫<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets/c8YUdhLtLG-xs03GspLLfxg5lXWwJaANvvFQ00ftp9E=.png"></p><h2 id="Mozilla-Firefox"><a href="#Mozilla-Firefox" class="headerlink" title="Mozilla Firefox"></a>Mozilla Firefox</h2><p><strong>位置：</strong> <code>C:\Users\&lt;user&gt;\AppData\Roaming\Mozilla\Firefox\Profiles\&lt;profile&gt;</code></p><p><code>&lt;profile&gt;</code> 常常會以xxxx.default-release 表示</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\&lt;user&gt;\AppData\Roaming\Mozilla\Firefox\Profiles\&lt;profile&gt;\├── places.sqlite        # 瀏覽歷史、書籤、下載記錄├── cookies.sqlite       # Cookie 資料├── logins.json          # 儲存的密碼├── formhistory.sqlite   # 表單歷史├── permissions.sqlite   # 網站權限├── prefs.js            # 使用者偏好設定├── user.js             # 使用者自訂設定└── storage\            # 本地儲存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/assets/MH-kVAb81up_baCG59UVWSc7VpFwFHxrAKgKZVGoG5c=.png"></p><p>有些檔案會是 SQLite 儲存的，這邊推薦一個 GUI 應用程式可以查看 SQLite 資料庫內的內容：<strong>DB Browser for SQLite</strong></p><hr><h1 id="DB-Browser-for-SQLite"><a href="#DB-Browser-for-SQLite" class="headerlink" title="DB Browser for SQLite"></a>DB Browser for SQLite</h1><p>下載連結：<a href="https://sqlitebrowser.org/">https://sqlitebrowser.org/</a></p><p>DB Browser for SQLite 是一款開源的、跨平台的視覺化 SQLite 資料庫管理工具。它讓使用者不用深入指令列就能開啟、瀏覽、查詢、修改 SQLite 資料庫檔案。它支援標準的 SQLite 檔案（.sqlite, .db, .sqlite3 等），也支援匯入／匯出 CSV、SQL dump 等格式</p><p>假設我要查看使用者在 Google Chrome 的瀏覽與下載紀錄</p><p>首先先把 <code>C:\Users\&lt;user&gt;\AppData\Local\Google\Chrome\User Data\Default\History</code> dump 下來</p><p><img src="/assets/9FgyVU4gE0qZHD_cPbKAPnJZwqx-YWgxBiESlAA1ZAI=.png"></p><p>然後開啟 DB Browser for SQLite，將剛剛 dump 下來的 history 資料丟進 DB Browser for SQLite 內</p><p><img src="/assets/jev_UQgFrTH7os7vKMbXlqQFHHDiJf7N7AUvGTDCoto=.png"></p><p>下面可以看到資料庫內的 Table，如果想要看裡面的資料就點選瀏覽資料的頁面</p><p><img src="/assets/E_xTSK3RQjQUtRC4oW8-bFfy_f8KdXiWu4GJ3viGkWs=.png"></p><p>如果是要看瀏覽記錄就選擇 <code>urls</code>，如果要看下載紀錄的話就看 <code>downloads</code> Table</p><p><img src="/assets/Wy19Ca-3LR-VWh2fqEcZKglEGOWIsqVcTY9cYyQt-8I=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了在 Disk Forensic 時如何獲取瀏覽器相關的資訊，但其實還有很多瀏覽器留下的檔案可以去分析，常常會遇到題目詢問相關內容時不知道要怎麼去尋找，會需要上網查很多資料，還會遇到各式各樣的問題，但是可以獲得到的資訊是挺龐大的。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瀏覽器鑑識 </tag>
            
            <tag> Browser Forensic </tag>
            
            <tag> Chrome </tag>
            
            <tag> Firefox </tag>
            
            <tag> Edge </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我偷看了你的 Prefetch，它告訴我你開過什麼</title>
      <link href="/2025/10/05/Prefetch/"/>
      <url>/2025/10/05/Prefetch/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會分享在 Windows 底下的 Prefetch 資料夾內的檔案有什麼功能，以及如何使用 PECmd 分析，可以帶給鑑識人員什麼資訊</p><hr><h1 id="Prefetch-是什麼？"><a href="#Prefetch-是什麼？" class="headerlink" title="Prefetch 是什麼？"></a>Prefetch 是什麼？</h1><p>位置：<code>%WinDir%\prefetch</code></p><p>Prefetch（.pf）是 Windows 為了加速程式啟動而維護的快取檔案。系統會在 <code>%WinDir%\prefetch</code> 路徑下為執行過的可執行檔建立 .pf 檔，裡面包含：</p><ol><li><strong>執行時間戳</strong>：Windows 8 以後的 Prefetch 能記錄多達 8 個執行時間點，可用來建立事件時間線，另外 Prefetch 的時間戳在精確到秒時通常要減掉 10 秒，在做精細時間對帳時要留意此差異，<a href="https://www.thedfirspot.com/post/artifacts-of-execution-i-know-what-you-did-last-incident?utm_source=chatqpt.com">參考網址</a>。 </li><li><strong>Run count</strong>：表示該程式被執行了多少次。 </li><li><strong>可執行檔名稱與路徑</strong>：指出實際被執行的檔案與來源路徑，對判斷惡意軟體的落點很重要。 </li><li><strong>程式啟動時存取過的檔案清單</strong>：有時會列出其他被呼叫或載入的 DLL、路徑，可用來找出程式的行為鏈，例如開啟哪些檔。 </li><li><strong>volume &#x2F; system info、執行檔雜湊等元資料</strong>：可用來確認是在哪個 volume &#x2F; 機器上被執行</li></ol><p>檔名通常會長得像 PROGRAM.EXE-XXXXXXXX.pf，後面的 8 字元為路徑雜湊，用來區分相同名稱但路徑不同的執行檔。</p><p><img src="/assets/Kq6MvDG5ev05EwQcxGDnrfk7YXkBzYtWCCX0F1_nnas=.png"></p><p>為了讀取裡面的資料，可以使用 Eric Zimmerman’s tools 當中的 PECmd 轉換成 CSV 檔</p><hr><h2 id="PECmd"><a href="#PECmd" class="headerlink" title="PECmd"></a>PECmd</h2><p>下載連結：<a href="https://ericzimmerman.github.io/#!index.md">https://ericzimmerman.github.io/#!index.md</a></p><p>PECmd 是由 Eric Zimmerman 開發的一個命令行工具，它的目的是解析 Windows 的 Prefetch 檔案（.pf），抽取其中的 metadata（如執行時間戳、執行次數、被參照的檔案清單等），以便用於鑑識分析</p><p>有一個很方便的功能是可以使用以下指令批量處理 Prefetch 裡面的所有檔案，並把它們合成一個 CSV 檔</p><pre class="line-numbers language-none"><code class="language-none">.\PECmd.exe -d C:\Users\yunshiuan\Desktop\The_Enduring_Echo\C\Windows\prefetch --csv &quot;C:\Users\yunshiuan\Desktop\output&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/YZQ4eHTHNW2nzsMq1S9CPq9H7CPp6_8kzmD9OzCkXTM=.png"></p><p>如果想要單獨轉換某個 .pf 檔的話可以使用 <code>-f</code> </p><p>接下來就會在 output 中出現轉換好的 CSV 檔</p><p><img src="/assets/vN3s7s5Ir8f6bWh_K-OBrUFXzhTtEFEzoj7px-EMmh8=.png"></p><p>可以使用 <a href="https://ericzimmerman.github.io/#!index.md">Timeline Explorer</a> 或者其他查看 CSV 檔的軟體查看</p><p><img src="/assets/IZtn-xPIIX5IwNcA-FIRxiwXk3Aqu-eJfzpZnmt-W-Q=.png"></p><p>假設我想要知道 cmd.exe 執行了幾次，直接按照剛剛的步驟並搜尋 cmd.exe，發現它執行了 26 次</p><p><img src="/assets/EWcRoavCJbqZQ7VouNsE-FHXlJrmgvL1A8hxDCCG750=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了 Prefetch 的功用以及可以利用 Prefetch 去得知什麼線索，透過這些 .pf 檔案，我們可以看到哪個程式被執行過、從哪裡執行、跑了幾次，並利用了 PECmd 將這些 Prefetch 檔案轉成可以看懂的 CSV 樣式，明天繼續介紹其他可以分析的地方</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鑑識分析 </tag>
            
            <tag> Prefetch </tag>
            
            <tag> PECmd </tag>
            
            <tag> Windows </tag>
            
            <tag> 檔案系統 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Config 不養它們，Amcache 跟 NTUSER.DAT 自己開小灶</title>
      <link href="/2025/10/04/Amcache_NTUSER/"/>
      <url>/2025/10/04/Amcache_NTUSER/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會分享沒有放在 <code>%WinDir%\System32\Config</code>，但是很值得去查看的其他兩個 hive，分別是 Amcache.hve、NTUSER.DAT。</p><hr><h1 id="Amcache-hve"><a href="#Amcache-hve" class="headerlink" title="Amcache.hve"></a>Amcache.hve</h1><p>路徑位置：<code>%WinDir%\AppCompat\Programs\Amcache.hve</code></p><p><img src="/assets/Ybc_QgFK9UsOKi7pW8blJhLBDXDmoh5zkDgOjPsqhkw=.png"></p><p>自 Windows 8 起引入，記錄了已執行應用程式的詳細資訊，包括檔案路徑、SHA-1 雜湊值、時間戳記等。</p><p><strong>若惡意程式本體被刪除或遭清除，無法從映像直接看到該檔案本身時</strong>，可以透過 Amcache 的記錄去驗證該程式曾經被執行過</p><p>可以先使用 <a href="https://ericzimmerman.github.io/#!index.md">RegistryExplorer </a> 合併 Transport logs 後直接查看或者使用 Eric Zimmerman’s tools 中的 AmcacheParser 轉成 CSV 檔</p><p><img src="/assets/OZlv8y4NKybwgKVheToBnYUFk2xmh7wPekUkky8pRuQ=.png"></p><h2 id="AmcacheParser"><a href="#AmcacheParser" class="headerlink" title="AmcacheParser"></a>AmcacheParser</h2><p>AmcacheParser 是由數位鑑識專家 Eric Zimmerman 所開發的一款命令列工具，專門用於解析 Windows 系統中的 Amcache.hve 註冊檔，支援將解析結果輸出為 CSV 格式，方便後續分析與處理</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\yunshiuan\Desktop\net9 > <span class="token punctuation">.</span>\AmcacheParser<span class="token punctuation">.</span>exe <span class="token operator">-</span>f C:\Users\yunshiuan\Desktop\Amcache<span class="token punctuation">.</span>hve_clean <span class="token operator">--</span>csv C:\Users\yunshiuan\DesktopAmcacheParser version 1<span class="token punctuation">.</span>5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0Author: Eric Zimmerman <span class="token punctuation">(</span>saericzimmerman@gmail<span class="token punctuation">.</span>com<span class="token punctuation">)</span>https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/EricZimmerman/AmcacheParserCommand line: <span class="token operator">-</span>f C:\Users\yunshiuan\Desktop\Amcache<span class="token punctuation">.</span>hve_clean <span class="token operator">--</span>csv C:\Users\yunshiuan\DesktopWarning: Administrator privileges not found!Unknown value name when processing DevicePnp at path <span class="token punctuation">&#123;</span>11517B7C-E79D-4e20-961B-75A811715ADD<span class="token punctuation">&#125;</span>\Root\InventoryDevicePnp\display/default_monitor/1&amp;1f0c3c2f&amp;0&amp;uid256: ManifestPathC:\Users\yunshiuan\Desktop\Amcache<span class="token punctuation">.</span>hve_clean is in new format!Total file entries found: 240Total shortcuts found: 51Total device containers found: 13Total device PnPs found: 94Total drive binaries found: 373Total driver packages found: 4Found 123 unassociated file entryResults saved to: C:\Users\yunshiuan\DesktopTotal parsing time: 0<span class="token punctuation">.</span>909 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的輸出會有很多 CSV 檔，可能會出現下面檔案</p><table><thead><tr><th><strong>Amcache_ProgramEntries.csv</strong></th><th>程式條目（Programs Entry）</th><th>描述註冊在 Amcache “Programs” 分支下的應用程式資訊，如安裝資訊或註冊的程式條目。</th></tr></thead><tbody><tr><td><strong>Amcache_AssociatedFileEntries.csv</strong></td><td>關聯的檔案條目</td><td>指那些能夠被對應（或關聯）到程式條目的檔案條目（File entries）。即那些被安裝程式所擁有或管理的檔案。</td></tr><tr><td><strong>Amcache_UnassociatedFileEntries.csv</strong></td><td>無關聯的檔案條目</td><td>指那些沒有被關聯到任何程式條目的檔案條目，也就是那些孤立的可執行檔 &#x2F; 檔案。這是很多調查中重點查看的部分，因為可能是惡意工具或獨立執行檔。</td></tr><tr><td><strong>Amcache_Shortcuts.csv</strong></td><td>快捷方式 &#x2F; 連結資訊</td><td>描述系統或應用程式捷徑（.lnk 或類似連結）相關的資訊，例如快捷目標、路徑等。</td></tr><tr><td><strong>Amcache_DeviceContainers.csv</strong></td><td>裝置容器 (Device Container)</td><td>與裝置（例如 USB 裝置、硬體裝置）或其容器有關的條目。</td></tr><tr><td><strong>Amcache_DevicePnps.csv</strong></td><td>裝置 PnP 條目 (Plug-and-Play 裝置)</td><td>描述插拔裝置 (PnP 裝置) 的資訊，例如硬體 ID、裝置名稱、相關時間等。</td></tr><tr><td><strong>Amcache_DriveBinaries.csv</strong></td><td>驅動程式二進位檔</td><td>涉及驅動程式（driver binaries）或在磁碟上可執行但屬驅動程式範疇的條目。</td></tr><tr><td><strong>Amcache_DriverPackages.csv</strong></td><td>驅動套件 (Driver Packages)</td><td>關於驅動程式套件安裝、驅動套件版本、封裝資訊等。</td></tr></tbody></table><p>接下來就可以用 <a href="https://ericzimmerman.github.io/#!index.md">Timeline Explorer</a> 或者其他可以查看 CSV 檔的程式查看內容</p><p><img src="/assets/mPcDCME75qRv_jdBbz7s7O_MXQtHhoV6h36PvLThoFc=.png"></p><p>假設想要知道 notepad.exe 的實際路徑以及它的 SHA-1 值，按照上面的步驟並在 <code>&lt;XXX_UnassociatedFileEntries.csv&gt;</code> 搜尋 notepad.exe</p><p><img src="/assets/x-tZ0wFWbbmTkDMDwjC0KcLnXum2pc_9t6A4oT2z3Bg=.png"></p><p>可以馬上就看到相關資訊</p><hr><h1 id="NTUSER-DAT"><a href="#NTUSER-DAT" class="headerlink" title="NTUSER.DAT"></a>NTUSER.DAT</h1><p>路徑位置：<code>C:\Users\&lt;username&gt;\NTUSER.DAT</code></p><p><img src="/assets/HbBDSu1lraXx3pIgsNxHGOqZHdhNnyuWDrcCEMR8-1A=.png"></p><p>NTUSER.DAT 是 Windows 每個使用者帳戶在其使用者設定檔底下的一個檔案，用來儲存與該帳戶相關的 Registry 設定與使用者偏好，在使用者登入時，系統會將這個檔案對應到註冊表的 HKEY_CURRENT_USER（HKCU） 分支，讓該使用者的作業與應用程式可以讀寫其個人設定；在登出或關機時，這些變更會回寫到 NTUSER.DAT。</p><p>可以直接用 <a href="https://ericzimmerman.github.io/#!index.md">RegistryExplorer</a> 查看。</p><p><img src="/assets/RIvMLfCdh5rrb81bTPyBEaPuSO1d-zFoxpUOjAMwYo8=.png"></p><p>這邊重點提兩個比較特別的 key</p><h2 id="UserAssist"><a href="#UserAssist" class="headerlink" title="UserAssist"></a>UserAssist</h2><p>key 路徑：<code>Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\&#123;GUID&#125;\Count</code></p><p>UserAssist 是 Windows 用來追蹤使用者透過圖形介面啟動應用程式或捷徑的統計記錄機制，裡面會包含程式的執行次數、最後執行時間、<strong>Focus Count、Focus Time</strong></p><p><img src="/assets/EX1XBHpXaNJ2rj-3d0M_GUZyaVjDpWQwmaKNE1NvYuY=.png"></p><hr><h2 id="ShellBags"><a href="#ShellBags" class="headerlink" title="ShellBags"></a>ShellBags</h2><p>ShellBags 是 Windows 用於記錄使用者在檔案總管中瀏覽<strong>資料夾</strong>時的設定偏好與檔案夾訪問紀錄，包括資料夾的視窗配置 &#x2F; 檢視樣式 &#x2F; 排列方式 &#x2F; 大小 &#x2F; 位置等，代表如有刪除或存取資料夾的操作會被記錄在 ShellBags 當中。</p><p>它會依照作業系統存在不同地方</p><ul><li><code>&lt;NTUSER.DAT&gt;\Software\Microsoft\Windows\Shell\BagMRU </code></li><li><code>&lt;NTUSER.DAT&gt;\Software\Microsoft\Windows\Shell\Bags</code></li><li>在較新 Windows 版本（如 Windows 7 之後），部分 ShellBags 資料會存於 <code>C:\Users\&lt;username&gt;\AppData\Local\Microsoft\Windows\UsrClass.dat</code></li><li>在某些 Windows 版本或使用者設定中，部分 ShellBags 條目只存在於 UsrClass.dat 而非 NTUSER.DAT</li></ul><p><img src="/assets/pnKEJ4vqw21ZBolGw34xhCg7XGai0iP7POjOr8NtI2I=.png"></p><p>如果直接使用 RegistryExplorer 會很難閱讀，建議使用 Eric Zimmerman’s tools 中的 ShellBags Explorer 查看</p><h3 id="ShellBags-Explorer"><a href="#ShellBags-Explorer" class="headerlink" title="ShellBags Explorer"></a>ShellBags Explorer</h3><p>下載連結：<a href="https://ericzimmerman.github.io/#!index.md">https://ericzimmerman.github.io/#!index.md</a></p><p>ShellBags Explorer 是由 Eric Zimmerman 所開發的一款專門用來瀏覽與解析 Windows ShellBags 資料的工具，將 BagMRU &#x2F; Bags 的註冊表資料解析為資料夾層級樹狀視圖，可以看到使用者曾瀏覽過哪些資料夾</p><p>它的介面跟 RegistryExplorer 差不多，一樣需要匯入 hive，看作業系統版本匯入 <code>NTUSER.DAT</code> 或者 <code>UsrClass.dat</code></p><p><img src="/assets/MvUItWpVpa5jnJsYBxUDs0mF7EWLYanjudpkwnoJOs8=.png"></p><p>匯入後就可以看到 ShellBags 資訊</p><p><img src="/assets/wVsOpk-GTmT9mXzGHEOn72qufR43sE350d2ofw13oh4=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了 Amcache.hve、NTUSER.DAT 兩個 Hive，多了一點線索可以分析，這兩個 Hive 對於 Disk Forensic 來說挺重要也挺常用到的，在打藍隊 Lab 或 CTF 時如果沒什麼線索也會跑來看這兩個 Hive，明天也會持續分享其他可分析的部分。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Amcache </tag>
            
            <tag> NTUSER.DAT </tag>
            
            <tag> Registry </tag>
            
            <tag> UserAssist </tag>
            
            <tag> ShellBags </tag>
            
            <tag> AmcacheParser </tag>
            
            <tag> ShellBags Explorer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>襲來！大硬碟邪神</title>
      <link href="/2025/10/03/diskforensic/"/>
      <url>/2025/10/03/diskforensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會介紹我覺得在 Forensic 當中最難的一個類別 - Disk Forensic，因為它單單一題的檔案就容量超大，裡面的內容超級無敵多，所以工具的使用與觀察就會很重要，所以今天的內容會包含基本的流程與會用到的工具</p><hr><h1 id="💾-Disk-Forensic"><a href="#💾-Disk-Forensic" class="headerlink" title="💾 Disk Forensic"></a>💾 Disk Forensic</h1><p>Disk Forensic 是專注於從磁碟或存儲媒體，如：硬碟、固態硬碟、USB 隨身碟、記憶卡……等等中取得、分析與復原資料，以作為法律或調查用途的證據，目標是在不改變原始資料的前提下，盡可能還原被刪除的資料、隱藏資料、檔案相關 metadata、檔案修改紀錄、時間戳記等，以協助重建案情、時間軸或找出惡意行為</p><p>目前藍隊 CTF 的 Disk Forensic 題目會給兩種檔案，一種是 Image 檔案</p><p><img src="/assets/oDFmynDID1wASC74E8JhHkOGRBWp6HlPgGIxwDDrxyk=.png"></p><p>另一種會是類似完整的硬碟內的檔案，但是又不是完整的</p><p><img src="/assets/Ozqkhi6MZzMBqEVpU-N7YsdubEKdT7GFkzUiDSApOTc=.png"></p><p>這兩個差別是什麼呢？</p><p>上面的是由 FTK Imager 或是其他取證工具將完整的 disk 資料把它轉成 image，因此原本留在 disk 裡面有什麼資料，在 Image 裡就會留著這些資料，所以檔案有可能會超級大。如果要查看也可以使用 FTK Imager 查看或者掛載到電腦上</p><h2 id="FTK-Imager"><a href="#FTK-Imager" class="headerlink" title="FTK Imager"></a>FTK Imager</h2><p>下載連結：<a href="https://www.exterro.com/digital-forensics-software/ftk-imager">https://www.exterro.com/digital-forensics-software/ftk-imager</a></p><p>FTK Imager 是由 AccessData 開發的一款磁碟／資料映像與預覽工具，它可用於在不改變原始資料的情況下，取得一個與原始儲存裝置（硬碟、USB、記憶卡等），以供日後分析、法律調查等用途</p><p><img src="/assets/S2YDDW_pvvqkgTX-VY-mzsjJHhXOaZWC7VuDo6AALNY=.png"></p><p>如果要掛載 Image，點選左上角的 File -&gt; Add Evidence Item </p><p><img src="/assets/3G-zS_FR8MBfROUm_4KJZA9u1dnXaISTERQDc41Ehug=.png"></p><p>選擇 Image File </p><p><img src="/assets/5g5pMNHdEt-j-KirrHJ_8pilhzUFSZG_0-qk1cxUw9s=.png"></p><p>選擇 disk image 路徑</p><p><img src="/assets/oxH-L__SfkLyUcn3Xb4mr0btii2BukbcZhAbaOoDFXI=.png"></p><p>之後就可以查看 image 內容了</p><p><img src="/assets/aHLeONLXQFx5rQkTMEL6kQ2gHFvUF9BKwhs_Cc2a-W8=.png"></p><hr><p>另一個則是另外使用一個 KAPE 工具將 disk 中關鍵的一些檔案（如：evtx、NTUSER.DAT、tmp 等）提取出來再整理成一包壓縮檔，解壓後就會出現整理過後的硬碟內容，因此檔案大小會比使用 FTK Imager 轉換的 Image 小很多，並且可以直接查看，又稱為 <strong>triage image</strong></p><p><img src="/assets/wMDJiZ9OQ_f2fWU2px0YDtSZa61O7WhUkSWQP1iUlAo=.png"></p><h2 id="KAPE"><a href="#KAPE" class="headerlink" title="KAPE"></a>KAPE</h2><p>下載連結：<a href="https://www.kroll.com/en/services/cyber/incident-response-recovery/kroll-artifact-parser-and-extractor-kape">https://www.kroll.com/en/services/cyber/incident-response-recovery/kroll-artifact-parser-and-extractor-kape</a></p><p>KAPE 是由 Eric Zimmerman 為 Kroll 所開發的 DFIR 工具，它是一個快速收集 artifacts 並初步處理的工具，用於從現場系統或儲存媒體中迅速抓取對鑑識有用的檔案或資訊，再利用 modules 來解析／整理這些資料。目的在於在完整映像完成前就能有可用線索。</p><p><img src="/assets/YKbSdl2jMO9MqNDpsrp_TVlLOYv6Ux8ptGfCK7pTTrA=.png"></p><p><code>source : ``https://isc.sans.edu/diary/25258</code></p><hr><p>接下來得到了 image 檔之後，就可以開始看我們想要得知的一些內容</p><h2 id="Windows-Event-Logs"><a href="#Windows-Event-Logs" class="headerlink" title="Windows Event Logs"></a>Windows Event Logs</h2><p>路徑：<code>%WinDir%\System32\winevt\logs</code></p><p>此資料夾底下會有很多 evtx 檔案，其中記錄了很多事件，主要會看的有這三個</p><ul><li>Security.evtx : 用於記錄系統的安全性事件（稽核、登入／登出、帳戶變更、安全性相關操作）</li><li>Application.evtx : 用來記錄各個應用程式或程式元件本身所產生的事件</li><li>System.evtx : 記錄 Windows 系統組件、驅動程式、核心服務等所產生的事件</li></ul><p>可以用內建的 Windows Event Viewer 查看，或者使用第三方程式，如：<a href="https://eventlogxp.com/">Event Log Explorer</a> 介面比較好看一點</p><p><img src="/assets/QqTatollrpV9sGe0aa8lvmntm1cXjWShrTfLos8__ww=.png"></p><p>查詢時會需要搭配一下 Event ID，這邊列出一些很常會使用到的</p><table><thead><tr><th><strong>Event ID</strong></th><th><strong>Log 來源</strong></th><th><strong>說明</strong></th></tr></thead><tbody><tr><td>4624</td><td>Security</td><td>成功登入事件</td></tr><tr><td>4625</td><td>Security</td><td>登入失敗事件</td></tr><tr><td>4634</td><td>Security</td><td>使用者登出</td></tr><tr><td>4672</td><td>Security</td><td>特殊權限帳號登入 (例如系統管理員)</td></tr><tr><td>4688</td><td>Security</td><td>建立新行程 (process creation)</td></tr><tr><td>4689</td><td>Security</td><td>行程結束 (process termination)</td></tr><tr><td>4697</td><td>Security</td><td>安裝新的服務</td></tr><tr><td>4720</td><td>Security</td><td>建立新的使用者帳號</td></tr><tr><td>4722</td><td>Security</td><td>啟用使用者帳號</td></tr><tr><td>4723</td><td>Security</td><td>使用者嘗試變更自己的密碼</td></tr><tr><td>4724</td><td>Security</td><td>嘗試重設其他帳號密碼</td></tr><tr><td>4725</td><td>Security</td><td>停用使用者帳號</td></tr><tr><td>4726</td><td>Security</td><td>刪除使用者帳號</td></tr><tr><td>4732</td><td>Security</td><td>使用者被新增至本機群組</td></tr><tr><td>4733</td><td>Security</td><td>使用者被移出本機群組</td></tr><tr><td>4740</td><td>Security</td><td>使用者帳號被鎖定</td></tr><tr><td>1102</td><td>Security</td><td>清除稽核日誌 (Event Log 被清除)</td></tr><tr><td>6005</td><td>System</td><td>Event Log 服務啟動 (通常代表開機)</td></tr><tr><td>6006</td><td>System</td><td>Event Log 服務關閉 (通常代表關機)</td></tr><tr><td>6008</td><td>System</td><td>非正常關機事件</td></tr></tbody></table><hr><h2 id="Windows-Registry"><a href="#Windows-Registry" class="headerlink" title="Windows Registry"></a>Windows Registry</h2><p>路徑：<code>%WinDir%\System32\Config</code></p><p>Windows Registry 是 Windows 的中央設定資料庫，系統與應用程式把大量設定、狀態與活動資訊寫入其中。它不是單一文字檔，而是以樹狀結構儲存的二進位資料庫，供作業系統、驅動程式與應用程式查詢與修改</p><p>它是由這三個基本結構儲存</p><ul><li><strong>Hive</strong>：Windows 註冊表的最高層級結構單位，每個 Hive 都是一個獨立的檔案，儲存在硬碟上。可以把 Hive 想像成一個大型的資料庫檔案。</li><li><strong>Key</strong>：類似資料夾，可包含 subkeys 與 values。每個 key 在 metadata 裡有屬性，形成樹狀結構。</li><li><strong>Value</strong>：key 下面的項目，真正在存資料的地方。每個 value 有三個部分：name、type、data。</li></ul><p>而 HKEY_LOCAL_MACHINE (HKLM) 是存放針對整個電腦的設定，如驅動程式、已安裝軟體、系統服務、硬體資訊等</p><p><img src="/assets/Pb6ezxh7M5yBNelER6EFjpzDTr3VEMjRHQYPJAl2xzI=.png"></p><p><code>source :  ``https://www.lifewire.com/what-is-a-registry-value-2626042</code></p><p>以下四個是很常會去查看的 Hive </p><ul><li>SAM：儲存本地使用者帳號與群組的資訊，例如使用者名稱、建立時間、最後登入時間。</li><li>SECURITY：包含使用者帳號的安全相關資訊，例如密碼政策。</li><li>SOFTWARE：紀錄所有已安裝軟體（包含 Windows 內建與第三方軟體）。</li><li>SYSTEM：儲存系統層級的組態資訊，例如事件日誌設定、硬體（像是 USB 裝置）相關的設定。</li></ul><p>可以使用 <a href="https://ericzimmerman.github.io/#!index.md">RegistryExplorer</a> 幫助查看</p><p><img src="/assets/U_Af3Nuy6jkoJVOBYMEK0JxMY0oldryrcEpKqJiiFYg=.png"></p><p>另外有時候匯入 Hive 時會出現這樣的警告</p><p><img src="/assets/1R6SsxPjf6RH4H9TTieYwGk_l_SPDaEw3IEEwytPx7U=.png"></p><p>此警告表示主 hive 檔案與其 transaction logs (.LOG) 的序號不一致，代表 transaction log 中存在尚未同步到主檔案的變更。</p><p>Windows Registry 採用 write-ahead logging 機制：修改時先寫入記憶體快取，再記錄到 transaction log，最後才定期 flush 到主 hive 檔案。而當 log 檔案的序號大於主檔案時，這個 hive 就會被稱為 <strong>Dirty Hive</strong> </p><p>按下 Yes 之後就會開始進行與 transaction logs 的合併</p><p><img src="/assets/aMqvxrwhRPljyqQ9q7YZGnDq-qwqUj9tamap8pHlCCI=.png"></p><p>選擇 transaction logs</p><p><img src="/assets/vV7W6Z8NLSy3_PqzONNNI-lZkXLVGK3gjQLIHimlGyA=.png"></p><p>選擇後它就會幫你合併，合併完後先儲存到一個地方</p><p><img src="/assets/zWmyczb4k7Jxotypg0j4NvhrhaU-1uXbQ3tgONIuTxo=.png"></p><p>存完後就可以看這個合併過後的 Hive </p><p><img src="/assets/-Nlg6ItibiOChztpvL-_Bj38i8jwo1N9KOo1v6D0c30=.png"></p><p>Registry Explorer 工具除了可以查看之外它還有預設書籤可以使用，快速定位到想要看的 key </p><p><img src="/assets/ias4TQfhKvlTF0pKOS0CDMBbNHwjRZQ8-186lYojnGA=.png"></p><p>以下列出常見的 key 路徑</p><table><thead><tr><th><strong>Registry 路徑</strong></th><th><strong>說明</strong></th></tr></thead><tbody><tr><td>HKLM\SYSTEM\CurrentControlSet\Services</td><td>系統服務與驅動程式資訊</td></tr><tr><td>HKLM\SYSTEM\CurrentControlSet\Control\ComputerName\ActiveComputerName</td><td>電腦名稱</td></tr><tr><td>HKLM\SYSTEM\MountedDevices</td><td>磁碟&#x2F;USB 裝置掛載資訊</td></tr><tr><td>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</td><td>系統啟動時自動執行程式</td></tr><tr><td>HKLM\SAM\SAM\Domains\Account\Users</td><td>本機帳號資訊</td></tr></tbody></table><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了什麼是 disk forensic 以及一些會想要先查看的線索，接下來幾天會繼續介紹其他在 Disk 中值得分析的檔案</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Disk Forensic </tag>
            
            <tag> FTK Imager </tag>
            
            <tag> KAPE </tag>
            
            <tag> Windows Event Logs </tag>
            
            <tag> Windows Registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在網路上挖呀挖呀挖</title>
      <link href="/2025/10/02/NetworkMiner/"/>
      <url>/2025/10/02/NetworkMiner/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>有時候會想要看一下整個通訊過程傳了什麼東西或者是否有 Credentials 洩漏，今天介紹一個 network forensic 工具 - NetworkMiner，它可以用來從網路流量中萃取有用資訊</p><hr><h1 id="🪏-NetworkMiner"><a href="#🪏-NetworkMiner" class="headerlink" title="🪏 NetworkMiner"></a>🪏 NetworkMiner</h1><p>下載連結：<a href="https://www.netresec.com/?page=NetworkMiner">https://www.netresec.com/?page=NetworkMiner</a></p><p>NetworkMiner 目前只支援 Windows 作業系統，但是也可以使用其他工具讓它在 Linux 或 Mac 上執行。它可以將 pcap 內的封包拆開、解析、重組，嘗試把裡面的檔案、圖片、郵件、憑證／SSL 證書、使用者帳號密碼等直接還原出來，另外它也可以即時監聽封包並分析</p><p><img src="/assets/BJmkNL7Wg-jT87SnETdJ3A595Aq2fIzDb_OTbU6yD3A=.png"></p><p>但是，NetworkMiner 免費版只能分析 pcap 檔案，如果是 pcapng 格式則需要付費才能分析，付費版本需要 1300 USD </p><blockquote><p>pcapng 也是一種用來儲存網路封包捕捉資料的檔案格式，是舊的 pcap 格式的進化版，它會比 pcap 儲存的資料還要多，可以分析的資訊也越多。目前 Wireshark 從 v1.8 開始，預設就把封包儲存格式改成 pcapng</p></blockquote><p>今天的 pcap 檔案會從 <a href="https://cyberdefenders.org/blueteam-ctf-challenges/bluesky-ransomware/">Cyberdefender - BlueSky Ransomware Lab</a> 的題目下載，並用 NetworkMiner 分析。</p><p>首先把 pcap 檔案丟進 NetworkMiner 當中分析</p><p>分析完後會先顯示的頁面是封包出現的主機，當中包含了主機的 IP、host、以及它開放的 port 等等</p><p><img src="/assets/ph7PtZ3V5BQdwb-Ydw4F3REbX7JTN7lnT8jb2t-AaFk=.png"></p><p>接下來 Host 選項的右邊 Files 頁面，它會截取未加密的檔案，Files 右邊的 Image 頁面也是相同功能，專門截取未加密的圖片</p><p><img src="/assets/r1pOmKePhCIduAI1NSobXhTklz4T0OAlhUZFv262TQ8=.png"></p><p>接下來是 Credential 頁面，它會提取出封包當中明文傳送的帳號密碼</p><p><img src="/assets/WNIxyDDfpQujh5Et_ftU49MYnps6LG0zx4DXDiAs6Ew=.png"></p><p>Session 頁面會顯示所有封包的兩方通訊紀錄</p><p><img src="/assets/A51jXoR59A2DBYx9JUsUsyrpeddE4RYjKBqYmY-CrDU=.png"></p><p>Parameter 是將應用層的各種參數、字串、指令、欄位內容提取出來</p><p><img src="/assets/0gxBBumg_tI0HRU2imVUeMb0Ie3WWeElILZltOaYY_A=.png"></p><p>有了以上的功能，解 BlueSky Ransomware 這個 Lab 的一些題目就會很容易看出來了。</p><blockquote><p>Q1 : Knowing the source IP of the attack allows security teams to respond to potential threats quickly. Can you identify the source IP responsible for potential port scanning activity?</p></blockquote><p>開啟 Host 頁面，發現它的 Hostname、Web Server Banner 可以確定它是可疑的 IP</p><p><img src="/assets/UGF8TahyMhF6uykmGTkeaHiyip-HzdKSWcenQRuliXg=.png"></p><blockquote><p>Q2 : During the investigation, it’s essential to determine the account targeted by the attacker. Can you identify the targeted account username?</p><p>Q3 : We need to determine if the attacker succeeded in gaining access. Can you provide the correct password discovered by the attacker?</p></blockquote><p>直接去看 Credential 就會看到帳號以及他的密碼</p><p><img src="/assets/3-f_D5PH0T3ruezDWmbBZP8Zg1_hOAOXNYLFfb-UwPQ=.png"></p><blockquote><p>Q4 : Attackers often change some settings to facilitate lateral movement within a network. What setting did the attacker enable to control the target host further and execute further commands?</p></blockquote><p>直接去看 Parameter 頁面，就會看到這串指令</p><p><img src="/assets/GZowieiiZRU3vzTq1vh9b_WCm4HcayfzgnE6GaGQ448=.png"></p><p>可以發現它就是執行了</p><pre class="line-numbers language-none"><code class="language-none">EXEC sp_configure &#39;xp_cmdshell&#39;, 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>將 xp_cmdshell 啟用後去執行後面的惡意操作</p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了 NetworkMiner 工具與它的功能，快速提取封包當中的資訊，在配合解題時會很方便，但可惜的是最近出現的題目都會使用 pcapng 儲存，除非特地轉成 pcap 或者使用 tcpdump 提取 pcap，但是這個工具還是很好用。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網路鑑識 </tag>
            
            <tag> NetworkMiner </tag>
            
            <tag> Network Forensic </tag>
            
            <tag> 封包分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZED USER INTERFACE</title>
      <link href="/2025/10/01/zui/"/>
      <url>/2025/10/01/zui/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會介紹另一個network forensic 工具-Zui ，另外也會介紹一下 Zui 當中使用到的 Zeek 與以及Suricata pcap 分析工具 </p><hr><h1 id="Zui"><a href="#Zui" class="headerlink" title="Zui"></a>Zui</h1><p>下載連結：<a href="https://zui.brimdata.io/docs">https://zui.brimdata.io/docs</a></p><p>Zui 它的前身是Brim ， 是一款用於網路流量分析的工具，它提供了使用者友善的圖形化介面，可以讓使用者能夠快速分析與視覺化大量網路流量</p><p><img src="/assets/aEB_E59Bb6Ghcjk57wLkzd5kCFR_ATktueWQUMrKugE=.png"></p><p>這個工具裡面整合了兩個網路封包分析工具，分別是Zeek、Suricata</p><hr><h2 id="Zeek"><a href="#Zeek" class="headerlink" title="Zeek"></a>Zeek</h2><p>連結：<a href="https://github.com/zeek/zeek">https://github.com/zeek/zeek</a></p><p>Zeek 是一個開源的網路安全監控工具，以強大的資料記錄功能聞名。它能將原始的 pcap 封包檔轉換成結構化的日誌，方便在 Zeek 內查詢與分析，快速提供網路行為的概覽。</p><p>指令如下</p><pre class="line-numbers language-none"><code class="language-none">zeek -C -r B33F50up_blog.pcapng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他會產生以下檔案</p><ul><li>conn.log  : 記錄了所有的網路連接</li><li>dns.log：記錄了所有的 DNS查詢活動</li><li>files.log：記錄了通過 HTTP 傳輸的檔案</li><li>http.log：這是一個 HTTP 協議的流量日誌，記錄了網頁瀏覽和API 請求</li><li>packet_filter.log：記錄了封包過濾器的配置</li></ul><p><img src="/assets/wEXC7MUEGLZqmjPBWvXxb9gL4cWzTN2L6JHdh9dc1cA=.png"></p><p>以下是http.log 的形式</p><pre class="line-numbers language-none"><code class="language-none">#separator \x09#set_separator,#empty_field(empty)#unset_field-#pathhttp#open2025-09-27-22-26-52#fieldstsuidid.orig_hid.orig_pid.resp_hid.resp_ptrans_depthmethodhosturireferrerversionuser_agentoriginrequest_body_lenresponse_body_lenstatus_codestatus_msginfo_codeinfo_msgtagsusernamepasswordproxiedorig_fuidsorig_filenamesorig_mime_typesresp_fuidsresp_filenamesresp_mime_types#typestimestringaddrportaddrportcountstringstringstringstringstringstringstringcountcountcountstringcountstringset[enum]stringstringset[string]vector[string]vector[string]vector[string]vector[string]vector[string]vector[string]1754678828.272075CAuRo91flufxXutAke100.112.165.260665192.168.1.12550001GET192.168.1.125:5000&#x2F;-1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36-024859200OK--(empty)------FA9Bk7Ikrr1LVrys-text&#x2F;html1754678857.820963CIRhMK1X97Z1MzFRD1100.112.165.260676192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500015727200OK--(empty)---FIUrzJ3sbt6deYBXf3-text&#x2F;plainFyILV9CHbcmUMGtc6-text&#x2F;json1754678865.293310CZnidTF5LIgaMzbRe100.112.165.260677192.168.1.12550001POST192.168.1.125:5000&#x2F;systemhttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:5000141185200OK--(empty)---Fvs6lg41SIyuYsReh2--FqFYD91bNrEWRNR501-text&#x2F;json1754679070.738945CWlCIn4qK2ntw6CuJl100.112.165.260757192.168.1.12550001GET192.168.1.125:5000&#x2F;-1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36-024859200OK--(empty)------FG2QH72aF2jeG9CYC9-text&#x2F;html1754679165.228123C5V1Fn3nYAvFuSQeE100.112.165.260778192.168.1.12550001POST192.168.1.125:5000&#x2F;systemhttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:5000141287200OK--(empty)---FnwtMr2TZ1qIS6LLmj--Fq827u4xABcX563I21-text&#x2F;json1754679173.669096CWXpsv3zrBE7Lx66Sg100.112.165.260779192.168.1.12550001POST192.168.1.125:5000&#x2F;systemhttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500014413177200OK--(empty)---FxvTqN3Pid7VWQP7y3--Fi4rGH32Y4P77kznf3-text&#x2F;json1754679180.268390Co6odn3WTbf9HKGcO6100.112.165.260780192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500015728200OK--(empty)---FYW00SjDihqYC30xe-text&#x2F;plainFQGbYm3SH1rsO8o9ng-text&#x2F;json1754679196.383809CGjLWoznypKV0Pgt100.112.165.260809192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500016738200OK--(empty)---FVCJDglco6ai9lzi4-text&#x2F;plainFB2a4L3x3ZELSSdCQ1-text&#x2F;json1754679223.696243C0s1KA7ZrfQvnIpj100.112.165.260865192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500030851200OK--(empty)---FA2p79sD6MkhyaCEb-text&#x2F;plainFwUGICEULGQRyBs78-text&#x2F;json1754679257.891805CtwrhY2Kw9bscBOsX7100.112.165.260874192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500034755200OK--(empty)---FybSTDKXBk5dCiaYl-text&#x2F;plainF55jsD1S1vWW8IVBY4-text&#x2F;json1754679265.650887CFgfqH2IasZxXsovkd100.112.165.260875192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500030869200OK--(empty)---FtvRcZ3D5kRIP1ijy5-text&#x2F;plainFTYdr5iKtJX11Efma-text&#x2F;json1754679315.090163CEAuN63ly0lHS2zRrj100.112.165.260895192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500030869200OK--(empty)---Fyt7jP30AEKPs4C0Uj-text&#x2F;plainF0zHt852ycC25Gpkf-text&#x2F;json1754679319.217264CRWcyt2bda4K3g6Xub100.112.165.260912192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500036900200OK--(empty)---FUAgus1sr4pPeGnidg-text&#x2F;plainFqnOWw20dfXD0koyIi-text&#x2F;json1754679354.845803CulPOq3A9IP8ab4Zqd100.112.165.260981192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500048769200OK--(empty)---FZw17aZHAnZltVkJ-text&#x2F;plainFQvAYSOVPIbUCfRm7-text&#x2F;json1754679406.575000C9iy0scrJKJuDpi07100.112.165.261207192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:5000492621200OK--(empty)---FiejrYnJjwTaJ5db7-text&#x2F;plainFKZoSb4yddnL4uzkZf-text&#x2F;json1754679827.575533CV2dqm3aNuGOi4EC0h100.112.165.263113192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500036912200OK--(empty)---FDaXYp2bh8hJpHMYCi-text&#x2F;plainFdsBU41nDrcCQ9mTV9-text&#x2F;json1754679851.757452CWSzgl4AsTyJVyRpJf100.112.165.263213192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500044800200OK--(empty)---FAGwfWDdjCLhcrZX2-text&#x2F;plainF89dhl1uFy7r4oRtf-text&#x2F;json1754679859.655497C0LErP2jTxCqKmUESd100.112.165.263216192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500047781200OK--(empty)---FoNYJj2QlLyZkd9tEe-text&#x2F;plainFUaGCH2RbcOlDQcaOi-text&#x2F;json1754679875.655339CqC0qj2SMoQnSfaju6100.112.165.263217192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:500031762200OK--(empty)---FRGjia4iHeyPzIDRC3-text&#x2F;plainFwGgDTGi2gHDik2P5-text&#x2F;json1754679999.499748CtN1Vk4RrwIRGOgwHc100.112.165.263280192.168.1.12550001POST192.168.1.125:5000&#x2F;pinghttp:&#x2F;&#x2F;192.168.1.125:5000&#x2F;1.1Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36http:&#x2F;&#x2F;192.168.1.125:5000142836200OK--(empty)---FFJx4j4PnbpIi0mfD6-text&#x2F;plainFYpDmc37JMpCuz4Zac-text&#x2F;json#close2025-09-27-22-26-52<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外他也會根據 pcap 檔產生其他log ，參考網址：<a href="https://docs.zeek.org/en/master/logs/index.html">https://docs.zeek.org/en/master/logs/index.html</a> </p><hr><h2 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a>Suricata</h2><p>連結：<a href="https://suricata.io/">https://suricata.io/</a></p><p>Suricata 是一個開源的入侵偵測系統（IDS）與入侵防禦系統（IPS），以深度封包檢測、流量分析與威脅偵測聞名。能使用 Suricata 的龐大規則集快速評估網路資料並辨識異常。</p><p>指令如下</p><pre class="line-numbers language-none"><code class="language-none">suricata -r B33F50up_blog.pcapng <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他會產生四個檔案</p><ul><li>eve.json : Suricata的結構化日誌檔案，包含多種事件類型的詳細記錄</li><li>fast.log : Suricata 快速警報日誌，包含檢測到的安全威脅警報</li><li>stats.log : Suricata 運行統計資料，包含詳細的系統運行統計</li><li>suricata.log : Suricata 主要運行日誌，包含系統啟動和運行資訊</li></ul><p><img src="/assets/5LROwbAnig-tGtRpsi7V6Ig8OL3X9F9e3CxpqHcjWvs=.png"></p><p>以下是 fast.log 資訊</p><pre class="line-numbers language-none"><code class="language-none">08&#x2F;09&#x2F;2025-02:53:47.165861  [**] [1:2019284:3] ET ATTACK_RESPONSE Output of id command from HTTP server [**] [Classification: Potentially Bad Traffic] [Priority: 2] &#123;TCP&#125; 192.168.1.125:5000 -&gt; 100.112.165.2:6086508&#x2F;09&#x2F;2025-02:56:49.767871  [**] [1:2002034:13] ET ATTACK_RESPONSE Possible &#x2F;etc&#x2F;passwd via HTTP (linux style) [**] [Classification: Information Leak] [Priority: 2] &#123;TCP&#125; 192.168.1.125:5000 -&gt; 100.112.165.2:61207<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>總結來說 Zui 的做法是先用 <a href="https://github.com/brimdata/brimcap">brimcap</a> 將 pcap 送到 Zeek&#x2F;Suricata 做 summary&#x2F;log，再在 Zui 內用 correlation view、alert 視窗、或 detail pane 分析事件與原始封包。</p><p>所以只要將pcap 封包丟進去 zeek ，他就會開始進行分析</p><p><img src="/assets/gyCnmYGl_VfYEuqKAOa8TyKLnNYYC6tohyAziYN13Ck=.png"></p><p>分析完後按下<code>Query Pool</code> 就可以看到視覺化的頁面</p><p><img src="/assets/aEB_E59Bb6Ghcjk57wLkzd5kCFR_ATktueWQUMrKugE=.png"></p><p>另外 Zui 使用 Zed（或稱 Zed query &#x2F; SuperSQL）來做過濾與轉換查詢可以更快處理大量資料</p><p>以下分享幾個操作</p><p>首先可以篩選出Suricata 警報</p><pre class="line-numbers language-none"><code class="language-none">event_type&#x3D;&#x3D;&quot;alert&quot; #可篩選出 Suricata 警報<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/s_W7IAAYyK-10fAyW9KpXLDpZhCSm8jgPMVAQABdehY=.png"></p><p>也有像wireshark 一樣可以篩選 ip scr or ip dst </p><pre class="line-numbers language-none"><code class="language-none">id.orig_h&#x3D;&#x3D;100.112.165.2 and id.resp_p&#x3D;&#x3D;53 #來源ip &#x3D; 100.112.165.2 目標port &#x3D; 53<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/tWu_XB4kP452AJbgpcIQ0vOiRSROoPhmTNH13gBxRPg=.png"></p><p>另外他也可以進行統計與排序</p><pre class="line-numbers language-none"><code class="language-none">count() by id.resp_p | sort -r  # 對目標port 進行統計，並降冪排序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/mq6sPm0cAJqgKEiREZUwTYXNAvnegIR2DAfkVtRs4GQ=.png"></p><p>對你想要篩選的資料按右鍵可以自動生成查詢指令</p><p><img src="/assets/T2wzAhndl8-IWt4PObDgOI8JbPrlO9uiPokk5yl27do=.png"></p><p>最後也可以下載官方提供預先寫好的查詢</p><p>連結：[<a href="https://github.com/brimdata/brimcap?tab=readme-ov-file#brimcap-queries">https://github.com/brimdata/brimcap?tab=readme-ov-file#brimcap-queries</a></p><p>](<a href="https://github.com/brimdata/brimcap?tab=readme-ov-file#brimcap-queries)%E4%B8%8B%E8%BC%89%E5%BE%8Cqueries.json">https://github.com/brimdata/brimcap?tab=readme-ov-file#brimcap-queries)下載後queries.json</a> 後按下+的藍色按鈕，點選Import Queries</p><p><img src="/assets/777onBmZHXrrhqyTl2BNjPp328hH_BsS0lh761qK6Aw=.png"></p><p>把剛剛下載的json 檔丟進去，就會匯入預先寫好的query </p><p><img src="/assets/kndUjYMJJCjbP4n4KenQWusY9yA4lv4sKzYL_6Ke0lA=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了Zui 以及其中Zeek 與Suricata功能，也有分享zui 的基本操作，zui 在解一些CTF 題時也會有奇效，雖然沒辦法查看詳細封包內容，但在快速查詢可疑行為或可疑流量時會很好用。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network Forensic </tag>
            
            <tag> Zui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🦈 ✌️</title>
      <link href="/2025/09/30/Wireshark2/"/>
      <url>/2025/09/30/Wireshark2/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會介紹 Wireshark 的兩個特別的功能，一個是可以匯入key 去解密封包內容，另一個是可以將http的傳輸物件下載下來。</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>下載連結：<a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p>Wireshark是目前最受歡迎的開源網路協定分析器。</p><p>這款功能強大的軟體不僅能夠即時監控網路流量，更能深入分析各種網路協定的詳細內容，為網路故障排除、協定開發和安全分析提供全方位的支援，</p><p>另外也能夠識別和解析超過2000種不同的網路協定，從常見的TCP&#x2F;IP協定族到專用的工業控制協定，幾乎涵蓋了所有可能遇到的網路通訊場景。這種全面的協定支援不僅包括即時協定解析，還允許用戶根據需要添加自定義協定支援。</p><hr><h1 id="🔐-解密封包"><a href="#🔐-解密封包" class="headerlink" title="🔐 解密封包"></a>🔐 解密封包</h1><p>Wireshark 支援可以匯入key ，將加密過後的HTTPS 流量還原成明文</p><p>因為HTTPS 多了一層SSL&#x2F;TLS，他會將封包進行加密保護傳輸內容不被竊聽</p><p>解密流程如下：</p><p>假設我們要分析一個HTTPS網站的登入過程，將加解密的key 先存在一個檔案中</p><pre class="line-numbers language-shellscript" data-language="shellscript"><code class="language-shellscript">export SSLKEYLOGFILE&#x3D;&quot;&#x2F;home&#x2F;user&#x2F;ssl-keys.log&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然後再Preferences-&gt; Prorocols 裡面找到TLS ，接下來把剛剛儲存的key 路徑丟進去最底下<code>(Pre)-Master-Screct log filename</code>裡面</p><p><img src="/assets/CeYJy0OyLQdOSSNNFOSwGR4xwqu41W5ftRSrnPAi5Lg=.png"></p><p>例子：<a href="https://cyberdefenders.org/blueteam-ctf-challenges/wiredive/">CyberDefender - WireDive Lab</a></p><p>在 https.pcap 題目組底下的問題會需要先匯入加解密key 才能回答</p><p>首先先看一下原本加密過後的樣子</p><p><img src="/assets/3rXSAIopoocNAvtVDzzctTj5X9hm0JhZHcO5-i4gu-U=.png"></p><p>題目有提供解密的key </p><p><img src="/assets/EY4dTiYlp5mig0M30KBOHHoUCHfGxAa7Bzx-ppyk3kc=.png"></p><p>接下來將這個檔案匯入到wireshark 當中</p><p><img src="/assets/D4ilH3Dc85XfxfCIv41WPnC3Y9CcxtoPs7qrVjOifos=.png"></p><p>OK 之後就可以看到解密過後的封包內容並且也跑出了HTTP2</p><p><img src="/assets/3AYASExUaD5r4And5rGCmhGYg2eO2SqDrTuWxIXNtyY=.png"></p><p>另外wireshark 支援的解密為</p><ol><li><strong>SSL&#x2F;TLS解密</strong>：最常見的HTTPS流量解密</li><li><strong>WEP&#x2F;WPA&#x2F;WPA2解密</strong>：WiFi加密流量</li><li><strong>IPsec解密</strong>：VPN流量</li><li><strong>Kerberos解密</strong>：Windows認證流量</li><li><strong>自定義加密</strong>：透過Lua腳本支援</li></ol><hr><h1 id="📦-匯出物件"><a href="#📦-匯出物件" class="headerlink" title="📦 匯出物件"></a>📦 匯出物件</h1><p>wireshark 提供了可以將封包傳輸的物件(如：圖片、檔案、網頁……) dump 下來的功能</p><p><img src="/assets/3ddxe9oKXt86KtV1SU35U9aQ4UFkfBXaD7uXQ3UaAbA=.png"></p><p>例子：<a href="https://cyberdefenders.org/blueteam-ctf-challenges/solardisruption/">CyberDefender-</a><strong><a href="https://cyberdefenders.org/blueteam-ctf-challenges/solardisruption/">SolarDisruption Lab</a></strong></p><p>這個題目其中有一題問：</p><blockquote><p>Q10 The PLC’s configuration webserver enables engineers to configure and monitor various parameters of the PLC device. This access can also allow an attacker to identify the I&#x2F;O points or the registers&#x2F;coils numbers and their mappings. How many I&#x2F;O points were in use on the PLC?</p></blockquote><p>而這題的解法會需要把整個網站檔案都載下來查看才會得知</p><p><img src="/assets/ss49Kd80lpo7W22MLHwdRQf3jPcnbcmACWlBz01R1Nc=.png"></p><p>接下來按Save all 後選擇其中一個資料夾放所有Object </p><p><img src="/assets/1j_cxT6Bqc47dU8b26jm1am1Qw4nZcqCwNLTLpSUQeU=.png"></p><p>去到那個資料夾後會看到所有的東西都存在裡面了</p><p><img src="/assets/G7vhR5BVsvLM6slvFAU79KvycpYMD767Mk4KclH-thI=.png"></p><p>點開dashboard.html後發現會正常顯示當時網頁的dashboard 頁面</p><p><img src="/assets/3opa4X8R6u1a5dbtiTWgHkni3DeYiQMYIVUBrkJGGrc=.png"></p><p>點開Monitoring 後即可回答答案</p><p><img src="/assets/hsdRZ8vGbIApQpcWw_b3szwFn4xe8oEzoUq6ox9PWQM=.png"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>今天介紹了兩個特別的功能，當初接觸到的時候有被驚艷到，Wireshark 的功能真的挺強大的，接下來會介紹其他Network fornesic 工具</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark </tag>
            
            <tag> Network Forensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🦈</title>
      <link href="/2025/09/29/Wireshark/"/>
      <url>/2025/09/29/Wireshark/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天會分享什麼是Network Forensic，以及經典分析工具Wireshark的使用</p><hr><h1 id="🛜-Network-Forensic"><a href="#🛜-Network-Forensic" class="headerlink" title="🛜 Network Forensic"></a>🛜 Network Forensic</h1><p>首先講一下什麼是封包，封包是網路通訊的基本單位，就像郵件一樣。當你在網路上傳送資料時，這些資料不會一次全部送出去，而是被切割成很多小塊，每一塊就是一個封包。比如說，當你下載一個1MB的檔案時，這個檔案會被切割成幾千個封包，每個封包大約1500位元組左右。每個封包都有固定的結構，就像信封一樣。</p><p>封包的最外層是標頭（Header），裡面包含了這個封包要去哪裡、從哪裡來、用什麼方式傳送等資訊。標頭裡最重要的資訊包括：</p><ul><li><strong>來源IP位址</strong>：這個封包是從哪台電腦送出來的</li><li><strong>目標IP位址</strong>：這個封包要送到哪台電腦</li><li><strong>協定類型</strong>：這個封包使用什麼通訊協定（HTTP、HTTPS、FTP等）</li><li><strong>時間戳記</strong>：這個封包是什麼時候產生的</li><li><strong>封包大小</strong>：這個封包有多大</li><li><strong>序號</strong>：這個封包在整個資料流中的位置</li></ul><p>封包的內容部分（Payload）則是實際要傳送的資料。比如說，如果你在瀏覽網頁，HTTP封包的內容就是網頁的HTML程式碼。如果你在登入網站，封包的內容可能包含你的帳號密碼。</p><p><img src="/assets/b97gLrlgcv1usSzdq-JWxlG0a0ninhlWRadfFBadf8g=.png"></p><p><code>source : https://webhostinggeeks.com/blog/what-is-data-packet/</code></p><p>網路層面追蹤和分析資料傳輸的過程。當網路攻擊發生時，攻擊者會在網路中留下痕跡，這些痕跡就記錄在網路封包裡。Network Forensic 就是找出攻擊者是怎麼進來的、做了什麼、拿走了什麼資料</p><p>常見的網路鑑識工具是Wireshark</p><hr><h1 id="🦈-Wireshark"><a href="#🦈-Wireshark" class="headerlink" title="🦈 Wireshark"></a>🦈 Wireshark</h1><p>下載連結：<a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p>Wireshark是目前最受歡迎的開源網路協定分析器。這款功能強大的軟體不僅能夠即時監控網路流量，更能深入分析各種網路協定的詳細內容，為網路故障排除、協定開發和安全分析提供全方位的支援，另外也能夠識別和解析超過2000種不同的網路協定，從常見的TCP&#x2F;IP協定族到專用的工業控制協定，幾乎涵蓋了所有可能遇到的網路通訊場景。這種全面的協定支援不僅包括即時協定解析，還允許用戶根據需要添加自定義協定支援。</p><p>下載後打開主頁會有兩個部分，第一個是 open，另一個是 Capture</p><ul><li>open 是開啟已經錄好的 pcap 檔</li><li>Capture 是可以選擇你的網卡，點進去後可以開始抓封包</li></ul><p><img src="/assets/b6EW4dgBH6-Vezc9bkG5ui2GbZr68QxayKMvEpv53tE=.png"></p><p>假設我們打開了一個錄好的 pcap 封包</p><p><img src="/assets/1qX2ViLKOm5_QxrvpdRWjxU3u05hPTe7El2vWQFO6No=.png"></p><h2 id="中間主視窗"><a href="#中間主視窗" class="headerlink" title="中間主視窗"></a>中間主視窗</h2><p>顯示抓到的所有封包</p><p>•No.：封包編號（依捕獲順序）</p><p>•Time：相對於第一個封包的時間戳記</p><p>•Source：封包來源 IP</p><p>•Destination：封包目的 IP</p><p>•Protocol：協定類型（如 TCP、HTTP、SSH）</p><p>•Length：封包大小（bytes）</p><p>•Info：協定的摘要資訊（像是 TCP 的 SYN&#x2F;ACK、HTTP 的 GET 請求等等</p><p>中間封包的顏色也會根據不同的 protocol 或狀態更改顏色 </p><p><img src="/assets/Sk5dWFvQR_SCOx_aoPZkaC4gpm9J67Yhotddqr1L-mM=.png"></p><h2 id="左下方視窗"><a href="#左下方視窗" class="headerlink" title="左下方視窗"></a>左下方視窗</h2><p>顯示選中封包的協定分層解析</p><p>•Frame：物理層資訊（長度、介面等）</p><p>•Ethernet &#x2F; Data-link 層（此例省略，因為用 utun8 介面抓）</p><p>•Internet Protocol Version 4 (IPv4)：來源 IP 100.112.165.2 → 目的 IP 192.168.1.125</p><p>•TCP：來源埠 60665 → 目的埠 5000，Seq &#x2F; Ack &#x2F; WinSize 等控制資訊</p><p>•HTTP：協定層解析到 GET &#x2F; HTTP&#x2F;1.1</p><h2 id="右下方視窗"><a href="#右下方視窗" class="headerlink" title="右下方視窗"></a>右下方視窗</h2><p>以十六進制（左半邊）+ ASCII（右半邊）顯示原始封包內容。</p><hr><p>另外也可以對選中的封包按右鍵，使用其他功能，除了 copy 之後還可以 follow。</p><p><img src="/assets/QY-EQZJMkEyHF8FFoUi1N3LXDcd1ydgpLgXGICT8HjQ=.png"></p><p>follow 的功能是將一個 TCP 連線裡的 HTTP 封包資料串起來，可以看到完整的瀏覽器請求或伺服器回應</p><p><img src="/assets/HUMkwZM-FQaDF63u8o94ACLKpYvWuw5rwxU9XbcD5tI=.png"></p><hr><p>另外最上方有一個 Statistic 可以選，它會幫你整理一些資訊並統計</p><p><img src="/assets/S56NHuYS5NMQrQU_pjvvQb1Y2kUALT9vC8yZL4ODYis=.png"></p><p>這邊介紹幾個常用功能</p><h2 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h2><p>這裡可以看到 Wireshark 統計的所有兩個 IP 地址之間的傳輸狀況</p><p><img src="/assets/jSWnSFdc5hkpW1oaY6wC88ZqfXCXAhkA-aKTyF1MmuA=.png"></p><h2 id="Path-length"><a href="#Path-length" class="headerlink" title="Path length"></a>Path length</h2><p>這邊可以看到封包長度的統計</p><p><img src="/assets/i4NR_mBwxqb7XN0ldbpK3FH9kOhZX0TeNF9V8DwNaQQ=.png"></p><h2 id="Protocol-Hierarchy"><a href="#Protocol-Hierarchy" class="headerlink" title="Protocol Hierarchy"></a>Protocol Hierarchy</h2><p>這邊會看到所有封包協定的統計結果</p><p><img src="/assets/A-yURmMM36hnnwHZPVkuBjJnRXHIYXXWqbmzXKoJ_7I=.png"></p><hr><p>除此之外，Wireshark 提供了 filter 的功能，可以快速過濾出想要看的封包</p><p><img src="/assets/Pa8-siGHwexyA9rXbQyPRcMA-_VJ_It7Sp41jbj-KvQ=.png"></p><p>這邊整理了一些基本 filter 語法</p><pre class="line-numbers language-none"><code class="language-none"># 特定IP位址ip.addr &#x3D;&#x3D; 192.168.1.1# 來源IPip.src &#x3D;&#x3D; 192.168.1.1# 目標IPip.dst &#x3D;&#x3D; 192.168.1.1# IP範圍ip.addr &gt;&#x3D; 192.168.1.1 and ip.addr &lt;&#x3D; 192.168.1.100# 網段ip.addr &#x3D;&#x3D; 192.168.1.0&#x2F;24# 特定埠號tcp.port &#x3D;&#x3D; 80udp.port &#x3D;&#x3D; 53# 來源埠tcp.srcport &#x3D;&#x3D; 22# 目標埠tcp.dstport &#x3D;&#x3D; 443# 埠範圍tcp.port &gt;&#x3D; 8000 and tcp.port &lt;&#x3D; 9000# 基本協定tcpudpicmphttphttpsdnssshftp# 組合協定tcp and httpudp and dns# HTTP請求方法http.request.method &#x3D;&#x3D; &quot;GET&quot;http.request.method &#x3D;&#x3D; &quot;POST&quot;http.request.method &#x3D;&#x3D; &quot;PUT&quot;# HTTP狀態碼http.response.code &#x3D;&#x3D; 200http.response.code &gt;&#x3D; 400# HTTP主機http.host &#x3D;&#x3D; &quot;example.com&quot;# HTTP URIhttp.request.uri contains &quot;login&quot;http.request.uri contains &quot;admin&quot;# 特定時間範圍frame.time &gt;&#x3D; &quot;2024-01-01 10:00:00&quot;frame.time &lt;&#x3D; &quot;2024-01-01 11:00:00&quot;# 相對時間frame.time &gt;&#x3D; &quot;2024-01-01 10:00:00&quot; and frame.time &lt;&#x3D; &quot;2024-01-01 10:30:00&quot;# 封包大小frame.len &gt; 1000frame.len &lt; 100# 資料長度tcp.len &gt; 500udp.length &gt; 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>今天介紹了什麼是 Network Forensic，以及 Wireshark 的使用，Wireshark 的功能還有很多，接下來幾天也會介紹一些其他的工具或者 Wireshark 的其他功能。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網路鑑識 </tag>
            
            <tag> Wireshark </tag>
            
            <tag> Network Forensic </tag>
            
            <tag> 封包分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁資訊大補帖-圖解講義</title>
      <link href="/2025/09/28/OSINT_domain/"/>
      <url>/2025/09/28/OSINT_domain/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天要分享的是 OSINT 當中對網站或 domain 進行資料的收集，在平常打網頁漏洞或者滲透測試時也會需要先對這個網站進行一些偵查找出可以突破的入口，今天會分享一些平常會使用到的工具</p><hr><h1 id="WaybackMachine"><a href="#WaybackMachine" class="headerlink" title="WaybackMachine"></a>WaybackMachine</h1><p>網站連結：<a href="http://web.archive.org/">http://web.archive.org/</a></p><p>這個網站是由 Internet Archive 維護的一個線上服務。它可以定期將網站的網頁內容 snapshot 存檔，讓人們能夠查看某個網站在過去不同時間點的樣子</p><p>例如我想要看一下 <a href="https://yunshiuan.com/">https://yunshiuan.com/</a> 網站之前的樣子，就可以將網址輸入進去後看看。</p><p><img src="/assets/1XCkWh3EsZrt_VK1tm_gQRoafiqcVr9vfBjomnlVdBQ=.png"></p><p>發現它在 8&#x2F;15 有被打了一個 snapshot，點進去看看後就可以看到在 8&#x2F;15 這個網頁時的樣子</p><p><img src="/assets/DgnhK5fhsurE8l2P3XwB4UKENppv9MiZ4XfVIDMUv1o=.png"></p><hr><h1 id="Recon-ng"><a href="#Recon-ng" class="headerlink" title="Recon-ng"></a>Recon-ng</h1><p>下載方式</p><pre class="line-numbers language-none"><code class="language-none">apt-get update &amp;&amp; apt-get install recon-ng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Recon-ng 是一個用 Python 寫成、以模組化、指令列互動介面為設計的 OSINT 收集框架。它把各類資訊收集功能（DNS、WHOIS、搜尋引擎、API 查詢等）包成「模組」，用戶可以在工作區（workspace）中逐步執行、存檔與匯出調查結果</p><p>Recon-ng  的 tutorial 連結： <a href="https://hackertarget.com/recon-ng-tutorial/">https://hackertarget.com/recon-ng-tutorial/</a> </p><p>整體的操作會類似於 Metasploit，一樣會先引入模組，設定參數然後執行</p><p>直接執行 <code>recon-ng</code> 後可以使用 <code>marketplace search</code> 查看有什麼可以用的 modules</p><pre class="line-numbers language-none"><code class="language-none">$ [recon-ng][default] &gt; marketplace search  +--------------------------------------------------------------------------------------------------+  |                        Path                       | Version |     Status    |  Updated   | D | K |  +--------------------------------------------------------------------------------------------------+  | discovery&#x2F;info_disclosure&#x2F;cache_snoop             | 1.1     | not installed | 2020-10-13 |   |   |  | discovery&#x2F;info_disclosure&#x2F;interesting_files       | 1.2     | not installed | 2021-10-04 |   |   |  | exploitation&#x2F;injection&#x2F;command_injector           | 1.0     | not installed | 2019-06-24 |   |   |  | exploitation&#x2F;injection&#x2F;xpath_bruter               | 1.2     | not installed | 2019-10-08 |   |   |  | import&#x2F;csv_file                                   | 1.1     | not installed | 2019-08-09 |   |   |  | import&#x2F;list                                       | 1.1     | not installed | 2019-06-24 |   |   |  | import&#x2F;masscan                                    | 1.0     | not installed | 2020-04-07 |   |   |  | import&#x2F;nmap                                       | 1.1     | not installed | 2020-10-06 |   |   |  | recon&#x2F;companies-contacts&#x2F;bing_linkedin_cache      | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;companies-contacts&#x2F;censys_email_address     | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;companies-contacts&#x2F;pen                      | 1.1     | not installed | 2019-10-15 |   |   |  | recon&#x2F;companies-domains&#x2F;censys_subdomains         | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;companies-domains&#x2F;pen                       | 1.1     | not installed | 2019-10-15 |   |   |  | recon&#x2F;companies-domains&#x2F;viewdns_reverse_whois     | 1.1     | not installed | 2021-08-24 |   |   |  | recon&#x2F;companies-domains&#x2F;whoxy_dns                 | 1.1     | not installed | 2020-06-17 |   | * |  | recon&#x2F;companies-multi&#x2F;censys_org                  | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;companies-multi&#x2F;censys_tls_subjects         | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;companies-multi&#x2F;github_miner                | 1.1     | not installed | 2020-05-15 |   | * |  | recon&#x2F;companies-multi&#x2F;shodan_org                  | 1.1     | not installed | 2020-07-01 | * | * |  | recon&#x2F;companies-multi&#x2F;whois_miner                 | 1.1     | not installed | 2019-10-15 |   |   |  | recon&#x2F;contacts-contacts&#x2F;abc                       | 1.0     | not installed | 2019-10-11 | * |   |  | recon&#x2F;contacts-contacts&#x2F;mailtester                | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;contacts-contacts&#x2F;mangle                    | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;contacts-contacts&#x2F;unmangle                  | 1.1     | not installed | 2019-10-27 |   |   |  | recon&#x2F;contacts-credentials&#x2F;hibp_breach            | 1.2     | not installed | 2019-09-10 |   | * |  | recon&#x2F;contacts-credentials&#x2F;hibp_paste             | 1.1     | not installed | 2019-09-10 |   | * |  | recon&#x2F;contacts-domains&#x2F;censys_email_to_domains    | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;contacts-domains&#x2F;migrate_contacts           | 1.1     | not installed | 2020-05-17 |   |   |  | recon&#x2F;contacts-profiles&#x2F;fullcontact               | 1.1     | not installed | 2019-07-24 |   | * |  | recon&#x2F;credentials-credentials&#x2F;adobe               | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;credentials-credentials&#x2F;bozocrack           | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;credentials-credentials&#x2F;hashes_org          | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;domains-companies&#x2F;censys_companies          | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;domains-companies&#x2F;pen                       | 1.1     | not installed | 2019-10-15 |   |   |  | recon&#x2F;domains-companies&#x2F;whoxy_whois               | 1.1     | not installed | 2020-06-24 |   | * |  | recon&#x2F;domains-contacts&#x2F;hunter_io                  | 1.3     | not installed | 2020-04-14 |   | * |  | recon&#x2F;domains-contacts&#x2F;metacrawler                | 1.1     | not installed | 2019-06-24 | * |   |  | recon&#x2F;domains-contacts&#x2F;pen                        | 1.1     | not installed | 2019-10-15 |   |   |  | recon&#x2F;domains-contacts&#x2F;pgp_search                 | 1.4     | not installed | 2019-10-16 |   |   |  | recon&#x2F;domains-contacts&#x2F;whois_pocs                 | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-contacts&#x2F;wikileaker                 | 1.0     | not installed | 2020-04-08 |   |   |  | recon&#x2F;domains-domains&#x2F;brute_suffix                | 1.1     | not installed | 2020-05-17 |   |   |  | recon&#x2F;domains-hosts&#x2F;binaryedge                    | 1.2     | not installed | 2020-06-18 |   | * |  | recon&#x2F;domains-hosts&#x2F;bing_domain_api               | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;domains-hosts&#x2F;bing_domain_web               | 1.1     | not installed | 2019-07-04 |   |   |  | recon&#x2F;domains-hosts&#x2F;brute_hosts                   | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-hosts&#x2F;builtwith                     | 1.1     | not installed | 2021-08-24 |   | * |  | recon&#x2F;domains-hosts&#x2F;censys_domain                 | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;domains-hosts&#x2F;certificate_transparency      | 1.3     | not installed | 2019-09-16 |   |   |  | recon&#x2F;domains-hosts&#x2F;google_site_web               | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-hosts&#x2F;hackertarget                  | 1.1     | installed     | 2020-05-17 |   |   |  | recon&#x2F;domains-hosts&#x2F;mx_spf_ip                     | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-hosts&#x2F;netcraft                      | 1.1     | not installed | 2020-02-05 |   |   |  | recon&#x2F;domains-hosts&#x2F;shodan_hostname               | 1.1     | not installed | 2020-07-01 | * | * |  | recon&#x2F;domains-hosts&#x2F;spyse_subdomains              | 1.1     | not installed | 2021-08-24 |   | * |  | recon&#x2F;domains-hosts&#x2F;ssl_san                       | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-hosts&#x2F;threatcrowd                   | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-hosts&#x2F;threatminer                   | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;domains-vulnerabilities&#x2F;ghdb                | 1.1     | not installed | 2019-06-26 |   |   |  | recon&#x2F;domains-vulnerabilities&#x2F;xssed               | 1.1     | not installed | 2020-10-18 |   |   |  | recon&#x2F;hosts-domains&#x2F;migrate_hosts                 | 1.1     | not installed | 2020-05-17 |   |   |  | recon&#x2F;hosts-hosts&#x2F;bing_ip                         | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;hosts-hosts&#x2F;censys_hostname                 | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;hosts-hosts&#x2F;censys_ip                       | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;hosts-hosts&#x2F;censys_query                    | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;hosts-hosts&#x2F;ipinfodb                        | 1.2     | not installed | 2021-08-24 |   | * |  | recon&#x2F;hosts-hosts&#x2F;ipstack                         | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;hosts-hosts&#x2F;resolve                         | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;hosts-hosts&#x2F;reverse_resolve                 | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;hosts-hosts&#x2F;ssltools                        | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;hosts-hosts&#x2F;virustotal                      | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;hosts-locations&#x2F;migrate_hosts               | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;hosts-ports&#x2F;binaryedge                      | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;hosts-ports&#x2F;shodan_ip                       | 1.2     | not installed | 2020-07-01 | * | * |  | recon&#x2F;locations-locations&#x2F;geocode                 | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;locations-locations&#x2F;reverse_geocode         | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;locations-pushpins&#x2F;flickr                   | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;locations-pushpins&#x2F;shodan                   | 1.1     | not installed | 2020-07-07 | * | * |  | recon&#x2F;locations-pushpins&#x2F;twitter                  | 1.1     | not installed | 2019-10-17 |   | * |  | recon&#x2F;locations-pushpins&#x2F;youtube                  | 1.2     | not installed | 2020-09-02 |   | * |  | recon&#x2F;netblocks-companies&#x2F;censys_netblock_company | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;netblocks-companies&#x2F;whois_orgs              | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;netblocks-hosts&#x2F;censys_netblock             | 2.1     | not installed | 2022-01-31 | * | * |  | recon&#x2F;netblocks-hosts&#x2F;reverse_resolve             | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;netblocks-hosts&#x2F;shodan_net                  | 1.2     | not installed | 2020-07-21 | * | * |  | recon&#x2F;netblocks-hosts&#x2F;virustotal                  | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;netblocks-ports&#x2F;census_2012                 | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;netblocks-ports&#x2F;censysio                    | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;ports-hosts&#x2F;migrate_ports                   | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;ports-hosts&#x2F;ssl_scan                        | 1.1     | not installed | 2021-08-24 |   |   |  | recon&#x2F;profiles-contacts&#x2F;bing_linkedin_contacts    | 1.2     | not installed | 2021-08-24 |   | * |  | recon&#x2F;profiles-contacts&#x2F;dev_diver                 | 1.1     | not installed | 2020-05-15 |   |   |  | recon&#x2F;profiles-contacts&#x2F;github_users              | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;profiles-profiles&#x2F;namechk                   | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;profiles-profiles&#x2F;profiler                  | 1.2     | not installed | 2023-12-30 |   |   |  | recon&#x2F;profiles-profiles&#x2F;twitter_mentioned         | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;profiles-profiles&#x2F;twitter_mentions          | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;profiles-repositories&#x2F;github_repos          | 1.1     | not installed | 2020-05-15 |   | * |  | recon&#x2F;repositories-profiles&#x2F;github_commits        | 1.0     | not installed | 2019-06-24 |   | * |  | recon&#x2F;repositories-vulnerabilities&#x2F;gists_search   | 1.0     | not installed | 2019-06-24 |   |   |  | recon&#x2F;repositories-vulnerabilities&#x2F;github_dorks   | 1.0     | not installed | 2019-06-24 |   | * |  | reporting&#x2F;csv                                     | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;html                                    | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;json                                    | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;list                                    | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;proxifier                               | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;pushpin                                 | 1.0     | not installed | 2019-06-24 |   | * |  | reporting&#x2F;xlsx                                    | 1.0     | not installed | 2019-06-24 |   |   |  | reporting&#x2F;xml                                     | 1.1     | not installed | 2019-06-24 |   |   |  +--------------------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來示範用 <code>hackertarget</code> 去尋找 hostname</p><p>首先先把 <code>hackertarget</code> 先下載下來</p><pre class="line-numbers language-none"><code class="language-none">marketplace install hackertarget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再把它 load 進來</p><pre class="line-numbers language-none"><code class="language-none">modules load hackertarget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下來用 info 看一下會需要什麼參數</p><pre class="line-numbers language-none"><code class="language-none">$ [recon-ng][default][hackertarget] &gt; info      Name: HackerTarget Lookup    Author: Michael Henriksen (@michenriksen)   Version: 1.1Description:  Uses the HackerTarget.com API to find host names. Updates the &#39;hosts&#39; table with the results.Options:  Name    Current Value  Required  Description  ------  -------------  --------  -----------  SOURCE                 yes       source of input (see &#39;info&#39; for details)Source Options:  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL  &lt;string&gt;       string representing a single input  &lt;path&gt;         path to a file containing a list of inputs  query &lt;sql&gt;    database query returning one column of inputs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來可以看到 SOURCE 會需要填東西，那這欄就是要填要偵查的 domain，以 <code>google.com</code> 舉例。</p><p>用下面指令設定 SOURCE</p><pre class="line-numbers language-none"><code class="language-none">options set SOURCE google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再看一次 info，可以看到它被設定成了 <code>google.com</code> </p><pre class="line-numbers language-none"><code class="language-none">$ [recon-ng][default][hackertarget] &gt; info      Name: HackerTarget Lookup    Author: Michael Henriksen (@michenriksen)   Version: 1.1Description:  Uses the HackerTarget.com API to find host names. Updates the &#39;hosts&#39; table with the results.Options:  Name    Current Value  Required  Description  ------  -------------  --------  -----------  SOURCE  google.com     yes       source of input (see &#39;info&#39; for details)Source Options:  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL  &lt;string&gt;       string representing a single input  &lt;path&gt;         path to a file containing a list of inputs  query &lt;sql&gt;    database query returning one column of inputs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來打 run 就會開始執行</p><p>執行的過程中也會出現結果，最後在下 <code>show hosts</code> 指令就會出現表格樣式的結果</p><p><img src="/assets/svj4PUeEf1nUKpRCQjze7nr5oPS1zt2QQ496e2hZ8sw=.png"></p><hr><h1 id="Whois-domaintools"><a href="#Whois-domaintools" class="headerlink" title="Whois.domaintools"></a>Whois.domaintools</h1><p>網站連結：<a href="https://whois.domaintools.com/">https://whois.domaintools.com/</a></p><p>這個網站可以找到關於 domain 的一些資訊，包括註冊商、何時註冊、何時到期與最後更新時間等等</p><p><img src="/assets/TBoAsZNRu4upfnloA9-lYEkUGjBbWF1mTuprg7Q2T_4=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了幾個可以得知網站 domain 上一些資訊的工具，幫助我們在之後需要對網站進行滲透測試或者當作線索都有幫助。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSINT </tag>
            
            <tag> 網路偵查 </tag>
            
            <tag> 網站分析 </tag>
            
            <tag> 域名資訊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在GEOGUESSER 當個 Cheater</title>
      <link href="/2025/09/27/OSINT-GEO/"/>
      <url>/2025/09/27/OSINT-GEO/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天要分享的是 OSINT 當中非常常出現的看圖片猜地方的，身為對地理一竅不通的我，非常需要很多的工具幫助我去分析各種資訊，而這類問題有一個還蠻廣為人知的遊戲，叫做 <a href="https://www.geoguessr.com/">GEOGUESSER</a>，它會隨機把你放在一個地點，你要靠自己發現說這裡是哪裡，有興趣可以去玩玩看，裡面有很多不同模式。</p><p><img src="/assets/aRw5hJ4AYt6oTv4PJFBjtflN0dsH4NhjE5pF0rqShN4=.png"></p><p><code>source : GeoGuessr Steam Edition</code></p><p>而在 CTF 版的 GeoGuessr 因為不用在短時間內就需要知道地點，並且可能會需要非常精確的位置才會拿到 flag，另外 GeoGuessr 會限制玩家不能查任何資料。</p><p>而遇到關於這樣的 OSINT 題目，如果只用 Google Map 硬查會沒有效率，因此如果有工具幫助的話會輕鬆很多，所以今天的內容是分享關於這類的工具</p><hr><h2 id="Google-Map-Google-Earth"><a href="#Google-Map-Google-Earth" class="headerlink" title="Google Map &#x2F; Google Earth"></a>Google Map &#x2F; Google Earth</h2><p>Google 地圖是 Google 提供的網路地圖服務，這個服務提供了多種視圖模式，包括衛星圖、街道圖和地形圖，讓用戶可以根據需求選擇最適合的視角來查看地圖</p><p><img src="/assets/AM7XkPseqHtJ64J0lHNKzlYK_NjHdww-qvZ-EDJlbQY=.png"></p><p>Google Earth 是一個更進階的 3D 地球瀏覽器，讓用戶能夠以立體的方式探索世界。歷史影像功能讓用戶可以查看不同時期的衛星影像，觀察城市的發展變化，而街景整合功能則在 3D 環境中嵌入了街景視圖，並且可以匯入 KML 檔</p><p><img src="/assets/Nqm0R92EVsQ60NoKlkI9vqtx9kdYYYIJFoBYZhEUTA0=.png"></p><hr><h2 id="Google-智慧鏡頭"><a href="#Google-智慧鏡頭" class="headerlink" title="Google 智慧鏡頭"></a>Google 智慧鏡頭</h2><p>Google 智慧鏡頭是一個基於 AI 的視覺搜尋工具，你可以把你想要辨識的圖片丟進去，它會把網路上類似的圖片丟給你</p><p>在搜尋列就可以找到智慧鏡頭的 icon</p><p><img src="/assets/jZWhq_f9A2B3eBaFBL80Oolkc6_952uiK4kCQq7InJ0=.png"></p><p>點擊後把圖片丟進去它就會幫你查有沒有類似的圖片</p><p><img src="/assets/kKnQobr1ng3IbFvcC_9I5sWMSVUr-T2nkvQ_24bhC3M=.png"></p><hr><h1 id="Geohints"><a href="#Geohints" class="headerlink" title="Geohints"></a>Geohints</h1><p>網站連結：<a href="https://geohints.com/">https://geohints.com/</a></p><p>這個網站整理了很多每個國家的 Google 街景具有特色的部分，像是車牌、道路、電線竿、標誌等照片，如果遇到沒看過的都可以來這邊查</p><p><img src="/assets/hvedPNXTINc-yVUpWuTxXMSQBGihsp3dkifiHQYigmk=.png"></p><hr><h1 id="Overpass-turbo"><a href="#Overpass-turbo" class="headerlink" title="Overpass turbo"></a>Overpass turbo</h1><p>網址：<a href="https://overpass-turbo.eu/">https://overpass-turbo.eu/</a></p><p>Overpass Turbo 是一個基於網頁的查詢工具，專門用於查詢 OpenStreetMap 資料庫。它提供了一個直觀的介面，讓用戶能夠使用 Overpass QL 查詢語言來搜尋和提取 OSM 中的地理資料。</p><p>而 <a href="https://www.openstreetmap.org/#map=12/56.4984/16.6010">OpenStreetMap</a> 是世界上最大的開放地理資料庫，包含了全球各地的道路、建築物、興趣點等詳細資訊。</p><p><img src="/assets/OCrdN1c5cGeTKK0BCCkvA-6cWK104_wpnCDz_fT2D5s=.png"></p><p>接下來介紹一下要怎麼使用Overpass QL 查詢我們想要的東西。</p><p>首先是 OSM 的資料結構，它使用節點 (nodes)、路徑 (ways) 和關係 (relations) 三種基本元素來描述地理物件：</p><ul><li><strong>節點 (Nodes)</strong>：代表點狀物件，如商店或地標</li><li><strong>路徑 (Ways)</strong>：代表線狀或面狀物件，如道路或建築物</li><li><strong>關係 (Relations)</strong>：用於描述複雜的物件，如多個部分組成的建築物群</li></ul><p>最基本的查詢以 <code>[out:json];</code> 開始，這指定了輸出格式。接著使用 <code>node</code>、<code>way</code> 或 <code>relation</code> 來指定要查詢的物件類型，而<code>nwr</code>則可以將三者都包含，然後在方括號中指定搜尋條件，關於搜尋條件的所有的key 跟value 都可以在這邊查到 <a href="https://wiki.openstreetmap.org/wiki/Map/_features">https://wiki.openstreetmap.org/wiki/Map\_features</a> 。</p><p>像圖示中是L3akCTF 2025的其中一題<a href="https://medium.com/@shibaosint/l3akctf-2025-fidget-spinner-writeup-cd94eafc2828">Fidget Spinner</a>我們想要找在厄蘭島上所有的風車地點，可以這樣寫</p><pre class="line-numbers language-none"><code class="language-none">[out:json][timeout:25];&#x2F;&#x2F;restrict our search to the islandarea[name&#x3D;&quot;Öland&quot;];(  &#x2F;&#x2F; search for windmills  nwr[&quot;man_made&quot;&#x3D;&quot;windmill&quot;](area); &#x2F;&#x2F;(area)的功能是限制在Öland地點上查詢);&#x2F;&#x2F; print resultsout geom;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之後出來的結果就會是這樣</p><p><img src="/assets/hLt5ujf8M4p8aGhdbo4CVsi7_xOwj5CBfN3zKMmBMMo=.png"></p><p>接下來它也可以匯出成 KML 檔，然後放到 Google Map &#x2F; Google Earth 上</p><p><img src="/assets/BoYcPTrtyYVX4YFzs6DzQ9bPESm3RDAuLS-dqbSBsUk=.png"></p><p>接下來就可以去一一驗證是否是題目想要的位置</p><p>另外也可以像這樣把想要的區域先匡起來然後查詢</p><p><img src="/assets/TEiO_tKmOGHWcEVH1ynu8k2Lze8ViVkW0SaFlpMOXQI=.png"></p><p><code>source : ``https://medium.com/@PretendNotToBe/ea6e8f3fb763</code></p><hr><h1 id="Exiftool"><a href="#Exiftool" class="headerlink" title="Exiftool"></a>Exiftool</h1><p>下載連結：<a href="https://exiftool.org/">https://exiftool.org/</a></p><p>它可以去看圖片的基本資料，例如圖片大小、修改時間等等，但它可以去看這張照片的拍攝地點在哪裡，並且會給你 GPS 定位。</p><p>舉個例子：<a href="https://drive.google.com/file/d/17rE9LAp7TNk8u09EwguZB3RQ4H3WNIMB/view">DownUnderCTF 2023 Excellent Vista!</a></p><p>下載之後用 exiftool 看一下</p><pre class="line-numbers language-none"><code class="language-none">$ exiftool ExcellentVista.jpgExifTool Version Number         : 13.10File Name                       : ExcellentVista.jpgDirectory                       : .File Size                       : 2.7 MBFile Modification Date&#x2F;Time     : 2025:09:23 15:41:41+08:00File Access Date&#x2F;Time           : 2025:09:23 15:41:45+08:00File Inode Change Date&#x2F;Time     : 2025:09:23 15:41:44+08:00File Permissions                : -rw-r--r--File Type                       : JPEGFile Type Extension             : jpgMIME Type                       : image&#x2F;jpegExif Byte Order                 : Big-endian (Motorola, MM)X Resolution                    : 72Y Resolution                    : 72Resolution Unit                 : inchesY Cb Cr Positioning             : CenteredDate&#x2F;Time Original              : 2023:08:31 22:58:56Create Date                     : 2023:08:31 22:58:56Sub Sec Time Original           : 00Sub Sec Time Digitized          : 00GPS Version ID                  : 2.3.0.0GPS Latitude Ref                : SouthGPS Longitude Ref               : EastGPS Altitude Ref                : Above Sea LevelGPS Speed Ref                   : km&#x2F;hGPS Speed                       : 0GPS Img Direction Ref           : True NorthGPS Img Direction               : 122.5013812GPS Dest Bearing Ref            : True NorthGPS Dest Bearing                : 122.5013812GPS Horizontal Positioning Error: 6.055886243 mPadding                         : (Binary data 2060 bytes, use -b option to extract)About                           : uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1bImage Width                     : 4032Image Height                    : 3024Encoding Process                : Baseline DCT, Huffman codingBits Per Sample                 : 8Color Components                : 3Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)Image Size                      : 4032x3024Megapixels                      : 12.2Create Date                     : 2023:08:31 22:58:56.00Date&#x2F;Time Original              : 2023:08:31 22:58:56.00GPS Altitude                    : 70.5 m Above Sea LevelGPS Latitude                    : 29 deg 30&#39; 34.33&quot; SGPS Longitude                   : 153 deg 21&#39; 34.46&quot; EGPS Position                    : 29 deg 30&#39; 34.33&quot; S, 153 deg 21&#39; 34.46&quot; E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後它提供了拍照的地點。</p><hr><h1 id="What3words"><a href="#What3words" class="headerlink" title="What3words"></a>What3words</h1><p>網站連結：<a href="https://what3words.com/">https://what3words.com/</a></p><p>這個網站可以只利用三個相關的詞彙去定位到想要的地點，因為有些地方會沒有地址，所以會需要靠這個方式定位</p><p>像是成功大學資訊系館是 <code>imported.dull.buns</code>，之後去這個網站查就一樣會定位到這邊</p><p><img src="/assets/tVfxyDKTRPL6hxH59oD19ORtuhNS5r4Y-V8fsrTCtn8=.png"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>今天介紹了一些輔助我們辨識圖片地點的工具，直接變成 GEOGUESSER 大師，但其實有些題目還會需要結合航班或者看太陽判斷南北向等等，可以出的線索都太廣了，因此這類題目可能會需要多多去練習才會熟練。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSINT </tag>
            
            <tag> 地理位置分析 </tag>
            
            <tag> GeoGuessr </tag>
            
            <tag> 圖片分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>開啟大肉搜時代</title>
      <link href="/2025/09/26/OSINT_user/"/>
      <url>/2025/09/26/OSINT_user/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天要介紹OSINT 中關於一個人的資訊要怎麼從公開平台中快速的被搜集，關於一個人的訊息，我們可以從他的用戶名、信箱、電話號碼…等等訊息下手，並搭配工具搜集資料，快速找到切入點，獲得到我們想要的訊息。</p><hr><h1 id="Sherlock"><a href="#Sherlock" class="headerlink" title="Sherlock"></a>Sherlock</h1><p>下載連結：<a href="https://github.com/sherlock-project/sherlock">https://github.com/sherlock-project/sherlock</a></p><p>這是一個可以快速搜尋各大平台用戶名的工具</p><p>假設今天我們獲得到了一個用戶叫做<code>yunshiuan</code> 接下來丟進sherlock</p><p><img src="/assets/Rf9_ZONhV5xhlOF3CzJfPYdew6Xk7vKZLSNlSOWvBJc=.png"></p><p>發現了跑出許多用戶名稱是yunshiuan 的平台，接下來就可以一一去看是不是自己想要的</p><hr><h1 id="HaveIBeenPwned"><a href="#HaveIBeenPwned" class="headerlink" title="HaveIBeenPwned"></a>HaveIBeenPwned</h1><p>連結：<a href="https://haveibeenpwned.com/">https://haveibeenpwned.com/</a></p><p>這是一個可以輸入信箱，他會說輸入的信箱是否已經被洩漏出去了</p><p>假設輸入一個大家在測試時很常輸入的<code>aaaaa@gmail.com</code></p><p><img src="/assets/YRv_jjfeqpWoNVRieLp2g4zT9Gl5_wRnteRh9wW8GYE=.png"></p><p>可以看到這個 email 在 20 多個平台被洩漏了，底下會跟你說是在何時因為什麼而被洩漏</p><p><img src="/assets/bfiSjA3fimrdDE8iTnRwjRZ3OuPwZ0oK4S-_tCSbWiU=.png"></p><hr><h1 id="Epieos"><a href="#Epieos" class="headerlink" title="Epieos"></a>Epieos</h1><p>網站連結：<a href="https://epieos.com/">https://epieos.com/</a></p><p>他提供了email與手機號碼的反向查詢，幫你把和該email &#x2F; phone 有關的社群帳號、Google 活動、評價、公開痕跡等串起來顯示，方便做初步調查或驗證線索</p><p><img src="/assets/9PHebz4gf0c55xyN-fS-TDK_HvYakSfp-GV0gIzMo_c=.png"></p><p>底下其實還有其他網站或者應用程式的掃描，但那些就會需要付費才能觀看</p><hr><h1 id="Phoneinfoga"><a href="#Phoneinfoga" class="headerlink" title="Phoneinfoga"></a>Phoneinfoga</h1><p>下載連結：<a href="https://github.com/sundowndev/phoneinfoga">https://github.com/sundowndev/phoneinfoga</a></p><p>這個工具可以查詢這個電話號碼的基本metadata</p><pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;phoneinfoga scan -n +886911111111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/d6GCUzEdKWX2Yyr2GDw1FAU4ikSOyZx1De-DMHItZZc=.png"></p><p>另外也可以用開server 的方式用網頁查詢</p><pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;phoneinfoga serve -p 8080Listening on :8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/assets/PxCHUVESvr-Z_zTZpqgN7nlQQxibied7gFqCAL27Y40=.png"></p><hr><h1 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h1><p>這是 Google 提供的進階搜尋法，它提供一些方式可以更準確地找到我們想要的資料或網站。</p><p>以下是常見的搜尋</p><p>•<code>site:domain.com</code> — 限定在某個網域搜尋，ex:<code>site:github.com</code>。</p><p>•<code>filetype:pdf / filetype:env / filetype:sql</code> — 找特定檔案類型。</p><p>•<code>inurl:admin / inurl:login</code> — URL 中含特定字串（找管理頁面）。</p><p>•<code>intitle:&quot;index of&quot;</code> — 找目錄列舉頁面（常暴露檔案列表）。</p><p>•<code>&quot;exact phrase&quot;</code> — 精確比對字串（例如機密檔名或參數名）。</p><p>•-（負號）排除字詞，ex: <code>site:example.com</code> <code>-site:blog.example.com</code>。</p><p>另外也可以用 <code>OR</code>、<code>+</code> 來串接多個進階搜尋結果</p><p><img src="/assets/DxLpxVnMZEKL_lROU9xsoRvZnZu_3iecohb79vO3gzU=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天分享了一些關於搜集個人資訊相關的工具或技巧，我個人認為關於這類的工具算是偏少，並且有些好用的都是要錢，因此還是比較常用瀏覽器直接去搜尋個人訊息。如果有碰到更好用或者功能更強大的工具歡迎跟我分享。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSINT </tag>
            
            <tag> 網路偵查 </tag>
            
            <tag> 使用者資訊 </tag>
            
            <tag> 個人資料收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>O熊學院準備開課了</title>
      <link href="/2025/09/25/OSINT/"/>
      <url>/2025/09/25/OSINT/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天要介紹一下什麼是 OSINT，我覺得 OSINT 並沒有想像中這麼簡單，除了需要對任何訊息都擁有很高的敏感度，也要了解很多工具的使用，因此趁這個機會跟大家分享，也是對我自己做一個筆記，<del>下次遇到 OSINT 題目就不會選擇直接放棄</del></p><hr><h1 id="😯-什麼是-OSINT？"><a href="#😯-什麼是-OSINT？" class="headerlink" title="😯 什麼是 OSINT？"></a>😯 什麼是 OSINT？</h1><p>OSINT 是指從公開可取得的資料來源收集、過濾、分析並應用於情報／調查／安全防禦的過程。這些資料來源可能是新聞媒體、政府資料、公眾報告、社交媒體貼文、論壇、學術研究、公開資料庫、專利／商標資訊、網域註冊資料、照片與影音 metadata 等</p><p>這邊簡單舉個例子：</p><p>Bob 一直覺得女友 Alice 有點怪，因為她說自己 3 月中跑去東京玩，還傳了幾張「在日本拍的」櫻花、神社跟街景照片給他看。</p><p>但是 Bob 心裡總覺得哪裡不對勁，所以就決定要尋找證據</p><p><strong>第一步：看照片的資訊</strong></p><p>Bob 把照片丟進工具一看，GPS 座標全部都在台北，像是大安森林公園、龍山寺、西門町。</p><p>另外時間顯示的是台灣時區 UTC+8，但如果真在東京，應該會是 UTC+9。</p><p><strong>第二步：看環境</strong></p><p>照片裡的櫻花一查公開的植物科普網站，竟然是台灣常見的「山櫻花」，而不是日本三月盛開的染井吉野。</p><p>背景還有榕樹跟鳳凰木，這些植物日本三月很少見。</p><p><strong>第三步：看建築</strong></p><p>Alice 說的「神社」照片，Bob 一看就覺得不對，上網查建築的資訊發現是台北龍山寺。屋頂是中式歇山頂，還有龍雕跟獅子，完全不是日式神社的鳥居跟簡潔風格。</p><p><strong>第四步：看社群紀錄</strong></p><p>Bob 又去翻 Alice 的 IG 定位跟 FB 打卡，全部都顯示她 3 月 15 號人在台北，沒有任何日本的蹤跡。</p><p><strong>最後結論：</strong></p><p>Alice 根本沒去日本，而是用台北拍的照片假裝在日本旅遊。Bob 靠公開資訊（GPS、植物、建築、社群紀錄）就把謊拆穿了，這就是常見的 OSINT。</p><p>因此在做 OSINT 時常常會需要涉及到其他領域的東西，例如：</p><ul><li><strong>航空領域</strong>：飛機航班資訊、機場代碼、飛行軌跡</li><li><strong>地理領域</strong>：地圖資訊、地標識別、天氣資料</li><li><strong>生物領域</strong>：植物識別、動物行為、生態環境</li></ul><p>每個人都有各自擅長的領域的話是 OK，但是通常都會是自己一個人需要去獲得各式各樣的資訊，所以需要工具去輔助 OSINT 的整個過程。</p><p>這邊有一個網站，名稱叫做 <a href="https://osintframework.com/">OSINT Framework</a>，它把所有 OSINT 的工具做了一個分類，遇到了不同類型的就可以到這邊查有什麼</p><p><img src="/assets/zYQ_R3gzcg-X3IVmzl4suvZ_54mlzbnb79u5JkXoW3c=.png"></p><p>目前以 CTF 來說，很常遇到以下三個題目</p><ol><li>給一個情境以及一個 username，要回答有關於這個 username 的線索，例如：USERNAME 的帳號密碼被洩漏了，請找出它是在哪裡洩漏的</li><li>給一張圖片，問這個地點在哪或者有關於圖片內相關的資訊</li><li>給一個組織或者某個企業的 domain，問一些相關的問題</li></ol><p>OSINT 也會伴隨一些通靈的成分，需要在腦中思考各種關聯，也會需要用到一些技巧，因此接下來幾天我想要研究的是 OSINT 的工具以及尋找線索的技巧。</p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了 OSINT 的概念，接下來幾天會分別以人的資訊、地點以及網站這三大分類分享一些工具的使用</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSINT </tag>
            
            <tag> 開源情報 </tag>
            
            <tag> 情報收集 </tag>
            
            <tag> 網路偵查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特別的圖片給特別的你</title>
      <link href="/2025/09/24/photoforensic/"/>
      <url>/2025/09/24/photoforensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>關於圖片類型的Forensic 如果出現在 CTF 上，<del>我都覺得是通靈題</del></p><p>所以只要遇到圖片的 forensic 題，我都會盡可能找可以無腦砸下去就可以解出來的工具，因此今天要來介紹幾個我覺得好用的圖片鑑識工具。</p><hr><h1 id="Zsteg"><a href="#Zsteg" class="headerlink" title="Zsteg"></a>Zsteg</h1><p>下載連結：<a href="https://github.com/zed-0xff/zsteg">https://github.com/zed-0xff/zsteg</a></p><p>專門針對 PNG 跟 BMP 做 steganography 探測。例如偵測 LSB 隱寫、ZLIB 壓縮後的隱藏資料、OpenStego、Camouflage 等格式。用於 CTF 隱藏資料快速找訊息</p><pre class="line-numbers language-none"><code class="language-none">$ zsteg -hUsage: zsteg [options] filename.png [param_string]    -a, --all                        try all known methods    -E, --extract NAME               extract specified payload, NAME is like &#39;1b,rgb,lsb&#39;Iteration&#x2F;extraction params:    -o, --order X                    pixel iteration order (default: &#39;auto&#39;)                                     valid values: ALL,xy,yx,XY,YX,xY,Xy,bY,...    -c, --channels X                 channels (R&#x2F;G&#x2F;B&#x2F;A) or any combination, comma separated                                     valid values: r,g,b,a,rg,bgr,rgba,r3g2b3,...    -b, --bits N                     number of bits, single int value or &#39;1,3,5&#39; or range &#39;1-8&#39;                                     advanced: specify individual bits like &#39;00001110&#39; or &#39;0x88&#39;        --lsb                        least significant bit comes first        --msb                        most significant bit comes first    -P, --prime                      analyze&#x2F;extract only prime bytes&#x2F;pixels        --shift N                    prepend N zero bits        --invert                     invert bits (XOR 0xff)        --pixel-align                pixel-align hidden dataAnalysis params:    -l, --limit N                    limit bytes checked, 0 &#x3D; no limit (default: 256)        --[no-]file                  use &#39;file&#39; command to detect data type (default: YES)        --no-strings                 disable ASCII strings finding (default: enabled)    -s, --strings X                  ASCII strings find mode: first, all, longest, none                                     (default: first)    -n, --min-str-len X              minimum string length (default: 8)    -v, --verbose                    Run verbosely (can be used multiple times)    -q, --quiet                      Silent any warnings (can be used multiple times)    -C, --[no-]color                 Force (or disable) color output (default: auto)PARAMS SHORTCUTzsteg fname.png 2b,b,lsb,xy  &#x3D;&#x3D;&gt;  --bits 2 --channel b --lsb --order xy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：<a href="https://play.picoctf.org/practice/challenge/305?assigned=0&bookmarked=0&category=4&originalEvent=70&page=1&search=&solved=0">Picoctf 2022 St3g0</a></p><p>直接把圖片用zsteg分析</p><pre class="line-numbers language-none"><code class="language-none">$ zsteg pico.flag.pngb1,r,lsb,xy         .. text: &quot;~__B&gt;wV_G@&quot;b1,rgb,lsb,xy       .. text: &quot;picoCTF&#123;7h3r3_15_n0_5p00n_96ae0ac1&#125;$t3g0&quot;b1,abgr,lsb,xy      .. text: &quot;E2A5q4E%uSA&quot;b2,b,lsb,xy         .. text: &quot;AAPAAQTAAA&quot;b2,b,msb,xy         .. text: &quot;HWUUUUUU&quot;b2,a,lsb,xy         .. file: Matlab v4 mat-file (little endian) &gt;&lt;�P, numeric, rows 0, columns 0b2,a,msb,xy         .. file: Matlab v4 mat-file (little endian) | &lt;�, numeric, rows 0, columns 0b3,r,lsb,xy         .. file: gfxboot compiled html help fileb4,r,lsb,xy         .. file: Targa image data (16-273) 65536 x 4097 x 1 +4352 +4369 - 1-bit alpha - right &quot;&quot;b4,g,lsb,xy         .. file: 0420 Alliant virtual executable not strippedb4,b,lsb,xy         .. file: Targa image data - Map 272 x 17 x 16 +257 +272 - 1-bit alpha &quot;&quot;b4,bgr,lsb,xy       .. file: Targa image data - Map 273 x 272 x 16 +1 +4113 - 1-bit alpha &quot;&quot;b4,rgba,lsb,xy      .. file: Novell LANalyzer capture fileb4,rgba,msb,xy      .. file: Applesoft BASIC program data, first line number 8b4,abgr,lsb,xy      .. file: Novell LANalyzer capture file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就直接得到了flag</p><hr><h1 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h1><p>下載連結：<a href="https://github.com/ReFirmLabs/binwalk">https://github.com/ReFirmLabs/binwalk</a></p><p>他可以分析圖片是否有隱藏的檔案，並將隱藏檔案塊挖出來。對於圖片裡面被 embed 的檔案或壓縮段非常方便。</p><p>例子：<a href="https://play.picoctf.org/practice/challenge/129">picoctf 2021 Matryoshka doll</a></p><p>這題下載後可以用binwalk 看看</p><pre class="line-numbers language-none"><code class="language-none">$ binwalk dolls.jpg                                                          &#x2F;Users&#x2F;yunshiuan&#x2F;lab&#x2F;dolls.jpg--------------------------------------------------------------------------------------------------------------------------------------------------DECIMAL                            HEXADECIMAL                        DESCRIPTION--------------------------------------------------------------------------------------------------------------------------------------------------0                                  0x0                                PNG image, total size: 272492 bytes272492                             0x4286C                            ZIP archive, file count: 1, total size: 379130 bytes--------------------------------------------------------------------------------------------------------------------------------------------------Analyzed 1 file for 85 file signatures (187 magic patterns) in 6.0 milliseconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>發現他裡面有zip 檔 可以把它extra 出來</p><pre class="line-numbers language-none"><code class="language-none">$ binwalk -e dolls.jpg                                                    &#x2F;Users&#x2F;yunshiuan&#x2F;lab&#x2F;extractions&#x2F;dolls.jpg--------------------------------------------------------------------------------------------------------------------------------------------------DECIMAL                            HEXADECIMAL                        DESCRIPTION--------------------------------------------------------------------------------------------------------------------------------------------------0                                  0x0                                PNG image, total size: 272492 bytes272492                             0x4286C                            ZIP archive, file count: 1, total size: 379130 bytes--------------------------------------------------------------------------------------------------------------------------------------------------[#] Extraction of png data at offset 0x0 declined[+] Extraction of zip data at offset 0x4286C completed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他會在現在的所在位置創建一個 extractions 資料夾，進入之後裡面後又有一個jpg，就跟他的圖片一樣一層一層的用 binwalk 解。最後就會拿到flag</p><p><img src="/assets/dg1UrqvNNxMAE2Rzt1OeWnbQ54tbqmbOvntjCy7qxYs=.png"></p><hr><h1 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h1><p>下載連結：<a href="https://www.kali.org/tools/foremost/">https://www.kali.org/tools/foremost/</a></p><p>foremost 跟 binwalk 類似，也是在分離隱寫的檔案，foremost 也可以拿來恢復資料。</p><p>剛剛 binwalk 那題也可以用 foremost 解</p><pre class="line-numbers language-none"><code class="language-none">$ foremost dolls.jpg -Tforemost: &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;foremost.conf: No such file or directoryProcessing: dolls.jpg|foundat&#x3D;base_images&#x2F;2_c.jpgUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h1><p>下載連結：<a href="https://github.com/Giotino/stegsolve">https://github.com/Giotino/stegsolve</a></p><p>網頁版：<a href="https://georgeom.net/StegOnline/upload">https://georgeom.net/StegOnline/upload</a></p><p>GUI 工具，可視化地查看圖片像素 &#x2F; RGB &#x2F; alpha 通道 &#x2F;做 XOR &#x2F;顏色通道切割，適合人工探索圖片裡的變化／隱寫的痕跡，這個工具也可以解LSB。</p><p>例子：<a href="https://ctf.hackme.quest/scoreboard/">Hackme-corgi can fly</a></p><p>這題下載後是一個png 檔，丟進 stegsolve 看一下</p><p><img src="/assets/svxGPJ6n_RFSDrrRZy1LQQxpNMEHQ-EnOSysmDm9Ux0=.png"></p><p>下面會有左右箭頭都按按看</p><p><img src="/assets/x0IQlpA_Lr559rMRbo1xoRIMfUrPv5LRlNMz4AznJkE=.png"></p><p>在 Red plane 0 的情況下出現 QRcode ，掃了就會是 flag </p><p>除了看每個通道外還可以去Analyse 功能中可以看 File format 以及提出LSB 資料…等等</p><hr><h1 id="imhex"><a href="#imhex" class="headerlink" title="imhex"></a>imhex</h1><p>下載連結：<a href="https://imhex.werwolv.net/">https://imhex.werwolv.net/</a></p><p>十六進位／二進位編輯器，可用來檢查圖片的 header、檔案結構、metadata 有沒有被動過或有異常，介面還不錯看。</p><p><img src="/assets/Sr1iJHVi4_VHOdC2qiX2mwOQLsSufSikmb1fvuU-J5s=.png"></p><hr><h1 id="pngcheck"><a href="#pngcheck" class="headerlink" title="pngcheck"></a>pngcheck</h1><p>下載連結：<a href="https://www.libpng.org/pub/png/apps/pngcheck.html">https://www.libpng.org/pub/png/apps/pngcheck.html</a></p><p>檢查 PNG 檔案的結構正確性，檢測 chunk 是否完整、CRC 是否正確。若隱寫工具改動了部分 chunk，檔案可能破壞或檢查出錯。</p><hr><h1 id="modsize"><a href="#modsize" class="headerlink" title="modsize"></a>modsize</h1><p>下載連結：<a href="https://github.com/flawwan/modsize">https://github.com/flawwan/modsize</a></p><p>一款專門調整圖片尺寸 metadata 的工具，或檢查圖片尺寸／metadata 跟真實圖像的 mismatch（我自己找的這個 library 可以用來看 image metadata 裡頭尺寸標記會不會被偽造）。</p><p>以他github 的X-MAS CTF 2018 的題目測試</p><p><img src="/assets/6bYCs-GKcKN1f5mTfMyq2cbErO6KB3eIRMMv3bgFbg0=.png"></p><p><img src="/assets/OiiTgm89fXAK35ThIDY4XFSMA8Bj_JxpkHG7Hz9Wpic=.png"></p><p>可以成功修改 height </p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>有這些工具之後還蠻大程度幫助我在遇到圖片鑑識時可以很快就解決，<del>或很快直接放棄</del>，如果有什麼其他好用的圖鑑鑑識工具也歡迎跟我說。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forensic </tag>
            
            <tag> 圖片鑑識 </tag>
            
            <tag> Photoforensic </tag>
            
            <tag> 數位鑑識 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>對蘋果進行一波大調查</title>
      <link href="/2025/09/23/IOSforensic/"/>
      <url>/2025/09/23/IOSforensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>接續前一天的內容，今天來學習使用開源的分析工具如何對 IOS 裝置的資料進行分析。</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="ILEAPP"><a href="#ILEAPP" class="headerlink" title="ILEAPP"></a>ILEAPP</h2><p>下載連結： <a href="https://github.com/abrignoni/iLEAPP">https://github.com/abrignoni/iLEAPP</a></p><p>iLEAPP 是 Alexis Brignoni 開發的開源工具，用來解析 iOS 裝置（與備份）中的日誌、事件與 plist 等常見鑑識 artefacts，協助快速整理出可供鑑識與調查的資訊。此工具可以快速 triage iOS 欄位：例如系統與應用 logs、通知（notifications）、build &#x2F; 設備資訊、行動網路資料、應用狀態資料庫（ApplicationState.db）等，將原始檔案轉成可讀的表格&#x2F;HTML 報告或 timeline，便於調查人員閱讀與分析</p><hr><p>今天的IOS 的 dumpfiles 檔會以今年初剛結束的 MVS CTF 2025 檔中的 IOS 分類來分享</p><h1 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h1><p>檔案下載網址：<a href="https://drive.google.com/drive/folders/1yaMc--Va2u2IJzQKci4yBaeftjDGRDya">https://drive.google.com/drive/folders/1yaMc--Va2u2IJzQKci4yBaeftjDGRDya</a></p><p>網址下載下來後應該會是iOS 系統的Applications、private、System 資料夾的壓縮檔</p><p>將下載的檔案丟給iLEAPP，上面是填題目給的檔案，下面是選他產生的分析結果要輸出到哪裡的資料夾</p><p>下面的Module可以全選</p><p><img src="/assets/pN_MLRInXD93sGXMtwoxxnvG6LiVZAyfxuDtWOxSxF4=.png"></p><p>接下來按左下角的 Process 程式就會開始分析</p><p>結束之後會產生分析的結果並產生html，</p><p><img src="/assets/OzFeLiwH1qYq5CZbvm7R8tR14Pxz_wcfw2JjuQ82SY0=.png"></p><p>報告的主頁會產生在_HTML 底下的 <code>index.html</code> 打開之後會出現這樣的頁面</p><p><img src="/assets/9oHLDoZAR8rpHPWI5a65Wj2LDRsWts9dnS1ABtfelbM=.png"></p><p>之後就可以在左側的功能列翻想要尋找的東西。</p><p>這邊介紹幾個我覺得比較特別的分析結果</p><h2 id="Home-Page"><a href="#Home-Page" class="headerlink" title="Home Page"></a>Home Page</h2><p>在首頁的Device details 中有顯示裝置基本資訊（型號、序號、iOS 版本）</p><p><img src="/assets/fXGB2uwjc5BZY9TvJLQPPKzqzsdhCceqbkQM1yNVhBw=.png"></p><h3 id="Keyboard-Usage-Stats"><a href="#Keyboard-Usage-Stats" class="headerlink" title="Keyboard Usage Stats"></a>Keyboard Usage Stats</h3><p>這邊會顯示</p><ul><li><code>tium.totalWordsTyped</code> → 使用者總共輸入的字數</li><li><code>tium.totalWordsFromCandidateBar</code> → 從鍵盤候選列選字的次數</li><li><code>tium.totalWordsAutocorrected</code> → 自動更正的字數</li></ul><p><img src="/assets/nMTSMholF589UNss0wwNX1RI3f9GH22jovCeBZGWRZ0=.png"></p><h2 id="Itunes-Metadata"><a href="#Itunes-Metadata" class="headerlink" title="Itunes Metadata"></a>Itunes Metadata</h2><p>&#x20;Itunes Metadata 這邊會列出一些裝置上安裝的APP </p><p><img src="/assets/mT5LK33BqV_BBiDqV8WyiXbqmUKXcCQe4lEyVllEug4=.png"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>今天學習到 IOS 的裝置的鑑識，希望未來嘗試看看在真實環境下鑑識人員是怎麼對手機進行破解與分析的</p><hr><h1 id="📚-參考資料"><a href="#📚-參考資料" class="headerlink" title="📚 參考資料"></a>📚 參考資料</h1><p><a href="https://www.youtube.com/watch?v=eG55F8glV0o">https://www.youtube.com/watch?v=eG55F8glV0o</a></p><p><a href="https://www.youtube.com/watch?v=H214nt2Q32Y">https://www.youtube.com/watch?v=H214nt2Q32Y</a></p><p><a href="https://www.stark4n6.com/2025/03/magnet-virtual-summit-2025-ctf-ios.html">https://www.stark4n6.com/2025/03/magnet-virtual-summit-2025-ctf-ios.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ILEAPP </tag>
            
            <tag> forensic </tag>
            
            <tag> IOSforensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>對小綠人進行一波大調查</title>
      <link href="/2025/09/22/AndroidForensic/"/>
      <url>/2025/09/22/AndroidForensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>大家不知道最近有沒有看過最新的 Netflix 紀錄片《陌生號碼：高校簡訊詐騙疑雲》，以及之前的《網路煉獄：揭發N 號房》，劇中都有出現一幕是鑑識人員將嫌疑犯的手機拿去進行證據採集，這讓我想到我可以研究看看如何對常見的 Android 以及 IOS 系統手機進行鑑識，但是因為直接買類似 Cellebrite UFED 的設備或者Magnet AXIOM軟體來玩需要花錢，因此今明兩天我會使用開源的分析工具並利用最近剛結束的MVS CTF 2025的android 與IOS 分類提供的dumpfiles來玩玩看。</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="ALEAPP"><a href="#ALEAPP" class="headerlink" title="ALEAPP"></a>ALEAPP</h2><p>下載連結：</p><p>ALEAPP : <a href="https://github.com/abrignoni/ALEAPP"> https://github.com/abrignoni/ALEAPP</a></p><p>是由 Alexis Brignoni 開發的一個開源工具，用來做 Android 裝置的 證據檔案分析（forensic artifacts parsing）。其目的在於整理 Android 裝置中常見的 log、事件、Protobuf（如 Google Play Services 或其他使用 Protobuf 的 apps）等資料，協助數位鑑識與 incident response 調查人員快速取出與分析有用資料。</p><hr><p>今天的Android 的 dumpfiles 會以今年初剛結束的 MVS CTF 2025 中的Android 分類來分享</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>下載連結 ： <a href="https://drive.google.com/file/d/1Ay-T4kE8J3NX-XLh0krarFvE9j8SK_LT/view">https://drive.google.com/file/d/1Ay-T4kE8J3NX-XLh0krarFvE9j8SK_LT/view</a></p><p>這個連結下載會給一個Android 手機的 data 資料夾內容，並且是壓縮過後的。</p><p>這邊可以分享一下在Android 11 後，沒有 root 的權限是沒有辦法去存取到 data 資料夾的，因此會需要一些第三方的工具才可以把它 dump 下來。</p><p>我的猜測，這個 dump 的製作是使用一個<a href="https://github.com/topjohnwu/Magisk">Magisk</a> 工具安裝到裝置上，這個工具可以讓你獲得到 root 權限並無需修改系統分區，<a href="https://izaka.tw/magisk-tutorial-and-installation-guide/">參考連結</a></p><p>ALEAPP 只支援 tar&#x2F;zip&#x2F;gz 檔案，因此我是先從連結上下載後解壓再重新壓縮成 zip 一次</p><p>得到檔案之後就可以丟給 ALEAPP，上面是填題目給的檔案，下面是選它產生的分析結果要輸出到哪裡的資料夾</p><p>下面的 Module 可以全選</p><p><img src="/assets/mDASlDFj6hHZvVJoPZZZ210DAqwMwVXbJ-mrViOr-w4=.png"></p><p>接下來按左下角的 Process 它就會開始做分析，分析完之後它會在你跟剛剛填的路徑下新增一個資料夾</p><p><img src="/assets/lDtakJToWuHInXS9qc6ldb-xieSy0NSlWyeQBwburCs=.png"></p><p>這些就是它將分析的結果轉成 HTML，類似生成一個報告，主要的頁面會在 <code>index.html</code>，點開之後會進入到這個頁面</p><p><img src="/assets/IvCPZq8bj5obL1jWJ0mLYUYg_gNCe6EhCRZm-CpzJGE=.png"></p><p>之後就可以開始去翻有沒有什麼可疑的東西</p><p>其中的功能很多，這邊介紹其中一部分的內容</p><h2 id="Home-page"><a href="#Home-page" class="headerlink" title="Home page"></a>Home page</h2><p>首頁就會顯示一些手機的名稱、SIM卡資訊等等</p><p><img src="/assets/Z2AoWqFIXBkawKwp5jiAnGuJy122aa8Tyd-SZjcOsOc=.png"></p><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><h3 id="APP-Icons"><a href="#APP-Icons" class="headerlink" title="APP Icons"></a>APP Icons</h3><p>這邊可以查看使用者在裝置上安裝了什麼app</p><p><img src="/assets/5hibQen43Jn1ThRdY0x2r67KBkQ_yTAxbqaeRzwTUNA=.png"></p><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><p>它會解析 <code>packages.xml</code>，記錄了裝置上安裝過的所有套件（應用程式），包含：</p><p>•系統應用（隨 ROM 出廠）</p><p>•OEM 廠商附加應用</p><p>•使用者自行安裝的應用（例如從 Google Play Store、adb sideload 等）</p><p><img src="/assets/lE9NediFoYvRMhSRjJrXjxl-wX8-nBMapXtwwlAYmJM=.png"></p><h2 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h2><h3 id="Bluetooth-Adapter-Information"><a href="#Bluetooth-Adapter-Information" class="headerlink" title="Bluetooth Adapter Information"></a>Bluetooth Adapter Information</h3><p>這邊可以看到藍牙的一些設定</p><p><img src="/assets/Jl_I6EruZUlSFYviq3RPTFNfNMnoUY4vPQckU9-sKpc=.png"></p><h3 id="Bluetooth-Connections"><a href="#Bluetooth-Connections" class="headerlink" title="Bluetooth Connections"></a>Bluetooth Connections</h3><p>這邊可以看藍牙裝置連線紀錄</p><p><img src="/assets/tTj3bI9f-yMf1GKbRGqfxsjClNGrxo9di4EThFU7qTw=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天簡單介紹 ALEAPP 工具，以及如何使用，之後希望可以再更深入研究這部分，如：如何在手機未解鎖或在未授權的情況下還是可以把 data 資料 dump 出來，以及更進階的分析技巧</p><hr><h1 id="📚-參考資料"><a href="#📚-參考資料" class="headerlink" title="📚 參考資料"></a>📚 參考資料</h1><p><a href="https://www.youtube.com/watch?v=eG55F8glV0o">https://www.youtube.com/watch?v=eG55F8glV0o</a></p><p><a href="https://www.youtube.com/watch?v=L_rELVckEAA">https://www.youtube.com/watch?v=L_rELVckEAA</a></p><p><a href="https://www.youtube.com/watch?v=BWDdwHL15og">https://www.youtube.com/watch?v=BWDdwHL15og</a></p><p><a href="https://www.stark4n6.com/2025/03/magnet-virtual-summit-2025-ctf-android.html">https://www.stark4n6.com/2025/03/magnet-virtual-summit-2025-ctf-android.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ALEAPP </tag>
            
            <tag> Android </tag>
            
            <tag> 鑑識分析 </tag>
            
            <tag> 行動裝置鑑識 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有時候 pslist 與 pstree 不可信</title>
      <link href="/2025/09/21/psxview/"/>
      <url>/2025/09/21/psxview/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天想要介紹 psxview 這個plugin，有時候惡意程式不會出現在pslist或者pstree上，因此會需要使用psxview 幫我們進行比對，找出可疑進程</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h2><p>下載連結：</p><p>Volatility 2 :  <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></p><p>Volatility 3 :  <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p><p>經典的記憶體分析工具，利用指令可以分析 memory dump 中的關鍵訊息，像是進程、網路連線、檔案……等等。</p><p>基本的操作這邊推薦可以直接上網查有人整理好的指令doc</p><p>而Volatility分為2與3版，差別就是一個是要使用 python2 執行，另一個是用 python3 執行，並且現在Volatility 2 已經沒有在維護了，但是一些 Plugin 的完整度在目前為止還是比 Volatility 3 還要高並且豐富，所以有些人還是會比較會偏向使用 Volatility 2 </p><hr><h1 id="什麼是pslist-pstree"><a href="#什麼是pslist-pstree" class="headerlink" title="什麼是pslist&#x2F;pstree"></a>什麼是pslist&#x2F;pstree</h1><p><del>對沒錯，講了六天的記憶體鑑識，現在才要談什麼是pslist&#x2F;pstree</del></p><p>pslist&#x2F;pstree 可以幫助我們去查看這台電腦跑了什麼process，他們分析的方式是會根據Symbol Table 找到Windows Kernel的 PsActiveProcessHead 的位址，然後從那個鏈表開始沿 ActiveProcessLinks 指標逐一讀出 EPROCESS 結構並解析必要欄位，如：ImageFileName、UniqueProcessId、CreateTime、ExitTime 等</p><p><img src="/assets/cghIGl_AaCJnL5zsvyk6TDeHL4Zf5T7ugVayuyE-uDo=.png" title="source:https:&#x2F;&#x2F;www.tophertimzen.com&#x2F;resources&#x2F;cs407&#x2F;slides&#x2F;week02_02-Processes.html#slide13"></p><p>另外的pstree 以 pslist 的結果為基礎，轉成父子樹狀。</p><p>那如果參考 <a href="https://ithelp.ithome.com.tw/m/articles/10321120">https://ithelp.ithome.com.tw/m/articles/10321120</a> 或者 <a href="https://ithelp.ithome.com.tw/articles/10335699">https://ithelp.ithome.com.tw/articles/10335699</a> 的其中一個方式， 可以發現其實惡意程式是可以去將process 隱藏起來的，並且讓pslist 與 pstree 無法偵測，因此我們可以使用 psscan 嘗試去偵測</p><hr><h1 id="什麼是psscan"><a href="#什麼是psscan" class="headerlink" title="什麼是psscan?"></a>什麼是psscan?</h1><p>首先要說明，Windows kernel 在為許多核心物件（例如 EPROCESS、ETHREAD、FILE_OBJECT）分配記憶體時，會在 <code>_POOL_HEADER</code> 中放置一個 4-byte 的 pool tag，用來標示該分配的用途或來源。</p><p>psscan是一個使用 pool-tag scanning 的掃描器：它會在 memory dump 中搜尋<code>_POOL_HEADER</code> 與 pool tag，並且對找到的候選區塊做結構一致性檢查（例如欄位範圍、指標是否指向可讀記憶體、ProcessName 是否可讀等），來判定該區塊是否為一個有效的 EPROCESS／ETHREAD。因此，即使該程序物件已被從 kernel 的 active list unlink（例如被某些 rootkit 隱藏），只要其 pool 分配尚存在記憶體且尚未被覆寫，psscan 通常可以把它找到。</p><pre class="line-numbers language-none"><code class="language-none">$vol -f MemoryDump.mem windows.psscanVolatility 3 Framework 2.11.0Progress:  100.00PDB scanning finishedPIDPPIDImageFileNameOffset(V)ThreadsHandlesSessionIdWow64CreateTimeExitTimeFile output832676msdtc.exe0xad81858612809-0False2023-05-21 22:29:25.000000 UTCN&#x2F;ADisabled40System0xad8185883180157-N&#x2F;AFalse2023-05-21 22:27:10.000000 UTCN&#x2F;ADisabled1084Registry0xad81858f20804-N&#x2F;AFalse2023-05-21 22:26:54.000000 UTCN&#x2F;ADisabled3028676dllhost.exe0xad818590708012-0False2023-05-21 22:29:20.000000 UTCN&#x2F;ADisabled5704824RuntimeBroker.0xad81859620805-1False2023-05-21 22:32:44.000000 UTCN&#x2F;ADisabled3324smss.exe0xad81860dc0402-N&#x2F;AFalse2023-05-21 22:27:10.000000 UTCN&#x2F;ADisabled452444csrss.exe0xad81861cd08012-0False2023-05-21 22:27:22.000000 UTCN&#x2F;ADisabled24042152vm3dservice.ex0xad81866192002-1False2023-05-21 22:28:32.000000 UTCN&#x2F;ADisabled528520csrss.exe0xad8186f1b14014-1False2023-05-21 22:27:25.000000 UTCN&#x2F;ADisabled552444wininit.exe0xad8186f2b0801-0False2023-05-21 22:27:25.000000 UTCN&#x2F;ADisabled588520winlogon.exe0xad8186f450c05-1False2023-05-21 22:27:25.000000 UTCN&#x2F;ADisabled372824SkypeBackgroun0xad8186f490803-1False2023-05-21 22:10:00.000000 UTCN&#x2F;ADisabled1232676svchost.exe0xad8186f4a2c07-0False2023-05-21 22:29:39.000000 UTCN&#x2F;ADisabled676552services.exe0xad8186f4d0807-0False2023-05-21 22:27:29.000000 UTCN&#x2F;ADisabled696552lsass.exe0xad8186fc608010-0False2023-05-21 22:27:29.000000 UTCN&#x2F;ADisabled852552fontdrvhost.ex0xad818761b0c05-0False2023-05-21 22:27:33.000000 UTCN&#x2F;ADisabled824676svchost.exe0xad818761d24022-0False2023-05-21 22:27:32.000000 UTCN&#x2F;ADisabled860588fontdrvhost.ex0xad818761f1405-1False2023-05-21 22:27:33.000000 UTCN&#x2F;ADisabled952676svchost.exe0xad81876802c012-0False2023-05-21 22:27:36.000000 UTCN&#x2F;ADisabled1016588dwm.exe0xad81876e434015-1False2023-05-21 22:27:38.000000 UTCN&#x2F;ADisabled5656824RuntimeBroker.0xad81876e80800-1False2023-05-21 21:58:19.000000 UTC2023-05-21 22:02:01.000000 UTCDisabled448676svchost.exe0xad818772124054-0False2023-05-21 22:27:41.000000 UTCN&#x2F;ADisabled1012676svchost.exe0xad818774c08019-0False2023-05-21 22:27:43.000000 UTCN&#x2F;ADisabled752676svchost.exe0xad818775828021-0False2023-05-21 22:27:43.000000 UTCN&#x2F;ADisabled1196676svchost.exe0xad81877972c034-0False2023-05-21 22:27:46.000000 UTCN&#x2F;ADisabled1376676svchost.exe0xad81878020c015-0False2023-05-21 22:27:49.000000 UTCN&#x2F;ADisabled12804MemCompression0xad818783508062-N&#x2F;AFalse2023-05-21 22:27:49.000000 UTCN&#x2F;ADisabled1448676svchost.exe0xad818796c2c030-0False2023-05-21 22:27:52.000000 UTCN&#x2F;ADisabled1496676svchost.exe0xad81879752c012-0False2023-05-21 22:27:52.000000 UTCN&#x2F;ADisabled1644676svchost.exe0xad8187a112c06-0False2023-05-21 22:27:58.000000 UTCN&#x2F;ADisabled1652676svchost.exe0xad8187a2d2c010-0False2023-05-21 22:27:58.000000 UTCN&#x2F;ADisabled88965328msedge.exe0xad8187a3908018-1False2023-05-21 22:28:21.000000 UTCN&#x2F;ADisabled1840676spoolsv.exe0xad8187acb20010-0False2023-05-21 22:28:03.000000 UTCN&#x2F;ADisabled1892676svchost.exe0xad8187b3408014-0False2023-05-21 22:28:05.000000 UTCN&#x2F;ADisabled2024676svchost.exe0xad8187b652407-0False2023-05-21 22:28:11.000000 UTCN&#x2F;ADisabled2076676svchost.exe0xad8187b9408010-0False2023-05-21 22:28:19.000000 UTCN&#x2F;ADisabled1120676MsMpEng.exe0xad818945c08012-0False2023-05-21 22:10:01.000000 UTCN&#x2F;ADisabled2144676vmtoolsd.exe0xad81896ab08011-0False2023-05-21 22:28:19.000000 UTCN&#x2F;ADisabled2152676vm3dservice.ex0xad81896ae2402-0False2023-05-21 22:28:19.000000 UTCN&#x2F;ADisabled2200676VGAuthService.0xad81896b33002-0False2023-05-21 22:28:19.000000 UTCN&#x2F;ADisabled32523580vmtoolsd.exe0xad81897963008-1False2023-05-21 22:31:59.000000 UTCN&#x2F;ADisabled4643580SecurityHealth0xad818979d0803-1False2023-05-21 22:31:59.000000 UTCN&#x2F;ADisabled130195296305516127577716190325�0xad818997494d1342177466--True2000-08-31 04:07:25.000000 UTC-Disabled2044676svchost.exe0xad8189b2708028-0False2023-05-21 22:49:29.000000 UTCN&#x2F;ADisabled3876448taskhostw.exe0xad8189b300808-1False2023-05-21 22:08:02.000000 UTCN&#x2F;ADisabled58968844oneetx.exe0xad8189b410805-1True2023-05-21 22:30:56.000000 UTCN&#x2F;ADisabled3204752ctfmon.exe0xad8189c8b28012-1False2023-05-21 22:30:11.000000 UTCN&#x2F;ADisabled1600448taskhostw.exe0xad8189d0730010-1False2023-05-21 22:30:09.000000 UTCN&#x2F;ADisabled1064676svchost.exe0xad8189d7c2c015-1False2023-05-21 22:30:09.000000 UTCN&#x2F;ADisabled1392448sihost.exe0xad8189e9428011-1False2023-05-21 22:30:08.000000 UTCN&#x2F;ADisabled3556588userinit.exe0xad818c02f3400-1False2023-05-21 22:30:28.000000 UTC2023-05-21 22:30:43.000000 UTCDisabled35803556explorer.exe0xad818c04734076-1False2023-05-21 22:30:28.000000 UTCN&#x2F;ADisabled3944824WmiPrvSE.exe0xad818c05408013-0False2023-05-21 22:30:44.000000 UTCN&#x2F;ADisabled4448824RuntimeBroker.0xad818c09a0809-1False2023-05-21 22:31:33.000000 UTCN&#x2F;ADisabled65445328msedge.exe0xad818c0ea08018-1False2023-05-21 22:22:35.000000 UTCN&#x2F;ADisabled3004676svchost.exe0xad818c4212c07-0False2023-05-21 22:30:55.000000 UTCN&#x2F;ADisabled1116676svchost.exe0xad818c4260806-1False2023-05-21 22:31:00.000000 UTCN&#x2F;ADisabled6696676svchost.exe0xad818c5320808-0False2023-05-21 22:34:07.000000 UTCN&#x2F;ADisabled51565328msedge.exe0xad818c55308014-1False2023-05-21 22:28:22.000000 UTCN&#x2F;ADisabled3160824StartMenuExper0xad818cad324014-1False2023-05-21 22:31:21.000000 UTCN&#x2F;ADisabled7160824SearchApp.exe0xad818ccc408057-1False2023-05-21 22:39:13.000000 UTCN&#x2F;ADisabled4116824RuntimeBroker.0xad818cd933003-1False2023-05-21 22:31:24.000000 UTCN&#x2F;ADisabled4228676SearchIndexer.0xad818ce0624015-0False2023-05-21 22:31:27.000000 UTCN&#x2F;ADisabled3608676svchost.exe0xad818d07a0803-0False2023-05-21 22:41:28.000000 UTCN&#x2F;ADisabled53283580msedge.exe0xad818d0980c054-1False2023-05-21 22:32:02.000000 UTCN&#x2F;ADisabled1916824SearchApp.exe0xad818d09908024-1False2023-05-21 22:33:05.000000 UTCN&#x2F;ADisabled6200676SgrmBroker.exe0xad818d09f0807-0False2023-05-21 22:33:42.000000 UTCN&#x2F;ADisabled22283580FTK Imager.exe0xad818d14308010-1False2023-05-21 22:43:56.000000 UTCN&#x2F;ADisabled1764824dllhost.exe0xad818d1760807-1False2023-05-21 22:32:48.000000 UTCN&#x2F;ADisabled77325896rundll32.exe0xad818d1912c01-1True2023-05-21 22:31:53.000000 UTCN&#x2F;ADisabled5136676SecurityHealth0xad818d3742807-0False2023-05-21 22:32:01.000000 UTCN&#x2F;ADisabled6644824SkypeApp.exe0xad818d3ac08049-1False2023-05-21 22:41:52.000000 UTCN&#x2F;ADisabled5480448oneetx.exe0xad818d3d60806-1True2023-05-21 23:03:00.000000 UTCN&#x2F;ADisabled8708676svchost.exe0xad818d4310805-0False2023-05-21 22:57:33.000000 UTCN&#x2F;ADisabled43965328msedge.exe0xad818d5150807-1False2023-05-21 22:32:19.000000 UTCN&#x2F;ADisabled45445328msedge.exe0xad818d75b08014-1False2023-05-21 22:32:39.000000 UTCN&#x2F;ADisabled11445328msedge.exe0xad818d75f08018-1False2023-05-21 22:32:38.000000 UTCN&#x2F;ADisabled62925328msedge.exe0xad818d7a108020-1False2023-05-21 22:06:15.000000 UTCN&#x2F;ADisabled53405328msedge.exe0xad818d7b308010-1False2023-05-21 22:32:39.000000 UTCN&#x2F;ADisabled56363580notepad.exe0xad818db450801-1False2023-05-21 22:46:50.000000 UTCN&#x2F;ADisabled6048448taskhostw.exe0xad818dc5d0805-1False2023-05-21 22:40:20.000000 UTCN&#x2F;ADisabled6596676TrustedInstall0xad818dc880804-0False2023-05-21 22:58:13.000000 UTCN&#x2F;ADisabled5808824HxTsr.exe0xad818de5d0800-1False2023-05-21 21:59:58.000000 UTC2023-05-21 22:07:45.000000 UTCDisabled46286724tun2socks.exe0xad818de823400-1True2023-05-21 22:40:10.000000 UTC2023-05-21 23:01:24.000000 UTCDisabled79645328msedge.exe0xad818dee508019-1False2023-05-21 22:22:09.000000 UTCN&#x2F;ADisabled7696824dllhost.exe0xad818dee60800-1False2023-05-21 23:02:40.000000 UTC2023-05-21 23:02:45.000000 UTCDisabled63241496audiodg.exe0xad818df2e0804-0False2023-05-21 22:42:56.000000 UTCN&#x2F;ADisabled23885328msedge.exe0xad818e54c34018-1False2023-05-21 22:05:35.000000 UTCN&#x2F;ADisabled67243580Outline.exe0xad818e5780800-1True2023-05-21 22:36:09.000000 UTC2023-05-21 23:01:24.000000 UTCDisabled8952824TextInputHost.0xad818e6db08010-1False2023-05-21 21:59:11.000000 UTCN&#x2F;ADisabled5476676svchost.exe0xad818e7520809-0False2023-05-21 22:58:08.000000 UTCN&#x2F;ADisabled2332824TiWorker.exe0xad818e7800804-0False2023-05-21 22:58:13.000000 UTCN&#x2F;ADisabled7312824ApplicationFra0xad818e84f30010-1False2023-05-21 22:35:44.000000 UTCN&#x2F;ADisabled4340676VSSVC.exe0xad818e8880803-0False2023-05-21 23:01:06.000000 UTCN&#x2F;ADisabled42246724Outline.exe0xad818e88b0800-1True2023-05-21 22:36:23.000000 UTC2023-05-21 23:01:24.000000 UTCDisabled7772676svchost.exe0xad818e88e1403-0False2023-05-21 22:36:03.000000 UTCN&#x2F;ADisabled7540824smartscreen.ex0xad818e89308014-1False2023-05-21 23:02:26.000000 UTCN&#x2F;ADisabled77882916conhost.exe0xad818e8a10800-0False2023-05-21 23:01:27.000000 UTC2023-05-21 23:01:48.000000 UTCDisabled7336824RuntimeBroker.0xad818e8bb0802-1False2023-05-21 22:11:39.000000 UTCN&#x2F;ADisabled6076824ShellExperienc0xad818eb1808014-1False2023-05-21 22:11:36.000000 UTCN&#x2F;ADisabled8264824RuntimeBroker.0xad818eec80804-1False2023-05-21 22:40:33.000000 UTCN&#x2F;ADisabled89203580FTK Imager.exe0xad818ef8108020-1False2023-05-21 23:02:28.000000 UTCN&#x2F;ADisabled5964676svchost.exe0xad818ef860805-0False2023-05-21 22:27:56.000000 UTCN&#x2F;ADisabled125689842201708208586546348048dexer0xad818f4f62ad16777219--True2000-08-31 04:05:52.000000 UTC-Disabled43965328msedge.exe0xbe8505fbf0807-1False2023-05-21 22:32:19.000000 UTCN&#x2F;ADisabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我們知道psscan之後我們如果要比對跟pslist 的結果太麻煩了，因此有一個plugin 可以幫助我們進行比對，這個 plugin就是我們今天的主題 <strong>psxview</strong></p><hr><h1 id="什麼是psxview"><a href="#什麼是psxview" class="headerlink" title="什麼是psxview ?"></a>什麼是psxview ?</h1><p>這個plugin 會將我們剛剛提到的pslist&#x2F;pstree與psscan以及其他thrdscan、csrss作比較，如果沒有出現在相對應的掃描上就會出現 False， 否則就會出現 true，因此如果有一個process 他在pslist 出現False 但在psscan出現True 那就可以嘗試去分析看看是不是rootkit</p><pre class="line-numbers language-none"><code class="language-none">$ vol -f MemoryDump.mem windows.psxview.PsXViewVolatility 3 Framework 2.11.0Progress:  100.00PDB scanning finishedOffset(Virtual)NamePIDpslistpsscanthrdscancsrssExit Time0xad8187acb200spoolsv.exe1840TrueTrueTrueTrue0xad81896ab080vmtoolsd.exe2144TrueTrueTrueTrue0xad8185907080dllhost.exe3028TrueTrueTrueTrue0xad818d75b080msedge.exe4544TrueTrueTrueTrue0xad818d75f080msedge.exe1144TrueTrueTrueTrue0xad818d09f080SgrmBroker.exe6200TrueTrueTrueTrue0xad818e88b080Outline.exe4224TrueTrueFalseFalse2023-05-21 23:01:24+00:000xad818e6db080TextInputHost.8952TrueTrueTrueTrue0xad818d7b3080msedge.exe5340TrueTrueTrueTrue0xad818e8bb080RuntimeBroker.7336TrueTrueTrueTrue0xad818c553080msedge.exe5156TrueTrueTrueTrue0xad8189c8b280ctfmon.exe3204TrueTrueTrueTrue0xad818db45080notepad.exe5636TrueTrueTrueTrue0xad81860dc040smss.exe332TrueTrueTrueFalse0xad818761d240svchost.exe824TrueTrueTrueTrue0xad8187721240svchost.exe448TrueTrueTrueTrue0xad8187b65240svchost.exe2024TrueTrueTrueTrue0xad818cad3240StartMenuExper3160TrueTrueTrueTrue0xad818ce06240SearchIndexer.4228TrueTrueTrueTrue0xad818c4212c0svchost.exe3004TrueTrueTrueTrue0xad818e893080smartscreen.ex7540TrueTrueTrueTrue0xad818e578080Outline.exe6724TrueTrueTrueFalse2023-05-21 23:01:24+00:000xad81858f2080Registry108TrueTrueTrueFalse0xad81861cd080csrss.exe452TrueTrueTrueFalse0xad8186f2b080wininit.exe552TrueTrueTrueTrue0xad8186f4d080services.exe676TrueTrueTrueTrue0xad8186fc6080lsass.exe696TrueTrueTrueTrue0xad818774c080svchost.exe1012TrueTrueTrueTrue0xad8187835080MemCompression1280TrueTrueTrueFalse0xad8187758280svchost.exe752TrueTrueTrueTrue0xad8187b34080svchost.exe1892TrueTrueTrueTrue0xad8187b94080svchost.exe2076TrueTrueTrueTrue0xad818c054080WmiPrvSE.exe3944TrueTrueTrueTrue0xad818945c080MsMpEng.exe1120TrueTrueTrueTrue0xad818ccc4080SearchApp.exe7160TrueTrueTrueTrue0xad818eec8080RuntimeBroker.8264TrueTrueTrueTrue0xad81876e8080RuntimeBroker.5656TrueTrueFalseFalse2023-05-21 22:02:01+00:000xad8189e94280sihost.exe1392TrueTrueTrueTrue0xad818d374280SecurityHealth5136TrueTrueTrueTrue0xad818e780080TiWorker.exe2332TrueTrueTrueTrue0xad818f4f62addexer125689842201708FalseTrueFalseFalse0xad8189b27080svchost.exe2044TrueTrueTrueTrue0xad818dc88080TrustedInstall6596TrueTrueTrueTrue0xad818e888080VSSVC.exe4340TrueTrueTrueTrue0xad8186f450c0winlogon.exe588TrueTrueTrueTrue0xad818761b0c0fontdrvhost.ex852TrueTrueTrueTrue0xad81877972c0svchost.exe1196TrueTrueTrueTrue0xad81876802c0svchost.exe952TrueTrueTrueTrue0xad81878020c0svchost.exe1376TrueTrueTrueTrue0xad818d0980c0msedge.exe5328TrueTrueTrueTrue0xad818796c2c0svchost.exe1448TrueTrueTrueTrue0xad81879752c0svchost.exe1496TrueTrueTrueTrue0xad8187a112c0svchost.exe1644TrueTrueTrueTrue0xad8187a2d2c0svchost.exe1652TrueTrueTrueTrue0xad8186f4a2c0svchost.exe1232TrueTrueTrueTrue0xad818d3d6080oneetx.exe5480TrueTrueTrueTrue0xad818eb18080ShellExperienc6076TrueTrueTrueTrue0xad81896b3300VGAuthService.2200TrueTrueTrueTrue0xad8189d07300taskhostw.exe1600TrueTrueTrueTrue0xad818cd93300RuntimeBroker.4116TrueTrueTrueTrue0xad8189796300vmtoolsd.exe3252TrueTrueTrueTrue0xad818e84f300ApplicationFra7312TrueTrueTrueTrue0xad818979d080SecurityHealth464TrueTrueTrueTrue0xad818dc5d080taskhostw.exe6048TrueTrueTrueTrue0xad818de5d080HxTsr.exe5808TrueTrueFalseFalse2023-05-21 22:07:45+00:000xad818d7a1080msedge.exe6292TrueTrueTrueTrue0xad8186f49080SkypeBackgroun372TrueTrueTrueTrue0xad818d515080msedge.exe4396TrueTrueTrueTrue0xad818d099080SearchApp.exe1916TrueTrueTrueTrue0xad818dee5080msedge.exe7964TrueTrueTrueTrue0xad8187a39080msedge.exe8896TrueTrueTrueTrue0xad8189b41080oneetx.exe5896TrueTrueTrueTrue0xad8185861280msdtc.exe832TrueTrueTrueTrue0xbe8505fbf080msedge.exe4396FalseTrueFalseFalse0xad818ef81080FTK Imager.exe8920TrueTrueTrueTrue0xad818d143080FTK Imager.exe2228TrueTrueTrueTrue0xad818dee6080dllhost.exe7696FalseTrueFalseFalse2023-05-21 23:02:45+00:000xad8186f1b140csrss.exe528TrueTrueTrueFalse0xad818761f140fontdrvhost.ex860TrueTrueTrueTrue0xad81876e4340dwm.exe1016TrueTrueTrueTrue0xad818e88e140svchost.exe7772TrueTrueTrueTrue0xad818c02f340userinit.exe3556TrueTrueFalseFalse2023-05-21 22:30:43+00:000xad818c047340explorer.exe3580TrueTrueTrueTrue0xad818e54c340msedge.exe2388TrueTrueTrueTrue0xad818d3ac080SkypeApp.exe6644TrueTrueTrueTrue0xad8189b30080taskhostw.exe3876TrueTrueTrueTrue0xad8185883180System4TrueTrueTrueFalse0xad818c09a080RuntimeBroker.4448TrueTrueTrueTrue0xad818d07a080svchost.exe3608TrueTrueTrueTrue0xad8185962080RuntimeBroker.5704TrueTrueTrueTrue0xad818c426080svchost.exe1116TrueTrueTrueTrue0xad818c532080svchost.exe6696TrueTrueTrueTrue0xad818d176080dllhost.exe1764TrueTrueTrueTrue0xad818c0ea080msedge.exe6544TrueTrueTrueTrue0xad818ef86080svchost.exe5964TrueTrueTrueTrue0xad818df2e080audiodg.exe6324TrueTrueTrueTrue0xad818e752080svchost.exe5476TrueTrueTrueTrue0xad818e8a1080conhost.exe7788FalseTrueFalseFalse2023-05-21 23:01:48+00:000xad8189d7c2c0svchost.exe1064TrueTrueTrueTrue0xad818d431080svchost.exe8708TrueTrueTrueTrue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="結論："><a href="#結論：" class="headerlink" title="結論："></a>結論：</h1><p>在記憶體鑑識時，有些惡意程式會隱藏自己讓pslist與pstree找不到，因此可以用PsXView 這個Plugin幫助我們去比對是否有可疑的程式。</p><hr><h1 id="📚-參考資料："><a href="#📚-參考資料：" class="headerlink" title="📚 參考資料："></a>📚 參考資料：</h1><p><a href="https://github.com/volatilityfoundation/volatility/wiki/command-reference?utm_source=chatgpt.com">https://github.com/volatilityfoundation/volatility/wiki/command-reference?utm_source=chatgpt.com</a></p><p><a href="https://www.tophertimzen.com/resources/cs407/slides/week02_02-Processes.html#slide6">https://www.tophertimzen.com/resources/cs407/slides/week02_02-Processes.html#slide6</a></p><p><a href="https://dfrws.org/sites/default/files/session-files/2016_EU_pres_pool_tag_-_quick_scanning_for_windows_memory_analysis.pdf">https://dfrws.org/sites/default/files/session-files/2016_EU_pres_pool_tag_-_quick_scanning_for_windows_memory_analysis.pdf</a></p><p><a href="https://notes.qazeer.io/dfir/common/memory_forensics?utm_source=chatgpt.com">https://notes.qazeer.io/dfir/common/memory_forensics?utm_source=chatgpt.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 記憶體鑑識 </tag>
            
            <tag> Volatility </tag>
            
            <tag> forensic </tag>
            
            <tag> memoryforensic </tag>
            
            <tag> psxview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道 Volatility 也可以帶 cookie 傳入嗎？</title>
      <link href="/2025/09/20/volatility_cookie/"/>
      <url>/2025/09/20/volatility_cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>在使用 Volatility 2 分析 Win10 記憶體時，會出現 Cannot find nt!ObGetObjectType 問題，需要傳入cookie 才能解決，今天會分享為什麼會出現這個問題，並且如何解決</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h2><p>下載連結：</p><p>Volatility 2 :  <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></p><p>Volatility 3 :  <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p><p>經典的記憶體分析工具，利用指令可以分析 memory dump 中的關鍵訊息，像是進程、網路連線、檔案……等等。</p><p>基本的操作這邊推薦可以直接上網查有人整理好的指令doc</p><p>而Volatility分為2與3版，差別就是一個是要使用 python2 執行，另一個是用 python3 執行，並且現在Volatility 2 已經沒有在維護了，但是一些 Plugin 的完整度在目前為止還是比 Volatility 3 還要高並且豐富，所以有些人還是會比較會偏向使用 Volatility 2 ，今天分享會主要使用 Volatility 2</p><hr><p>如果你在 Win10 的記憶體 dump 使用 Volatility 2 的 psscan 時，有可能會出現以下的錯誤</p><pre class="line-numbers language-none"><code class="language-none">$ vol.py -f MemoryDump.mem --profile&#x3D;Win10x64_19041 psscanVolatility Foundation Volatility Framework 2.6.1Offset(P)          Name                PID   PPID PDB                Time created                   Time exited------------------ ---------------- ------ ------ ------------------ ------------------------------ ------------------------------WARNING : volatility.debug    : Cannot find nt!ObGetObjectTypeWARNING : volatility.debug    : Cannot find nt!ObGetObjectTypeTraceback (most recent call last):  File &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;vol.py&quot;, line 192, in &lt;module&gt;    main()  File &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;vol.py&quot;, line 183, in main    command.execute()  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;commands.py&quot;, line 147, in execute    func(outfd, data)  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;plugins&#x2F;filescan.py&quot;, line 428, in render_text    for eprocess in data:  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;poolscan.py&quot;, line 252, in scan    skip_type_check &#x3D; skip_type_check)  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;plugins&#x2F;overlays&#x2F;windows&#x2F;windows.py&quot;, line 1258, in get_object    return self.get_object_top_down(struct_name, object_type, skip_type_check)  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;plugins&#x2F;overlays&#x2F;windows&#x2F;windows.py&quot;, line 1231, in get_object_top_down    header.get_object_type() &#x3D;&#x3D; object_type):  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;plugins&#x2F;overlays&#x2F;windows&#x2F;win7.py&quot;, line 155, in get_object_type    return self.type_map.get(int(self.TypeIndex), &#39;&#39;)  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;volatility&#x2F;plugins&#x2F;overlays&#x2F;windows&#x2F;win10.py&quot;, line 334, in TypeIndex    return ((addr &gt;&gt; 8) ^ cook ^ indx) &amp; 0xFFTypeError: unsupported operand type(s) for ^: &#39;int&#39; and &#39;NoneType&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個錯誤是因為win10.py 中在執行時在<code>return ((addr &gt;&gt; 8) ^ cook ^ indx) &amp; 0xFF</code>這段程式出現了 NoneType 的變數。</p><h2 id="nt-ObGetObjectType-是什麼？"><a href="#nt-ObGetObjectType-是什麼？" class="headerlink" title="nt!ObGetObjectType 是什麼？"></a>nt!ObGetObjectType 是什麼？</h2><p>根據<a href="https://medium.com/%40ashabdalhalim/a-light-on-windows-10s-object-header-typeindex-value-e8f907e7073a">這篇文章</a>的分析，可以知道說 Win 10 的 TypeInde&#x78;<strong>&#x20;</strong>&#x88AB;混淆過，並且是根據</p><pre class="line-numbers language-none"><code class="language-none">Index &#x3D; TypeIndex ^ 2nd least significate byte of OBJECT_HEADER address ^ nt!ObHeaderCookie<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這樣的公式進行混淆，nt!ObGetObjectType 的功用就是將TypeIndex 進行解混淆並回傳解混淆的TypeIndex。</p><p>因為 Volatility 2 是開源的，可以去看一下 win10.py 的<a href="https://github.com/volatilityfoundation/volatility/blob/master/volatility/plugins/overlays/windows/win10.py">sourcecode</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">_OBJECT_HEADER_10</span><span class="token punctuation">(</span>win8<span class="token punctuation">.</span>_OBJECT_HEADER<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">TypeIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Wrap the TypeIndex member with a property that decodes it         with the nt!ObHeaderCookie value."""</span>        cook <span class="token operator">=</span> obj<span class="token punctuation">.</span>VolMagic<span class="token punctuation">(</span>self<span class="token punctuation">.</span>obj_vm<span class="token punctuation">)</span><span class="token punctuation">.</span>ObHeaderCookie<span class="token punctuation">.</span>v<span class="token punctuation">(</span><span class="token punctuation">)</span>        addr <span class="token operator">=</span> self<span class="token punctuation">.</span>obj_offset         indx <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">(</span><span class="token string">"TypeIndex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> cook <span class="token operator">^</span> indx<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊就可以明顯的看到這三個變數分別代表什麼，並且利用這三個變數解混淆</p><ul><li>addr : OBJECT_HEADER_address</li><li>cook : nt!ObHeaderCookie 讀出的cookie 值，Windows 10 是每次開機隨機生成的</li><li>indx : 混淆過後的TypeIndex</li></ul><p>那這邊就是因為 Volatlity2 讀不到 nt!ObHeaderCookie，因此 cook 會是NoneType ， 而如果你有在Volatility 2下過 <code>-h</code> 有可能會看過可以下<code>--cookie</code>。</p><pre class="line-numbers language-none"><code class="language-none">$ vol.py -hVolatility Foundation Volatility Framework 2.6.1Usage: Volatility - A memory forensics analysis platform.Options:  -h, --help            list all available options and their default values.                        Default values may be set in the configuration file                        (&#x2F;etc&#x2F;volatilityrc)  --conf-file&#x3D;&#x2F;home&#x2F;yunshiuan&#x2F;.volatilityrc                        User based configuration file  -d, --debug           Debug volatility  --plugins&#x3D;PLUGINS     Additional plugin directories to use (colon separated)  --info                Print information about all registered objects  --cache-directory&#x3D;&#x2F;home&#x2F;yunshiuan&#x2F;.cache&#x2F;volatility                        Directory where cache files are stored  --cache               Use caching  --tz&#x3D;TZ               Sets the (Olson) timezone for displaying timestamps                        using pytz (if installed) or tzset  -f FILENAME, --filename&#x3D;FILENAME                        Filename to use when opening an image  --profile&#x3D;WinXPSP2x86                        Name of the profile to load (use --info to see a list                        of supported profiles)  -l LOCATION, --location&#x3D;LOCATION                        A URN location from which to load an address space  -w, --write           Enable write support  --dtb&#x3D;DTB             DTB Address  --shift&#x3D;SHIFT         Mac KASLR shift address  --output&#x3D;text         Output in this format (support is module specific, see                        the Module Output Options below)  --output-file&#x3D;OUTPUT_FILE                        Write output in this file  -v, --verbose         Verbose information  --physical_shift&#x3D;PHYSICAL_SHIFT                        Linux kernel physical shift address  --virtual_shift&#x3D;VIRTUAL_SHIFT                        Linux kernel virtual shift address  -g KDBG, --kdbg&#x3D;KDBG  Specify a KDBG virtual address (Note: for 64-bit                        Windows 8 and above this is the address of                        KdCopyDataBlock)  --force               Force utilization of suspect profile  -k KPCR, --kpcr&#x3D;KPCR  Specify a specific KPCR address  --cookie&#x3D;COOKIE       Specify the address of nt!ObHeaderCookie (valid for                        Windows 10 only)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那這個就是讓我們放 nt!ObHeaderCookie 的 address 給 Volatility 2 ， 因此接下來只要獲取到nt!ObHeaderCookie 位置的 cookie 應該就可以解決這個問題了。而 nt!ObHeaderCookie 在 ntoskrnl.exe 中可以找到。</p><p>因此我們現在要把memory 中的ntoskrnl.exe dump出來，volatility 2 有一個很猛的 <code>moddump</code> Plugin ，他可以將 Kernel Driver 全部 dump 出來</p><pre class="line-numbers language-none"><code class="language-none">$ vol.py -f MemoryDump.mem --profile&#x3D;Win10x64_19041 moddump --dump-dir .&#x2F;Volatility Foundation Volatility Framework 2.6.1Module Base        Module Name          Result------------------ -------------------- ------0xfffff8076221a000 ntoskrnl.exe         OK: driver.fffff8076221a000.sys0xfffff80762070000 hal.dll              OK: driver.fffff80762070000.sys0xfffff80767340000 ucx01000.sys         OK: driver.fffff80767340000.sys0xfffff80764530000 NETIO.SYS            OK: driver.fffff80764530000.sys0xfffff80767570000 UsbHub3.sys          OK: driver.fffff80767570000.sys0xfffff80767020000 USBPORT.SYS          OK: driver.fffff80767020000.sys0xfffff80767db0000 vm3dmp.sys           OK: driver.fffff80767db0000.sys0xfffff807643c0000 ndis.sys             OK: driver.fffff807643c0000.sys0xfffff807679d0000 cldflt.sys           OK: driver.fffff807679d0000.sys0xfffff80767a80000 bindflt.sys          OK: driver.fffff80767a80000.sys0xfffff80763fe0000 EhStorClass.sys      OK: driver.fffff80763fe0000.sys0xfffff807635f0000 CI.dll               OK: driver.fffff807635f0000.sys0xfffff80763c00000 pdc.sys              OK: driver.fffff80763c00000.sys0xfffff80767af0000 rspndr.sys           OK: driver.fffff80767af0000.sys0xfffff80767210000 e1i65x64.sys         OK: driver.fffff80767210000.sys0xfffff80763e00000 vsock.sys            OK: driver.fffff80763e00000.sys0xfffff80767440000 rdpbus.sys           OK: driver.fffff80767440000.sys0xfffff80774a50000 tcpipreg.sys         OK: driver.fffff80774a50000.sys0xfffff8077a5f0000 ad_driver.10.sys     OK: driver.fffff8077a5f0000.sys0xfffff80765670000 cdrom.sys            OK: driver.fffff80765670000.sys0xfffff80774c80000 mpsdrv.sys           OK: driver.fffff80774c80000.sys0xfffff80763eb0000 storahci.sys         OK: driver.fffff80763eb0000.sys0xfffff8077a4c0000 condrv.sys           OK: driver.fffff8077a4c0000.sys0xfffff80765ad0000 watchdog.sys         OK: driver.fffff80765ad0000.sys0xfffff807656f0000 Beep.SYS             OK: driver.fffff807656f0000.sys0xfffff80764b70000 mup.sys              OK: driver.fffff80764b70000.sys0xfffff80767d90000 serenum.sys          OK: driver.fffff80767d90000.sys0xfffff80763b50000 msisadrv.sys         OK: driver.fffff80763b50000.sys0xfffff80762160000 FLTMGR.SYS           OK: driver.fffff80762160000.sys0xfffff80767390000 vmgencounter.sys     OK: driver.fffff80767390000.sys0xfffff80763fb0000 stornvme.sys         OK: driver.fffff80763fb0000.sys0xfffff807635c0000 werkernel.sys        OK: driver.fffff807635c0000.sys0xfffff80765720000 dxgkrnl.sys          OK: driver.fffff80765720000.sys0xfffff807637f0000 WMILIB.SYS           OK: driver.fffff807637f0000.sys0xfffff80763d90000 volmgrx.sys          Error: Cannot acquire AS0xfffff80774a20000 Ndu.sys              OK: driver.fffff80774a20000.sys0xfffff80763ef0000 storport.sys         OK: driver.fffff80763ef0000.sys0xfffff80767990000 wcifs.sys            OK: driver.fffff80767990000.sys0xfffff80763c50000 partmgr.sys          OK: driver.fffff80763c50000.sys0xfffff80767870000 dxgmms2.sys          OK: driver.fffff80767870000.sys0xfffff80766e80000 kdnic.sys            OK: driver.fffff80766e80000.sys0xfffff80767b70000 peauth.sys           OK: driver.fffff80767b70000.sys0xfffff80764aa0000 volsnap.sys          OK: driver.fffff80764aa0000.sys0xfffff80763b10000 IntelTA.sys          OK: driver.fffff80763b10000.sys0xfffff807676c0000 HIDPARSE.SYS         OK: driver.fffff807676c0000.sys0xfffff80767cd0000 umbus.sys            OK: driver.fffff80767cd0000.sys0xfffff80767720000 dump_storport.sys    OK: driver.fffff80767720000.sys0xfffff807673b0000 BATTC.SYS            OK: driver.fffff807673b0000.sys0xfffff80766da0000 dfsc.sys             OK: driver.fffff80766da0000.sys0xfffff80763b20000 WindowsTr...roxy.sys OK: driver.fffff80763b20000.sys0xfffff80764b10000 rdyboost.sys         OK: driver.fffff80764b10000.sys0xfffff80763d50000 PCIIDEX.SYS          OK: driver.fffff80763d50000.sys0xfffff80766f80000 afunix.sys           OK: driver.fffff80766f80000.sys0xfffff80767da0000 vm3dmp_loader.sys    OK: driver.fffff80767da0000.sys0xfffff80764ba0000 iorate.sys           OK: driver.fffff80764ba0000.sys0xfffff80767420000 NdisVirtualBus.sys   OK: driver.fffff80767420000.sys0xfffff80766dd0000 CompositeBus.sys     OK: driver.fffff80766dd0000.sys0xfffff80774a00000 mmcss.sys            OK: driver.fffff80774a00000.sys0xfffff80764000000 fileinfo.sys         OK: driver.fffff80764000000.sys0xfffff80764610000 tcpip.sys            OK: driver.fffff80764610000.sys0xfffff807637a0000 WDFLDR.SYS           OK: driver.fffff807637a0000.sys0xfffff80766c20000 rdbss.sys            OK: driver.fffff80766c20000.sys0xfffff80762080000 kdcom.dll            OK: driver.fffff80762080000.sys0xfffff80766ca0000 csc.sys              OK: driver.fffff80766ca0000.sys0xfffffb54a32b0000 win32k.sys           Error: Cannot acquire AS0xfffff807674e0000 USBD.SYS             OK: driver.fffff807674e0000.sys0xfffffb54a2c00000 win32kbase.sys       OK: driver.fffffb54a2c00000.sys0xfffff80763af0000 WindowsTrustedRT.sys OK: driver.fffff80763af0000.sys0xfffff80774ca0000 mrxsmb.sys           OK: driver.fffff80774ca0000.sys0xfffff80767d20000 kbdclass.sys         OK: driver.fffff80767d20000.sys0xfffff80766d40000 nsiproxy.sys         OK: driver.fffff80766d40000.sys0xfffff80767560000 ksthunk.sys          OK: driver.fffff80767560000.sys0xfffff80765b70000 crashdmp.sys         OK: driver.fffff80765b70000.sys0xfffff80763b30000 pcw.sys              OK: driver.fffff80763b30000.sys0xfffff807643b0000 Fs_Rec.sys           Error: Cannot acquire AS0xfffff807649c0000 fvevol.sys           OK: driver.fffff807649c0000.sys0xfffff807635e0000 ntosext.sys          OK: driver.fffff807635e0000.sys0xfffff80764c00000 CLASSPNP.SYS         OK: driver.fffff80764c00000.sys0xfffff80766bf0000 winhvr.sys           OK: driver.fffff80766bf0000.sys0xfffff80762130000 PSHED.dll            OK: driver.fffff80762130000.sys0xfffff80763e20000 vmci.sys             OK: driver.fffff80763e20000.sys0xfffff80767430000 swenum.sys           OK: driver.fffff80767430000.sys0xfffff80767660000 hidusb.sys           OK: driver.fffff80767660000.sys0xfffff80766b20000 netbios.sys          OK: driver.fffff80766b20000.sys0xfffff80766ea0000 CimFS.SYS            OK: driver.fffff80766ea0000.sys0xfffff80774ac0000 HTTP.sys             OK: driver.fffff80774ac0000.sys0xfffff80767ab0000 lltdio.sys           OK: driver.fffff80767ab0000.sys0xfffff807670d0000 portcls.sys          OK: driver.fffff807670d0000.sys0xfffff807656e0000 Null.SYS             Error: Cannot acquire AS0xfffff80767cf0000 i8042prt.sys         OK: driver.fffff80767cf0000.sys0xfffff80763910000 mssecflt.sys         OK: driver.fffff80763910000.sys0xfffff80766f20000 netbt.sys            OK: driver.fffff80766f20000.sys0xfffff80766b40000 Vid.sys              OK: driver.fffff80766b40000.sys0xfffff80762150000 BOOTVID.dll          OK: driver.fffff80762150000.sys0xfffff80767760000 dump_stornvme.sys    OK: driver.fffff80767760000.sys0xfffff80763d70000 volmgr.sys           OK: driver.fffff80763d70000.sys0xfffff80763990000 ACPI.sys             OK: driver.fffff80763990000.sys0xfffff807636e0000 cng.sys              OK: driver.fffff807636e0000.sys0xfffff80766fa0000 ahcache.sys          OK: driver.fffff80766fa0000.sys0xfffff80774d90000 vmmemctl.sys         OK: driver.fffff80774d90000.sys0xfffff80767b10000 msquic.sys           OK: driver.fffff80767b10000.sys0xfffff807621d0000 cmimcext.sys         OK: driver.fffff807621d0000.sys0xfffff80766df0000 fastfat.SYS          OK: driver.fffff80766df0000.sys0xfffff80763400000 clipsp.sys           OK: driver.fffff80763400000.sys0xfffff807637c0000 SleepStudyHelper.sys OK: driver.fffff807637c0000.sys0xfffff80764020000 Wof.sys              OK: driver.fffff80764020000.sys0xfffff80763e70000 ataport.SYS          OK: driver.fffff80763e70000.sys0xfffff80764a90000 volume.sys           OK: driver.fffff80764a90000.sys0xfffff807670a0000 HDAudBus.sys         OK: driver.fffff807670a0000.sys0xfffff807656b0000 filecrypt.sys        OK: driver.fffff807656b0000.sys0xfffff807638e0000 acpiex.sys           OK: driver.fffff807638e0000.sys0xfffff80766ef0000 TDI.SYS              OK: driver.fffff80766ef0000.sys0xfffff8077a4e0000 vmhgfs.sys           OK: driver.fffff8077a4e0000.sys0xfffff80765b10000 BasicRender.sys      OK: driver.fffff80765b10000.sys0xfffff80767d50000 mouclass.sys         OK: driver.fffff80767d50000.sys0xfffff80763d40000 intelide.sys         OK: driver.fffff80763d40000.sys0xfffffb54a3350000 cdd.dll              Error: Cannot acquire AS0xfffff80767960000 luafv.sys            OK: driver.fffff80767960000.sys0xfffff80774c50000 bowser.sys           OK: driver.fffff80774c50000.sys0xfffff807676e0000 mouhid.sys           OK: driver.fffff807676e0000.sys0xfffff807677b0000 dump_dumpfve.sys     OK: driver.fffff807677b0000.sys0xfffff807673d0000 intelppm.sys         OK: driver.fffff807673d0000.sys0xfffff80765be0000 Msfs.SYS             OK: driver.fffff80765be0000.sys0xfffff8077a550000 WdFilter.sys         OK: driver.fffff8077a550000.sys0xfffff80766ff0000 tap0901.sys          OK: driver.fffff80766ff0000.sys0xfffff80774da0000 srvnet.sys           OK: driver.fffff80774da0000.sys0xfffff807640d0000 Ntfs.sys             OK: driver.fffff807640d0000.sys0xfffff80763e40000 mountmgr.sys         OK: driver.fffff80763e40000.sys0xfffff80767450000 usbhub.sys           OK: driver.fffff80767450000.sys0xfffff80767a60000 storqosflt.sys       OK: driver.fffff80767a60000.sys0xfffff80767680000 HIDCLASS.SYS         OK: driver.fffff80767680000.sys0xfffff80763c90000 spaceport.sys        OK: driver.fffff80763c90000.sys0xfffff807672a0000 USBXHCI.SYS          OK: driver.fffff807672a0000.sys0xfffff80766ec0000 tdx.sys              OK: driver.fffff80766ec0000.sys0xfffff80766ad0000 pacer.sys            OK: driver.fffff80766ad0000.sys0xfffff80765700000 vmrawdsk.sys         OK: driver.fffff80765700000.sys0xfffff80767000000 usbuhci.sys          OK: driver.fffff80767000000.sys0xfffff80763550000 msrpc.sys            Error: Cannot acquire AS0xfffff80763b60000 pci.sys              OK: driver.fffff80763b60000.sys0xfffff80767ad0000 mslldp.sys           OK: driver.fffff80767ad0000.sys0xfffff80767170000 ks.sys               OK: driver.fffff80767170000.sys0xfffff80766d90000 gpuenergydrv.sys     OK: driver.fffff80766d90000.sys0xfffff807673a0000 CmBatt.sys           OK: driver.fffff807673a0000.sys0xfffff807645d0000 ksecpkg.sys          OK: driver.fffff807645d0000.sys0xfffff80763be0000 vdrvroot.sys         OK: driver.fffff80763be0000.sys0xfffff807671f0000 usbehci.sys          OK: driver.fffff807671f0000.sys0xfffff80763800000 Wdf01000.sys         OK: driver.fffff80763800000.sys0xfffff80764be0000 disk.sys             OK: driver.fffff80764be0000.sys0xfffff80766d70000 mssmbios.sys         OK: driver.fffff80766d70000.sys0xfffff80774d40000 mrxsmb20.sys         OK: driver.fffff80774d40000.sys0xfffff807677d0000 dxgmms1.sys          OK: driver.fffff807677d0000.sys0xfffff80767d70000 serial.sys           OK: driver.fffff80767d70000.sys0xfffff80766ab0000 vwififlt.sys         OK: driver.fffff80766ab0000.sys0xfffff807620c0000 CLFS.SYS             OK: driver.fffff807620c0000.sys0xfffff807656d0000 tbs.sys              OK: driver.fffff807656d0000.sys0xfffff80764900000 fwpkclnt.sys         OK: driver.fffff80764900000.sys0xfffff80766f10000 ws2ifsl.sys          OK: driver.fffff80766f10000.sys0xfffff80763520000 ksecdd.sys           OK: driver.fffff80763520000.sys0xfffff80765b30000 Npfs.SYS             OK: driver.fffff80765b30000.sys0xfffff80767140000 drmk.sys             OK: driver.fffff80767140000.sys0xfffff80766d60000 npsvctrig.sys        OK: driver.fffff80766d60000.sys0xfffff80764980000 wfplwfs.sys          OK: driver.fffff80764980000.sys0xfffff80767d40000 vmmouse.sys          OK: driver.fffff80767d40000.sys0xfffff807637d0000 WppRecorder.sys      OK: driver.fffff807637d0000.sys0xfffff80761de0000 mcupdate.dll         OK: driver.fffff80761de0000.sys0xfffff8077a3f0000 srv2.sys             OK: driver.fffff8077a3f0000.sys0xfffff80766a00000 afd.sys              OK: driver.fffff80766a00000.sys0xfffff80763970000 SgrmAgent.sys        OK: driver.fffff80763970000.sys0xfffff80767620000 usbccgp.sys          OK: driver.fffff80767620000.sys0xfffff80763c30000 CEA.sys              OK: driver.fffff80763c30000.sys0xfffff80767700000 vmusbmouse.sys       OK: driver.fffff80767700000.sys0xfffff80767850000 monitor.sys          OK: driver.fffff80767850000.sys0xfffff80763e60000 atapi.sys            OK: driver.fffff80763e60000.sys0xfffff80763a80000 intelpep.sys         OK: driver.fffff80763a80000.sys0xfffff80762090000 tm.sys               OK: driver.fffff80762090000.sys0xfffff80766e60000 bam.sys              OK: driver.fffff80766e60000.sys0xfffffb54a2ee0000 win32kfull.sys       Error: Cannot acquire AS0xfffff807674f0000 HdAudio.sys          OK: driver.fffff807674f0000.sys0xfffff80766b00000 ndiscap.sys          OK: driver.fffff80766b00000.sys0xfffff80765af0000 BasicDisplay.sys     OK: driver.fffff80765af0000.sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x20;第一個就是ntoskrnl.exe ，把它拿去反編譯之後找到 ObGetObjectType 接下來把前面的8 bytes 的 opcode 記住</p><p><img src="/assets/TvYuVt1MEA0AH8i7s_0FELoY5njlVr0iMo2in0PMfRc=.png"></p><p>接下來用yarascan 把他從記憶體中的位置抓出來 </p><pre class="line-numbers language-none"><code class="language-none">$ sudo python2.7 vol.py -f ..&#x2F;temp_extract_dir&#x2F;MemoryDump.mem --profile&#x3D;Win10x64_19041 yarascan -K -Y &quot;&#123;48 8D 41 D0 0F B6 49 E8&#125;&quot;Volatility Foundation Volatility Framework 2.6.1Rule: r1Owner: ntoskrnl.exe0xf8076291d470  48 8d 41 d0 0f b6 49 e8 48 c1 e8 08 0f b6 c0 48   H.A...I.H......H0xf8076291d480  33 c1 0f b6 0d a3 92 5f 00 48 33 c1 48 8d 0d ed   3......_.H3.H...0xf8076291d490  99 5f 00 48 8b 04 c1 c3 cc cc cc cc cc cc cc cc   ._.H............0xf8076291d4a0  48 83 ec 58 8a 84 24 a0 00 00 00 c7 44 24 48 01   H..X..$.....D$H.0xf8076291d4b0  00 00 00 88 44 24 40 8b 84 24 98 00 00 00 89 44   ....D$@..$.....D0xf8076291d4c0  24 38 8b 84 24 90 00 00 00 89 44 24 30 48 8b 84   $8..$.....D$0H..0xf8076291d4d0  24 88 00 00 00 48 89 44 24 28 48 8b 84 24 80 00   $....H.D$(H..$..0xf8076291d4e0  00 00 48 89 44 24 20 e8 14 00 00 00 48 83 c4 58   ..H.D$......H..X0xf8076291d4f0  c3 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ................0xf8076291d500  4c 8b dc 49 89 5b 08 49 89 73 10 4d 89 4b 20 4d   L..I.[.I.s.M.K.M0xf8076291d510  89 43 18 57 41 54 41 55 41 56 41 57 48 83 ec 70   .C.WATAUAVAWH..p0xf8076291d520  48 8b da 48 8b f9 45 33 ed 4d 89 6b b0 4d 89 6b   H..H..E3.M.k.M.k0xf8076291d530  b8 65 48 8b 04 25 88 01 00 00 48 89 44 24 60 44   .eH..%....H.D$&#96;D0xf8076291d540  8a b8 32 02 00 00 45 84 ff 0f 84 07 94 12 00 49   ..2...E........I0xf8076291d550  8b 4b 28 48 b8 00 00 ff ff ff 7f 00 00 48 3b c8   .K(H.........H;.0xf8076291d560  48 0f 43 c8 8b 01 89 01 44 8b a4 24 d0 00 00 00   H.C.....D..$....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來知道 ntoskrnl.exe 的位置在<code>0xf8076291d470</code>後我們就可以寫 script 幫我我們提取ObHeaderCookie</p><p>回去看反編譯出來的ObGetObjectType，我們的目標是<code>movzx   ecx, byte [rel ObHeaderCookie]</code> 這段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ sudo python2<span class="token punctuation">.</span><span class="token number">7</span> vol<span class="token punctuation">.</span>py <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>temp_extract_dir<span class="token operator">/</span>MemoryDump<span class="token punctuation">.</span>mem <span class="token operator">-</span><span class="token operator">-</span>profile<span class="token operator">=</span>Win10x64_19041 volshellVolatility Foundation Volatility Framework <span class="token number">2.6</span><span class="token number">.1</span>Current context<span class="token punctuation">:</span> System @ <span class="token number">0xffffad8185883180</span><span class="token punctuation">,</span> pid<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ppid<span class="token operator">=</span><span class="token number">0</span> DTB<span class="token operator">=</span><span class="token number">0x1ad002</span>Welcome to volshell! Current memory image <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token builtin">file</span><span class="token punctuation">:</span><span class="token operator">//</span><span class="token operator">/</span>home<span class="token operator">/</span>yunshiuan<span class="token operator">/</span>temp_extract_dir<span class="token operator">/</span>MemoryDump<span class="token punctuation">.</span>memTo get <span class="token builtin">help</span><span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token string">'hh()'</span><span class="token operator">>></span><span class="token operator">></span> addr <span class="token operator">=</span> <span class="token number">0xf8076291d470</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> m <span class="token keyword">in</span> getmods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     nt_mod <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">break</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> mode <span class="token operator">=</span> distorm3<span class="token punctuation">.</span>Decode64Bits<span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> nt_mod<span class="token punctuation">.</span>obj_vm<span class="token punctuation">.</span>read<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ops <span class="token operator">=</span> distorm3<span class="token punctuation">.</span>Decompose<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> data<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> op <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">and</span> <span class="token string">'FLAG_RIP_RELATIVE'</span> <span class="token keyword">in</span> op<span class="token punctuation">.</span>flags <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>operands<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> op<span class="token punctuation">.</span>operands<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'Register'</span> <span class="token keyword">and</span> op<span class="token punctuation">.</span>operands<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'AbsoluteMemory'</span> <span class="token keyword">and</span> op<span class="token punctuation">.</span>operands<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         addr2 <span class="token operator">=</span> op<span class="token punctuation">.</span>address <span class="token operator">+</span> op<span class="token punctuation">.</span>size <span class="token operator">+</span> op<span class="token punctuation">.</span>operands<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disp<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> cookie <span class="token operator">=</span> obj<span class="token punctuation">.</span>Object<span class="token punctuation">(</span><span class="token string">"unsigned int"</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> addr2<span class="token punctuation">,</span> vm <span class="token operator">=</span> nt_mod<span class="token punctuation">.</span>obj_vm<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hex</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token string">'0x9be88324L'</span><span class="token operator">>></span><span class="token operator">></span> exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個script 簡單來說</p><ul><li>首先先獲取到addr 的第一個函數，那因為我們直接定位的關係，所以這邊nt_mod &#x3D; ObGetObjectType</li><li>接下來分別是設定64 位元反組譯模式、讀取100 位元組的機器碼、進行反組譯得到指令列表</li><li>下一部分是尋找<code>movzx ecx, byte [rel ObHeaderCookie]</code>指令<ul><li><code>op.size == 7</code>：指令長度為 7 位元組</li><li><code>&#39;FLAG_RIP_RELATIVE&#39; in op.flags</code>：使用 RIP相對定址</li><li><code>len(op.operands) == 2</code>：有 2 個運算元</li><li><code>op.operands[0].type== &#39;Register&#39;</code>：第一個運算元是暫存器</li><li><code>op.operands[1].type == &#39;AbsoluteMemory&#39;</code>：第二個運算元是記憶體位址</li><li><code>op.operands[1].size== 8</code>：記憶體運算元大小為 8 位元組</li></ul></li><li>找到後計算ObHeaderCookie的實際記憶體位置<ul><li><code>addr2 = op.address + op.size + op.operands[1].disp</code><ul><li>op.address：指令地址</li><li>op.size：指令大小（7 位元組）</li><li>op.operands[1].disp：RIP 相對位移</li></ul></li></ul></li><li>最後提取cookie 的值</li></ul><p>提取後我們知道cookie 的值為<code>0x9be88324</code>，最後再下一次 psscan 帶上剛剛抓的cookie</p><pre class="line-numbers language-none"><code class="language-none">sudo python2.7 vol.py -f ..&#x2F;temp_extract_dir&#x2F;MemoryDump.mem --profile&#x3D;Win10x64_19041 --cookie&#x3D;0x9be88324 psscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>發現成功執行</p><p><img src="/assets/itW3xFS6UvPW_Na9YNcMa0hzXSp3BMdpHgJ7ig0oANU=.png"></p><hr><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>其實今天分享了的這個問題，但是其實只要改用Volatility 3 就都不會有問題了，而且在研究這個問題的過程中因為 Volatility 2 支援的函式庫都太舊了導致踩了不少坑，所以今天的分享如果你是 Volatility 2 的忠實信徒，這個方式應該可以幫助你在分析 Win 10 的記憶體時遇到這個問題可以直接解決</p><hr><h1 id="📚參考資料"><a href="#📚參考資料" class="headerlink" title="📚參考資料"></a>📚參考資料</h1><p><a href="https://www.osdfcon.org/presentations/2020/Jamie-Levy/_Troubleshooting-Memory.pdf">https://www.osdfcon.org/presentations/2020/Jamie-Levy\_Troubleshooting-Memory.pdf</a></p><p><a href="https://github.com/volatilityfoundation/volatility/issues/436">https://github.com/volatilityfoundation/volatility/issues/436</a></p><p><a href="https://medium.com/%40ashabdalhalim/a-light-on-windows-10s-object-header-typeindex-value-e8f907e7073a">https://medium.com/%40ashabdalhalim/a-light-on-windows-10s-object-header-typeindex-value-e8f907e7073a</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 記憶體鑑識 </tag>
            
            <tag> Volatility </tag>
            
            <tag> forensic </tag>
            
            <tag> memoryforensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACSCCTF 2025 Please Recover My Files</title>
      <link href="/2025/09/19/2025ACSCCTF/"/>
      <url>/2025/09/19/2025ACSCCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天我想要分享我在 ACSCCTF 2025 成功解出的其中一題 please recover my files ，這題是一個Linux Memory Forensic 的題目，剛好用到了前一天分享的知識，趁這次鐵人賽的機會寫成 Writeup 跟大家分享解題思路</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h2><p>下載連結：</p><p>Volatility 2 :  <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></p><p>Volatility 3 :  <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p><p>經典的記憶體分析工具，利用指令可以分析 memory dump 中的關鍵訊息，像是進程、網路連線、檔案……等等。</p><p>基本的操作這邊推薦可以直接上網查有人整理好的指令doc</p><p>而Volatility分為2與3版，差別就是一個是要使用 python2 執行，另一個是用 python3 執行，並且現在Volatility 2 已經沒有在維護了，但是一些 Plugin 的完整度在目前為止還是比 Volatility 3 還要高並且豐富，所以有些人還是會比較會偏向使用 Volatility 2 ，今天分享會主要使用 Volatility 3</p><h2 id="Ida"><a href="#Ida" class="headerlink" title="Ida"></a>Ida</h2><p>下載連結：<a href="https://hex-rays.com/ida-pro">https://hex-rays.com/ida-pro</a></p><p>經典反編譯工具， 可以將執行檔反編譯成人可以看懂的程式碼</p><h1 id="Cyberchef"><a href="#Cyberchef" class="headerlink" title="Cyberchef"></a>Cyberchef</h1><p>網站連結：<a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p><p>非常好用的解密網站，支援多個加解密功能</p><hr><h1 id="題目大綱"><a href="#題目大綱" class="headerlink" title="題目大綱"></a>題目大綱</h1><p>這題的題意大致是，他發現了他的檔案被加密了，請恢復他，因此主要的目標是會需要找到怪怪的加密程式以及被加密的檔案，並分析他的加密程式是怎麼加密的並還原他。</p><h1 id="調查開始"><a href="#調查開始" class="headerlink" title="調查開始"></a>調查開始</h1><p>起手式先看一下他的作業系統以及他的版本是多少</p><p><img src="/assets/CcR004mNRinsSkEIROnMdRpEYrUW7HYupvm8H-i3vbA=.png"></p><p>得知說這個 memory dump 的作業系統為 Debian，而他 Linux 核心版本是 6.1.0-27，並且他是2024-11-01出現的，試試看pslist有沒有辦法出現東西，但因為官方給的Sysbol Table太少，因此高機率會出現 Symbol Table 缺失錯誤</p><p><img src="/assets/D_2GFVDfbfAAVjDSdchihnsztesFzwNWKaIjHjNxijw=.png"></p><p>因此可以試試看前一天提到的 <a href="https://github.com/Abyss-W4tcher/volatility3-symbols">https://github.com/Abyss-W4tcher/volatility3-symbols</a> 有人已經幫忙整理的 Symbol Table 找找看，這邊剛好他有。</p><p>因此把對應版本的 Symbol Table 下載下來後放在V olatility 3 資料夾中的 volatility3\symbols\linux 路徑，再次用 pslist 看一下會不會成功。發現確實可以正常分析了</p><p><img src="/assets/BDfS9sFG6UMHPaE7FvAh55ncuC3wqZ3DO4KcDQZwUpg=.png"></p><p>接下來下pstree 看一下有什麼值得看並且可疑的進程</p><pre class="line-numbers language-none"><code class="language-none">PS C:\Users\yunshiuan\Desktop\Tools\volatility3 &gt; python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; linux.pstreeVolatility 3 Framework 2.26.2Progress:  100.00               Stacking attempts finishedOFFSET (V)      PID     TID     PPID    COMM0x8a6100241fc0  1       1       0       systemd* 0x8a611367bf80        356     356     1       systemd-journal* 0x8a61015d5f40        388     388     1       systemd-udevd* 0x8a610b808000        440     440     1       systemd-timesyn* 0x8a6107958000        630     630     1       accounts-daemon* 0x8a6107959fc0        631     631     1       anacron* 0x8a610795bf80        632     632     1       avahi-daemon** 0x8a610b823f80       646     646     632     avahi-daemon* 0x8a61015d0000        633     633     1       cron* 0x8a61159b5f40        634     634     1       dbus-daemon* 0x8a61159b1fc0        636     636     1       low-memory-moni* 0x8a61159b3f80        637     637     1       polkitd* 0x8a610794df40        638     638     1       power-profiles-* 0x8a6107948000        639     639     1       switcheroo-cont* 0x8a6107949fc0        640     640     1       systemd-logind* 0x8a610794bf80        641     641     1       udisksd* 0x8a6107965f40        652     652     1       NetworkManager* 0x8a6106740000        657     657     1       wpa_supplicant* 0x8a6112083f80        674     674     1       ModemManager* 0x8a61120a8000        693     693     1       cupsd* 0x8a61120a9fc0        707     707     1       gdm3** 0x8a6110c3bf80       1193    1193    707     gdm-session-wor*** 0x8a610b80df40      1273    1273    1193    gdm-wayland-ses**** 0x8a6108263f80     1283    1283    1273    gnome-session-b* 0x8a6103590000        724     724     1       cups-browsed* 0x8a61035a3f80        773     773     1       rtkit-daemon* 0x8a6108a4df40        893     893     1       upowerd* 0x8a610abfbf80        923     923     1       geoclue* 0x8a610abf8000        930     930     1       packagekitd* 0x8a6112e08000        938     938     1       colord* 0x8a610a445f40        1205    1205    1       systemd** 0x8a6108a4bf80       1208    1208    1205    (sd-pam)** 0x8a61120a0000       1223    1223    1205    pipewire** 0x8a6107658000       1228    1228    1205    wireplumber** 0x8a6107453f80       1232    1232    1205    pipewire-pulse** 0x8a610a438000       1234    1234    1205    dbus-daemon** 0x8a610a43df40       1235    1235    1205    gnome-keyring-d** 0x8a610a439fc0       1244    1244    1205    gvfsd*** 0x8a6112e09fc0      2041    2041    1244    gvfsd-trash** 0x8a6109c2df40       1258    1258    1205    gvfsd-fuse** 0x8a6104c80000       1324    1324    1205    tracker-miner-f** 0x8a6104c7df40       1332    1332    1205    gcr-ssh-agent** 0x8a6104c78000       1333    1333    1205    gnome-session-c** 0x8a6104c79fc0       1334    1334    1205    ssh-agent** 0x8a6108265f40       1342    1342    1205    gnome-session-b*** 0x8a61027c1fc0      1360    1360    1342    at-spi-bus-laun**** 0x8a61027d1fc0     1373    1373    1360    dbus-daemon*** 0x8a6108105f40      1540    1540    1342    evolution-alarm*** 0x8a6112c89fc0      1569    1569    1342    gsd-disk-utilit*** 0x8a6109a73f80      1574    1574    1342    gnome-software** 0x8a61027c5f40       1361    1361    1205    gvfs-udisks2-vo** 0x8a61027d0000       1365    1365    1205    gnome-shell** 0x8a61027d3f80       1376    1376    1205    gvfs-gphoto2-vo** 0x8a61027c0000       1385    1385    1205    gvfs-goa-volume** 0x8a6107d43f80       1395    1395    1205    goa-daemon** 0x8a6107b70000       1408    1408    1205    goa-identity-se** 0x8a6107b75f40       1417    1417    1205    gvfs-mtp-volume** 0x8a6107b10000       1422    1422    1205    gvfs-afc-volume** 0x8a6107ba1fc0       1460    1460    1205    xdg-permission-** 0x8a6107ba3f80       1463    1463    1205    gnome-shell-cal** 0x8a610815df40       1475    1475    1205    evolution-sourc** 0x8a6108161fc0       1486    1486    1205    gjs** 0x8a61080e9fc0       1488    1488    1205    at-spi2-registr** 0x8a6108163f80       1498    1498    1205    sh*** 0x8a6112c8bf80      1568    1568    1498    ibus-daemon**** 0x8a615b9e1fc0     1689    1689    1568    ibus-dconf**** 0x8a615b9e0000     1690    1690    1568    ibus-extension-**** 0x8a61111a0000     1759    1759    1568    ibus-engine-sim** 0x8a6108171fc0       1501    1501    1205    gsd-a11y-settin** 0x8a6108175f40       1502    1502    1205    gsd-color** 0x8a6108173f80       1503    1503    1205    gsd-datetime** 0x8a6108170000       1505    1505    1205    gsd-housekeepin** 0x8a6108180000       1508    1508    1205    gsd-keyboard** 0x8a6108181fc0       1512    1512    1205    gsd-media-keys** 0x8a6108185f40       1518    1518    1205    gsd-power** 0x8a6108183f80       1519    1519    1205    gsd-print-notif** 0x8a61080f1fc0       1526    1526    1205    gsd-rfkill** 0x8a61080f3f80       1527    1527    1205    gsd-screensaver** 0x8a611118df40       1536    1536    1205    gsd-sharing** 0x8a611118bf80       1537    1537    1205    gsd-smartcard** 0x8a6111188000       1538    1538    1205    gsd-sound** 0x8a6111189fc0       1539    1539    1205    gsd-usb-protect** 0x8a61111a1fc0       1541    1541    1205    gsd-wacom** 0x8a6112c95f40       1570    1570    1205    evolution-calen** 0x8a615b86df40       1633    1633    1205    gjs** 0x8a615b9cbf80       1684    1684    1205    evolution-addre** 0x8a615b9cdf40       1700    1700    1205    ibus-portal** 0x8a615b9f5f40       1712    1712    1205    gsd-printer** 0x8a6112088000       1745    1745    1205    xdg-desktop-por** 0x8a6109a90000       1758    1758    1205    xdg-document-po*** 0x8a61661a5f40      1778    1778    1758    fusermount3** 0x8a615bbf8000       1789    1789    1205    xdg-desktop-por** 0x8a610745df40       1830    1830    1205    xdg-desktop-por** 0x8a6108859fc0       2015    2015    1205    gnome-calendar** 0x8a61035a1fc0       2017    2017    1205    gnome-control-c** 0x8a61035a0000       2021    2021    1205    gnome-terminal-*** 0x8a610b801fc0      2255    2255    2021    bash**** 0x8a6107ba0000     2258    2258    2255    su***** 0x8a6112c9df40    2259    2259    2258    bash****** 0x8a6110c3df40   2272    2272    2259    avml** 0x8a6103431fc0       2102    2102    1205    dconf-service** 0x8a610b813f80       2261    2261    1205    su** 0x8a6108868000       2279    2279    1205    gvfsd-metadata* 0x8a6108f9bf80        1841    1841    1       fwupd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有趣的是在 102 行 他開了bash 後執行了 su ，之後底下又開了 bash 之後是 avml ，如果是bash的話有一個很不錯用的linux.bash Plugin 可以使用，它可以去看之前使用者在bash中輸入了什麼指令。</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; linux.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/68z4U1rOFmpRYIcJRHZfTPv7MJGjeo2SrAMFDxCKZkE=.png"></p><p>看到超可疑的 su 了，因為一般下 su 不會使用<code>./</code> 在現在位置執行，因此可重點去看這個 su 在幹嘛。</p><p>首先先看這個 su 到底在哪裡</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">python3 <span class="token punctuation">.</span>\vol<span class="token punctuation">.</span>py <span class="token operator">-</span>f <span class="token string">"C:\Users\yunshiuan\Desktop\asac\chall.raw"</span> linux<span class="token punctuation">.</span>pagecache<span class="token punctuation">.</span>Files > files<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/AHAFKQQL4w4D4KPXJ7skTSx4v8maa_5BfbF52y6qMUc=.png"></p><p>ok 找到了 發現他被放在<code>/home/acsc/su</code> ，接下來知道他在哪之後就可以把它 Dump 出來</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; linux.pagecache.InodePages --find &#39;&#x2F;home&#x2F;acsc&#x2F;su&#39; --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/nnc7Yy8Nha7iSD1Uh0-fRgZvgeVceoPoDM0D_-idl1A=.png"></p><p>成功把 su dump 出來了之後就可以直接開 ida 分析</p><p>開 ida 然後點一點就可以發現到一個酷酷的加密函式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_403175</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-240h]</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-240h]</span>  <span class="token keyword">char</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-240h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-238h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-234h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-230h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-22Ch]</span>  __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-228h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 j<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-220h]</span>  <span class="token keyword">unsigned</span> __int64 k<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-218h]</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-210h]</span>  __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-208h]</span>  __int64 v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-200h]</span>  __int64 flag_content_len<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-1F8h]</span>  __int64 flag_content<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-1F0h]</span>  __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-1E8h]</span>  __int64 v17<span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-1E0h]</span>  __int64 v18<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-1D8h]</span>  <span class="token keyword">char</span> v19<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-1D0h] BYREF</span>  __int64 v20<span class="token punctuation">;</span> <span class="token comment">// [rsp+A0h] [rbp-1A0h]</span>  <span class="token keyword">char</span> v21<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+100h] [rbp-140h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v22<span class="token punctuation">;</span> <span class="token comment">// [rsp+130h] [rbp-110h]</span>  <span class="token keyword">char</span> v23<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+190h] [rbp-B0h] BYREF</span>  <span class="token keyword">char</span> flag_filename<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1A0h] [rbp-A0h] BYREF</span>  <span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1B0h] [rbp-90h] BYREF</span>  <span class="token keyword">char</span> v26<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1D0h] [rbp-70h] BYREF</span>  <span class="token keyword">char</span> v27<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1F0h] [rbp-50h] BYREF</span>  <span class="token keyword">char</span> v28<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+210h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v29<span class="token punctuation">;</span> <span class="token comment">// [rsp+238h] [rbp-8h]</span>  v29 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">random_string</span><span class="token punctuation">(</span>v23<span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v28<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_8E6110 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v23<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v28<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_8E6110 <span class="token operator">+</span> <span class="token punctuation">(</span>v23<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v28<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_8EA6C0<span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"AES_IV=%s"</span><span class="token punctuation">,</span> v28<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_6EF840</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_8EA6C0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">random_string</span><span class="token punctuation">(</span>v26<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_403086</span><span class="token punctuation">(</span>v26<span class="token punctuation">,</span> v27<span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">xorenc</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>debian_log_addr<span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token function">sub_6FC8B0</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>v27<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">32LL</span><span class="token punctuation">,</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>v11<span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_72C2D0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">,</span> v21<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v22 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v12 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              v13 <span class="token operator">=</span> v12<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v22<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">4096LL</span> <span class="token punctuation">)</span>                <span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token function">close</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">xorenc</span><span class="token punctuation">(</span>flag_filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_7C1068<span class="token punctuation">,</span> <span class="token number">15LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>flag_filename<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v6 <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_72C2D0</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v19<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>flag_content_len <span class="token operator">=</span> v20<span class="token punctuation">,</span> <span class="token punctuation">(</span>flag_content <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v20<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token function">close</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> flag_content<span class="token punctuation">,</span> flag_content_len<span class="token punctuation">)</span> <span class="token operator">!=</span> flag_content_len <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token function">free</span><span class="token punctuation">(</span>flag_content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          v16 <span class="token operator">=</span> <span class="token function">sub_402DEE</span><span class="token punctuation">(</span>flag_content<span class="token punctuation">,</span> flag_content_len<span class="token punctuation">,</span> v26<span class="token punctuation">,</span> v23<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">free</span><span class="token punctuation">(</span>flag_content<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v16 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_72CBA0</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">sub_72C300</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token function">free</span><span class="token punctuation">(</span>v16<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">close</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">goto</span> LABEL_34<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">write</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v16<span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>v16<span class="token punctuation">)</span><span class="token punctuation">;</span>            v7 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>flag_filename<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_72C2D0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v7<span class="token punctuation">,</span> v21<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v22 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                v17 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> v17 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                  v18 <span class="token operator">=</span> v17<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> v22<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">4096LL</span> <span class="token punctuation">)</span>                    <span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>              <span class="token function">close</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token function">close</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>LABEL_34<span class="token operator">:</span>  result <span class="token operator">=</span> v29 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>    <span class="token function">sub_72F780</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下他的執行邏輯</p><ol><li>首先他先取了一個16 bytes 的隨機字串，並且經過了<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      v28<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_8E6110 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v23<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v28<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>qword_8E6110 <span class="token operator">+</span> <span class="token punctuation">(</span>v23<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>這樣的加密過後輸出AES_IV&#x3D;XXXX</li><li>再取一個 32 bytes 的隨機字串，對這個字串做<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> aAcsc2025<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"acsc2025"</span><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">sub_403086</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ah] [rbp-Eh]</span>  <span class="token keyword">unsigned</span> __int64 i<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-8h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> aAcsc2025<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">sub_402D55</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>i <span class="token operator">^</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__int64 <span class="token function">sub_402D55</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// edx</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-8h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-4h]</span>  v2 <span class="token operator">=</span> <span class="token number">305419896</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v2<span class="token punctuation">;</span>    result <span class="token operator">=</span> v0 <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v2<span class="token punctuation">;</span>    v2 <span class="token operator">^=</span> v0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>這樣的加密之後，執行xorenc 將硬編碼進去的字串與key&#x3D; “acsc2025” XOR 解密後以這個解密後的字串當作路徑將加密後過的隨機32 bytes 寫入進去</li><li>最後再使用xorenc 解密另一個硬編碼的字串與key&#x3D; “acsc2025” XOR 解密後，將這個解密過後的路徑檔案內容先讀出來並且進行AES 加密後再寫回去，而AES 的key 是之前取的隨機16 bytes 的字串，IV 則也是之前取的隨機32 bytes 的字串</li></ol><p>那這樣就可以整理等等解密的思路</p><ul><li>先把 會經過XOR 解密的路徑先解密出來</li><li>得知 IV 與 KEY</li><li>最後AES 解密</li></ul><h2 id="XOR-解密字串"><a href="#XOR-解密字串" class="headerlink" title="XOR 解密字串"></a>XOR 解密字串</h2><p>這邊首先先將硬編碼的兩個字串XOR解密，這邊直接使用 Cyberchef<br>首先先處理第一個 xor 字串解密</p><p><img src="/assets/6YFdqMps4SghJHZtqHII8pqmA2a4DIpymHRXSdpDpeM=.png"></p><p>ok 知道了他會將隨機32 bytes 字串放進<code>/var/log/debian.log</code>中</p><p>現在解第二個xor解密字串</p><p><img src="/assets/OadaDHOPM3FdCsLs7aLbEZBEDUMViQN4NaN10ykdgMU=.png"></p><p>ok，這邊也得知道他會去<code>/home/acsc/flag</code>中將自容讀出來並加密他再寫回去。</p><p>有了以上資訊之後接下來要拿到 IV 與 KEY</p><h2 id="IV"><a href="#IV" class="headerlink" title="IV"></a>IV</h2><p>加密過後的 IV 我們可以知道他會輸出到console 上，因此我們可以直接試試看strings 這個 linux 記憶體dump 他把它輸出的AES_IV&#x3D;XXX抓下來</p><pre class="line-numbers language-none"><code class="language-none">strings &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; | Select-String -Pattern &#39;AES_IV&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/ti0DtfblBAlFp2BZB5kNFIVuDG0i-7kypk8KC5YHA9k=.png"></p><p>成功抓到後，接下來寫解密腳本，這邊請AI代寫，把原本的隨機16 bytes 字串還原</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// Hex character lookup table (assuming standard hex characters)</span><span class="token keyword">char</span> hex_chars<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789ABCDEF"</span><span class="token punctuation">;</span><span class="token comment">// Function to decode hex string back to binary</span><span class="token keyword">void</span> <span class="token function">decode_hex_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> hex_string<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> output<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// Get high nibble (first hex character)</span>        <span class="token keyword">char</span> high_char <span class="token operator">=</span> hex_string<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// Get low nibble (second hex character)</span>        <span class="token keyword">char</span> low_char <span class="token operator">=</span> hex_string<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// Convert hex characters to values</span>        <span class="token keyword">int</span> high_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> low_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>high_char <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> high_char <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span>            high_val <span class="token operator">=</span> high_char <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>high_char <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> high_char <span class="token operator">&lt;=</span> <span class="token char">'F'</span><span class="token punctuation">)</span>            high_val <span class="token operator">=</span> high_char <span class="token operator">-</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>high_char <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> high_char <span class="token operator">&lt;=</span> <span class="token char">'f'</span><span class="token punctuation">)</span>            high_val <span class="token operator">=</span> high_char <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>low_char <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> low_char <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span>            low_val <span class="token operator">=</span> low_char <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>low_char <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> low_char <span class="token operator">&lt;=</span> <span class="token char">'F'</span><span class="token punctuation">)</span>            low_val <span class="token operator">=</span> low_char <span class="token operator">-</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>low_char <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> low_char <span class="token operator">&lt;=</span> <span class="token char">'f'</span><span class="token punctuation">)</span>            low_val <span class="token operator">=</span> low_char <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">// Combine high and low nibbles</span>        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>high_val <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> low_val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to encode binary to hex string (original encoding function)</span><span class="token keyword">void</span> <span class="token function">encode_hex_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> output<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        output<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> hex_chars<span class="token punctuation">[</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> hex_chars<span class="token punctuation">[</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    output<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Given hex string</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> hex_string <span class="token operator">=</span> <span class="token string">"33F27DE365AB35FFC29CB4FEEB506B34"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hex_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binary_length <span class="token operator">=</span> hex_length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=== Hex Decoder ===\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input hex string: %s\n"</span><span class="token punctuation">,</span> hex_string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hex string length: %d\n"</span><span class="token punctuation">,</span> hex_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Expected binary length: %d bytes\n\n"</span><span class="token punctuation">,</span> binary_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Allocate buffer for decoded data</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> decoded_data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>binary_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>decoded_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Memory allocation failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Decode hex string to binary</span>    <span class="token function">decode_hex_string</span><span class="token punctuation">(</span>hex_string<span class="token punctuation">,</span> decoded_data<span class="token punctuation">,</span> binary_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Print decoded data as hex</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Decoded binary data (hex): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X"</span><span class="token punctuation">,</span> decoded_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Print decoded data with spaces for readability</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Decoded binary data (hex with spaces): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X "</span><span class="token punctuation">,</span> decoded_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Print decoded data as bytes</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Decoded binary data (bytes): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> decoded_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Verify by re-encoding</span>    <span class="token keyword">char</span><span class="token operator">*</span> reencoded <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>hex_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reencoded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">encode_hex_string</span><span class="token punctuation">(</span>decoded_data<span class="token punctuation">,</span> reencoded<span class="token punctuation">,</span> binary_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Re-encoded verification: %s\n"</span><span class="token punctuation">,</span> reencoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>hex_string<span class="token punctuation">,</span> reencoded<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"✓ SUCCESS: Re-encoding matches original!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"✗ FAILED: Re-encoding does not match original!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>reencoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>decoded_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>輸出為</p><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D; Hex Decoder &#x3D;&#x3D;&#x3D;Input hex string: 33F27DE365AB35FFC29CB4FEEB506B34Hex string length: 32Expected binary length: 16 bytesDecoded binary data (hex): 33F27DE365AB35FFC29CB4FEEB506B34Decoded binary data (hex with spaces): 33 F2 7D E3 65 AB 35 FF C2 9C B4 FE EB 50 6B 34 Decoded binary data (bytes): 51 242 125 227 101 171 53 255 194 156 180 254 235 80 107 52 Re-encoded verification: 33F27DE365AB35FFC29CB4FEEB506B34✓ SUCCESS: Re-encoding matches original!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得知到IV &#x3D; <code>33F27DE365AB35FFC29CB4FEEB506B34</code></p><h2 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h2><p>那之前的資訊可以知道他會寫在<code>/var/log/debian.log</code>中，因此我們直接把他從記憶體dump 出來</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; linux.pagecache.InodePages --find &#39;&#x2F;var&#x2F;log&#x2F;debian.log&#39; --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/kc7lICbpxTD3HkLsMYHde6cEmfN5xWXxQCsNO75YkBo=.png"></p><p>成功dump 之後直後就可以寫解密還原key，這邊一樣AI代寫解密腳本</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// The key used in encryption</span><span class="token keyword">char</span> aAcsc2025<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"acsc2025"</span><span class="token punctuation">;</span><span class="token comment">// Decoy function (same as in encryption)</span><span class="token class-name">int64_t</span> <span class="token function">sub_402D55</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// edx</span>    <span class="token class-name">int64_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-8h]</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-4h]</span>    v2 <span class="token operator">=</span> <span class="token number">305419896</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v0 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v2<span class="token punctuation">;</span>        result <span class="token operator">=</span> v0 <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v2<span class="token punctuation">;</span>        v2 <span class="token operator">^=</span> v0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Decryption function</span><span class="token class-name">uint64_t</span> <span class="token function">decrypt_data</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span> encrypted_data<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> output_buffer<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ah] [rbp-Eh]</span>    <span class="token class-name">uint64_t</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-8h]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> length<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment">// Get the encrypted byte</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encrypted_byte <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>encrypted_data <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Calculate rotation amount (same as encryption)</span>        <span class="token keyword">int</span> rotation_amount <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// Reverse the bit rotation</span>        <span class="token comment">// Original: rotated = (value &lt;&lt; (8 - rotation)) | (value >> rotation)</span>        <span class="token comment">// Reverse: value = (rotated >> (8 - rotation)) | (rotated &lt;&lt; rotation)</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rotated_value <span class="token operator">=</span> <span class="token punctuation">(</span>encrypted_byte <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> rotation_amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>                                      <span class="token punctuation">(</span>encrypted_byte <span class="token operator">&lt;&lt;</span> rotation_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Extract v5: v5 = rotated_value - (i ^ 0x13)</span>        v5 <span class="token operator">=</span> rotated_value <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Call the decoy function if the same condition is met</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">sub_402D55</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Reverse the XOR with the key</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output_buffer <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> v5 <span class="token operator">^</span> aAcsc2025<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s &lt;encrypted_file>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Cannot open file %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Get file size</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> file_size <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"File size: %ld bytes\n"</span><span class="token punctuation">,</span> file_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Read encrypted data</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>encrypted_data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>encrypted_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Memory allocation failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">size_t</span> bytes_read <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>encrypted_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">!=</span> file_size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Could not read entire file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>encrypted_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Print encrypted data as hex</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Encrypted data (hex): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> file_size <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Show first 50 bytes</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span> encrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_size <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Allocate buffer for decrypted data</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>decrypted_data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>file_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>decrypted_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Memory allocation failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>encrypted_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// Decrypt</span>    <span class="token function">decrypt_data</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span>encrypted_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span>decrypted_data<span class="token punctuation">,</span> file_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    decrypted_data<span class="token punctuation">[</span>file_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token comment">// Print decrypted data</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypted data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"As hex (continuous): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> file_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X"</span><span class="token punctuation">,</span> decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"As hex (with spaces): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> file_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X "</span><span class="token punctuation">,</span> decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"As text (if printable): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> file_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\\x%02X"</span><span class="token punctuation">,</span> decrypted_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Try to save decrypted data to a file</span>    <span class="token keyword">char</span> output_filename<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%s.decrypted"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FILE <span class="token operator">*</span>output_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>output_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>decrypted_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>output_file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypted data saved to: %s\n"</span><span class="token punctuation">,</span> output_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>encrypted_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>decrypted_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>輸出</p><pre class="line-numbers language-none"><code class="language-none">File size: 32 bytesEncrypted data (hex): 5a 47 47 78 19 cc 3e a3 26 58 2a 14 33 a0 40 d0 b6 c8 d0 e4 0b a3 d1 ea f5 df 65 83 0f 04 9f 36 Decrypted data:As hex (continuous): C0685A143E2D38BA50244B4A753A31810B42F62D68D2D1D381165153E0C3F01FAs hex (with spaces): C0 68 5A 14 3E 2D 38 BA 50 24 4B 4A 75 3A 31 81 0B 42 F6 2D 68 D2 D1 D3 81 16 51 53 E0 C3 F0 1F As text (if printable): \xC0hZ\x14&gt;-8\xBAP$KJu:1\x81\x0BB\xF6-h\xD2\xD1\xD3\x81\x16QS\xE0\xC3\xF0\x1FDecrypted data saved to: inode_0x8a6161fc0a78.dmp.decrypted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得知到KEY &#x3D; <code>C0685A143E2D38BA50244B4A753A31810B42F62D68D2D1D381165153E0C3F01F</code></p><h2 id="解密flag"><a href="#解密flag" class="headerlink" title="解密flag"></a>解密flag</h2><p>知道了key跟IV之後，就可將flag檔案dump 出來並進行解密，這邊AES解密也是交給Cyberchef</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\yunshiuan\Desktop\Tools\volatility3 &gt; python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\asac\chall.raw&quot; linux.pagecache.InodePages --find &#39;&#x2F;home&#x2F;acsc&#x2F;flag&#39; --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/-PZ5CPQtGkp0zqAPN7bfUTUVg39PT-Tj0fcnppIV0vg=.png"></p><p><img src="/assets/163DjJ9EGoUgMQqn_098gKO1OmfSzY686rKvl6Bg_Dc=.png"></p><p>flag跑出來代表成功解出這題了！</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>我覺得這題是挺不錯的，包含了Linux Memory Forensic 以及逆向的能力，賽中解出這題的成就感挺大的，確實如果我之前沒有接觸過 Linux 記憶體分析的話可能就會先耗在處理錯誤的地方一段時間。</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACSC </tag>
            
            <tag> Forensic </tag>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> Linux </tag>
            
            <tag> 記憶體鑑識 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果我獲得到了一個讀心術，我想要分析企鵝先生的記憶</title>
      <link href="/2025/09/18/LinuxMemoryForensic/"/>
      <url>/2025/09/18/LinuxMemoryForensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>今天我想要分享關於在做Linux Memory Forensic 時會遇到的問題，現在搜尋的記憶體鑑識相關的入門文章與介紹，大多都是以分析 Windows 記憶體 Dump 為主，我個人在入門時也是從 Windows 開始，而我是參加 2025 AIS3的 CTF 組時剛好趁這個機會可以試試看學習 Linux 記憶體鑑識的部分，發現其實分析 Linux 記憶體 Dump 會出現一些有趣的問題，也藉由這次的機會跟大家分享。</p><p>今天的鐵人賽分分享會主要會用自己製作出的 Linux Memory Dump，檔案會放在 <a href="https://class.nckuctf.org/challenges#%E4%BC%81%E9%B5%9D%E5%85%88%E7%94%9F%E8%A8%98%E6%86%B6%E5%88%86%E6%9E%90%E8%A1%93%F0%9F%90%A7-186">NCKUCTF ctfd</a> 上，如果你對 Linux 的記憶體分析已經很熟悉的，可以先挑戰看看。</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h2><p>下載連結：</p><p>Volatility 2 :  <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></p><p>Volatility 3 :  <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p><p>經典的記憶體分析工具，利用指令可以分析 memory dump 中的關鍵訊息，像是進程、網路連線、檔案……等等。</p><p>基本的操作這邊推薦可以直接上網查有人整理好的指令doc</p><p>而Volatility分為2與3版，差別就是一個是要使用 python2 執行，另一個是用 python3 執行，並且現在Volatility 2 已經沒有在維護了，但是一些 Plugin 的完整度在目前為止還是比 Volatility 3 還要高並且豐富，所以有些人還是會比較會偏向使用 Volatility 2 ，今天分享會主要使用 Volatility 3</p><hr><h1 id="問題1-Symbol-Table-缺失"><a href="#問題1-Symbol-Table-缺失" class="headerlink" title="問題1 : Symbol Table 缺失"></a>問題1 : Symbol Table 缺失</h1><p>首先，拿到一個 Memory 檔，起手式大家可能會想要先看一下這個 Memory 檔是什麼作業系統，並且Linux 版本是什麼？所以都會先下這個指令</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\demo.mem&quot; banners<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/lp9id3l03MN-2YvGo6MD_4MBcxEHXvGNGoVYb-RtZHU=.png"></p><p>得知了他的作業系統與版本後，接下來可能會想要用 pslist 或者 pstree 去看有什麼可疑的進程，</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\demo.mem&quot; linux.pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是有很大的機率會出現下面的錯誤</p><p><img src="/assets/Sdu9b3WAFJUHgbvA1O6nrf3I3MMzvQ9wi0rtwjHDoYc=.png"></p><p>這個錯誤是什麼意思？這時候就需要提到 Volatility 是怎麼對一個記憶體進行分析的</p><h2 id="什麼是Symbol-Table"><a href="#什麼是Symbol-Table" class="headerlink" title="什麼是Symbol Table"></a>什麼是Symbol Table</h2><p>如果有人把這個錯誤丟進GPT或者賞網查，你應該會得知到說他是缺少Symbol Table </p><p>Volatility 在分析一個記憶體時會需要這張 Symbol Table ，是因為這個包含了函式的名稱，函式的偏移量以及函式的type等等，因此 Volatitily 在分析時才能定位到正確的進入點進行分析，另外他會存在volility3 指定位置中並且是json檔</p><p><img src="/assets/iW_yfumwDFTW1j-QAqBUVt1_7KU10wIRbrQgY0BhswM=.png"></p><p>其實在官網有給一些基本的 Symbol Table ，但是因為 Linux 核心更新的速度很快，因此官網給的根本完全不夠。</p><p><img src="/assets/FHI0Frf79z8wy1J9jl88-pRVprqUw1DlPrkbBNRyhZA=.png"></p><p>那怎麼辦？這邊提供兩個解決方式：</p><h2 id="解法一：下載別人整理的"><a href="#解法一：下載別人整理的" class="headerlink" title="解法一：下載別人整理的"></a>解法一：下載別人整理的</h2><p>有開源者定期會去抓最新出的 Linux  核心版本的 Symbol Table 這邊推薦github 連結</p><p><a href="https://github.com/Abyss-W4tcher/volatility3-symbols">https://github.com/Abyss-W4tcher/volatility3-symbols</a></p><p><a href="https://github.com/Abyss-W4tcher/volatility2-profiles">https://github.com/Abyss-W4tcher/volatility2-profiles</a></p><p>這個 github repo 最近都還有持續在維護，更新的很快，可以參考看看，下載後放在volatility 指定放 Symbol 的目錄即可<code>/volatility3/symbols/linux/</code></p><h2 id="解法二：自己做一個"><a href="#解法二：自己做一個" class="headerlink" title="解法二：自己做一個"></a>解法二：自己做一個</h2><p>如果需要的 Symbol Table 太新了還沒有人做怎麼辦，那就是自己做的一個。</p><p>官網的<a href="https://volatility3.readthedocs.io/en/latest/symbol-tables.html#mac-or-linux-symbol-tables">doc</a>中有提供製作的步驟，我們可以照著他的順序製作。這邊提供的是其中一個製作的方式，網路上其實有其他人分享其他方式，這邊給大家參考</p><p><img src="/assets/K6Eljy3kKpfYZiGEchOsK-DwHLqEvoHC33diWpBhNxI=.png"></p><p>首先就是run banners 看他的 Linux Kernel 版本以及對應的作業系統</p><p>以我們最一開始看到的 Linux Kernel  版本是 5.15.0-151 並且作業系統是 Ubuntu，上網查會發現他是Ubuntu 22.04。</p><p>我們接下來開一台 Ubuntu 22.04 環境的虛擬機，獲得官網步驟當中提到的 debug kernel 副本</p><p>首先先看一下現在環境的Linux 版本</p><p><img src="/assets/ofV0zLwzXtZRygWX59xFrO1LxDqOIm3YSvVuRWhJOA0=.png"></p><p>現在是5.15.0-153，跟我們 banners 出來的版本有差別，不過沒關係因為之後我們可以選擇下載我們想要的版本。</p><p>接下來執行以下指令去下載一個叫做 vmlinux-5.15.0-151-generic 的檔案，這個檔案就是我們需要debug kernel 副本檔，因為他裡面就是存著函式的名稱，函式的偏移量以及函式的type等等</p><pre class="line-numbers language-none"><code class="language-none">echo &quot;deb http:&#x2F;&#x2F;ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiversedeb http:&#x2F;&#x2F;ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiversedeb http:&#x2F;&#x2F;ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse&quot; | \sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ddebs.listsudo apt install ubuntu-dbgsym-keyringsudo apt-get updatesudo apt-get install linux-image-5.15.0-151-generic-dbgsym<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下載完後我們就可以在<code>/usr/lib/debug/boot</code>這個路徑看到我們下載的vmlinux-5.15.0-151-generic。</p><p><img src="/assets/TcDmGP--_7m_wvB8KF7YNFkvWwW5NNx8ugo7krHhZu0=.png"></p><p>接下來官方建議使用 <a href="https://github.com/volatilityfoundation/dwarf2json">dwarf2json</a> 這個工具將我們剛剛下載的vmlinux 檔案轉化成 json 檔，變成 Volatility 可以讀取的 Symbol table ，然後因為他是用 Golang 寫的所以要安裝一下 Golang </p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;volatilityfoundation&#x2F;dwarf2jsoncd dwarf2json&#x2F;sudo apt install golang-gogo mod download github.com&#x2F;spf13&#x2F;pflaggo build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來工具跟檔案都用好後就可以開始進行轉換。</p><pre class="line-numbers language-none"><code class="language-none">sudo .&#x2F;dwarf2json linux --elf &#x2F;usr&#x2F;lib&#x2F;debug&#x2F;boot&#x2F;vmlinux-5.15.0-151-generic &gt; vmlinux-5.15.0-151-generic.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>轉換後看你要開http server 把檔案抓下來放到你自己的環境 還是要直接在裝一個volatility 在虛擬機都ok，之後把它丟進 Volatility 放 Symbol Table 的指定位置<code>/volatility3/symbols/linux/</code></p><p><img src="/assets/sys27bqGg2bYia4Z06Moo4Ae1LGDz43LnZVqqLyc42w=.png"></p><p>放好後這樣就完成了，可以驗證一下有沒有 work ，可以再跑一次pslist 看看</p><p><img src="/assets/pxqLWFwoscWIgWBZfGOf03-i4EGu5tl_mBz5769DUl0=.png"></p><p>發現成功執行，並且驗證我們製作的Symbol Table 可以 work </p><h1 id="問題2-HOW-TO-DUMPFILE"><a href="#問題2-HOW-TO-DUMPFILE" class="headerlink" title="問題2 : HOW TO DUMPFILE ?"></a>問題2 : HOW TO DUMPFILE ?</h1><p>在Linux 記憶體分析部分，他並沒有跟 Windows 一樣有 dumpflies 一樣的 Plugin，但是根據這個 <a href="https://github.com/volatilityfoundation/volatility3/issues/1312">issues</a> 有人有整理出了dump 的方式</p><ul><li>Processes: <code>linux.pslist.PsList --dump</code></li><li>ELFs: <code>linux.elfs.Elfs --dump</code></li><li>Memory maps: <code>linux.proc.Maps --dump</code></li><li>Files from the page cache: <code>linux.pagecache.InodePages --dump</code></li></ul><p>那根據他所整理出來的資訊，我們就可以跟 windows 的 dumpfiles 一樣，將 Linux 記憶體中我們想要的檔案 dump 出來。</p><p>這邊一樣用同樣的記憶體 Dump 做 demo </p><p>你如果想要把&#x2F;etc&#x2F;passwd dump 出來，可以先看一下怎麼用<code>linux.pagecache.InodePages</code> 這個Plugin</p><pre class="line-numbers language-none"><code class="language-none">PS C:\Users\yunshiuan\Desktop\Tools\volatility3 &gt; python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\demo.mem&quot; linux.pagecache.InodePages -hVolatility 3 Framework 2.26.2usage: vol.py linux.pagecache.InodePages [-h] [--find FIND] [--inode INODE] [--dump]Lists and recovers cached inode pagesoptions:  -h, --help     show this help message and exit  --find FIND    Filename (full path) to find  --inode INODE  Inode address  --dump         Extract inode content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<code>--find</code>直接用字串搜尋想要的檔案，也可以用<code>--inode</code> 用Inode address 去搜尋，要用Inode address 搜尋之前需要先用<code>linux.pagecache.Files</code>查詢檔案的 Inode address ，最後再下一個<code>--dump</code>把檔案dump 出來</p><p>之後dump file 就可以用下面的指令</p><pre class="line-numbers language-none"><code class="language-none">PS C:\Users\yunshiuan\Desktop\Tools\volatility3 &gt; python3 .\vol.py -f &quot;C:\Users\yunshiuan\Desktop\demo.mem&quot; linux.pagecache.InodePages --find &quot;&#x2F;etc&#x2F;passwd&quot; --dumpVolatility 3 Framework 2.26.2Progress:  100.00               Stacking attempts finishedPageVAddr       PagePAddr       MappingAddr     Index   DumpSafe        Flags   Output File0xdaac04525100  0x114944000     0x9615004ade70  0       True    active,has_hwpoisoned,lru,mappedtodisk,referenced,reported,uptodate     inode_0x9615004adcf8.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後看一下<code>inode_0x9615004adcf8.dmp</code>是不是我們要的</p><p><img src="/assets/T012mjhPrjq3Q2mlie0u6nVQKXmBq4zg2NaS0U8MzPw=.png"></p><p>那我們就成功將我們想要的東西 dump 出來</p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>其實 Windows 似乎也會遇到 Sysbol Table 缺失的問題，有機會的話我應該也會研究看看 Windows 的 Symbol Table 怎麼做，其他 Linux 記憶體分析的步驟跟 Windows 也大同小異，只是也多了一些 Plugin 可以使用，大家有興趣可以自己再嘗試看看，另外也可以去 NCKUCTF ctfd 把我放的 flag 解出來喔！</p><hr><h1 id="📚-參考資料"><a href="#📚-參考資料" class="headerlink" title="📚 參考資料"></a>📚 參考資料</h1><p><a href="https://github.com/volatilityfoundation/volatility3/issues/1312">https://github.com/volatilityfoundation/volatility3/issues/1312</a></p><p><a href="https://volatility3.readthedocs.io/en/latest/symbol-tables.html">https://volatility3.readthedocs.io/en/latest/symbol-tables.html</a></p><p><a href="https://cpuu.hashnode.dev/how-to-perform-memory-forensic-analysis-in-linux-using-volatility-3">https://cpuu.hashnode.dev/how-to-perform-memory-forensic-analysis-in-linux-using-volatility-3</a></p><p><a href="https://daniel-schwarzentraub.medium.com/tryhackme-free-room-profiles-using-volatility3-ba94240e2f57">https://daniel-schwarzentraub.medium.com/tryhackme-free-room-profiles-using-volatility3-ba94240e2f57</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Volatility </tag>
            
            <tag> forensic </tag>
            
            <tag> memoryforensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛤？為什麼我做記憶體鑑識還要看evtx，我不知道我還要記Event ID啊，不鑑了，爛鑑識！</title>
      <link href="/2025/09/17/%E8%9B%A4%EF%BC%9F%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%81%9A%E8%A8%98%E6%86%B6%E9%AB%94%E9%91%91%E8%AD%98%E9%82%84%E8%A6%81%E7%9C%8Bevtx%EF%BC%8C%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E6%88%91%E9%82%84%E8%A6%81%E8%A8%98Event%20ID%E5%95%8A%EF%BC%8C%E4%B8%8D%E9%91%91%E4%BA%86%EF%BC%8C%E7%88%9B%E9%91%91%E8%AD%98%EF%BC%81/"/>
      <url>/2025/09/17/%E8%9B%A4%EF%BC%9F%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%81%9A%E8%A8%98%E6%86%B6%E9%AB%94%E9%91%91%E8%AD%98%E9%82%84%E8%A6%81%E7%9C%8Bevtx%EF%BC%8C%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E6%88%91%E9%82%84%E8%A6%81%E8%A8%98Event%20ID%E5%95%8A%EF%BC%8C%E4%B8%8D%E9%91%91%E4%BA%86%EF%BC%8C%E7%88%9B%E9%91%91%E8%AD%98%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p><del>標題是我在剛接觸到這個技巧時的心聲</del></p><p>今天要分享的是在做記憶體分析時其實是有機會可以把 Evtx 抓出來看的，獲得更多的線索，因為 Windows 常常會記錄事件到Evtx中</p><hr><h1 id="🍘-仙貝工具"><a href="#🍘-仙貝工具" class="headerlink" title="🍘 仙貝工具"></a>🍘 仙貝工具</h1><h2 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h2><p>下載連結：</p><p>Volatility 2 :  <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></p><p>Volatility 3 :  <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p><p>經典的記憶體分析工具，利用指令可以分析 memory dump 中的關鍵訊息，像是進程、網路連線、檔案……等等。</p><p>基本的操作這邊推薦可以直接上網查有人整理好的指令doc</p><p>而Volatility分為2與3版，差別就是一個是要使用 python2 執行，另一個是用 python3 執行，並且現在Volatility 2 已經沒有在維護了，但是一些 Plugin 的完整度在目前為止還是比 Volatility 3 還要高並且更豐富，所以有些人還是會比較會偏向使用 Volatility 2 ，這次會給兩個版本的Volatility工具指令給大家參考</p><h2 id="Eric-Zimmerman’s-Tools"><a href="#Eric-Zimmerman’s-Tools" class="headerlink" title="Eric Zimmerman’s Tools"></a>Eric Zimmerman’s Tools</h2><p>下載連結：<a href="https://ericzimmerman.github.io/#!index.md">https://ericzimmerman.github.io/#!index.md</a></p><p>這是由Eric Zimmerman鑑識專家開發出的其中一個工具，他在網站中也有多出很多其他非常好用的數位鑑識工具可以使用，而這次會使用 Evtxcmd 的功能是他可以將evtx 換成CSV檔案以及Timeline Explorer 工具，可以查看CSV檔，</p><hr><h1 id="Dump-出-Evtx-檔案"><a href="#Dump-出-Evtx-檔案" class="headerlink" title="Dump 出 Evtx 檔案"></a>Dump 出 Evtx 檔案</h1><p>我們可以先檢查我們的memory 檔中有沒有確定有evtx檔</p><h2 id="Volatility-2"><a href="#Volatility-2" class="headerlink" title="Volatility 2"></a>Volatility 2</h2><pre class="line-numbers language-none"><code class="language-none">vol.py -f .&#x2F;memory.dmp --profile&#x3D;Win10x64_14393 -g 0xf8004a000b20 filescan | grep &#39;.evtx&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Volatility-3"><a href="#Volatility-3" class="headerlink" title="Volatility 3"></a>Volatility 3</h2><pre class="line-numbers language-none"><code class="language-none">vol -f memory.dmp windows.filescan | grep &#39;.evtx&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/2lVDyAjMs3yOlsZxMikXlj2nIgpeJqE_tenYg-RGAog=.png"></p><p>我們可以利用 FileScan 的 pugin 幫助我們檢查是否有我們想要的檔案，圖片中可以得知到說確實有，接下來就可以將他們dump下來，Volatility 2 以及Volatility 3 的 Dumpfile 支援 regex ，可以使用它幫助我們找到所有我們需要的 evtx</p><h2 id="Volatility-2-1"><a href="#Volatility-2-1" class="headerlink" title="Volatility 2"></a>Volatility 2</h2><pre class="line-numbers language-none"><code class="language-none">vol.py -f .&#x2F;memory.dmp --profile&#x3D;Win10x64_14393 -g 0xf8004a000b20  dumpfiles --regex .evtx$ --ignore-case --dump-dir output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Volatility-3-1"><a href="#Volatility-3-1" class="headerlink" title="Volatility 3"></a>Volatility 3</h2><pre class="line-numbers language-none"><code class="language-none">vol -f memory.dmp windows.dumpfiles.DumpFiles --filter .evtx$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這個指令簡單來說就是從memory.dump 中 將結尾為.evtx的檔案全部抓出來，也可以指定看你想要看什麼evtx，再去更改regex即可。</p><p>假設我想要dump Security.evtx下來看</p><h2 id="Volatility-2-2"><a href="#Volatility-2-2" class="headerlink" title="Volatility 2"></a>Volatility 2</h2><pre class="line-numbers language-none"><code class="language-none">vol.py -f .&#x2F;memory.dmp --profile&#x3D;Win10x64_14393 -g 0xf8004a000b20 --regex Security.evtx$ --ignore-case --dump-dir output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Volatility-3-2"><a href="#Volatility-3-2" class="headerlink" title="Volatility 3"></a>Volatility 3</h2><pre class="line-numbers language-none"><code class="language-none">vol -f memory.dmp windows.dumpfiles.DumpFiles --filter Security.evtx$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/assets/n11TvjQIvmkx_EM-nMo45tSov2D461awpBgTU_khL3o=.png"></p><p>圖片中發現成功Dump出來東西了，但是怎麼會有兩個檔案，而且這兩個檔案一個是 vacb ，一個是 dat，跟 evtx 的關係不是說沒有感覺是一點關係都沒有，那什麼是 vacb，什麼是 dat ?</p><ul><li>vacb : Caching Data</li><li>dat : Less Fragile File</li></ul><p>簡單來說這兩個都儲存了 evtx 的資料，只是 dat 的儲存方式比較穩定可靠</p><p>因此其實也可以直接把 vacb 或 dat 副檔名直接改成 evtx ，就可以直接用內建的 Event viewer 查看</p><p><img src="/assets/Chv6PtoCP5Pxr6ytsdD9dJ-t5cpcGlqVz_joyxsW87c=.png"></p><p>但另外其實也可以用Evtxcmd 將它變成 CSV 檔查看</p><hr><h2 id="Evtxcmd-Evtx-to-CSV"><a href="#Evtxcmd-Evtx-to-CSV" class="headerlink" title="Evtxcmd- Evtx to CSV"></a>Evtxcmd- Evtx to CSV</h2><p>根據 <a href="https://github.com/EricZimmerman/evtx?tab=readme-ov-file">https://github.com/EricZimmerman/evtx?tab=readme-ov-file</a> 官方給的使用說明，可以使用以下指令將我們的 evtx 轉換成 csv </p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span>\EvtxECmd<span class="token punctuation">.</span>exe <span class="token operator">-</span>f <span class="token string">"..\..\file.0xca82b31c5990.0xca82b3848c70.SharedCacheMap.Security.evtx.vacb"</span> <span class="token operator">--</span>csv <span class="token punctuation">.</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下來就可以獲得一個csv檔，並且裡面的內容是evtx的內容</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\yunshiuan\Desktop\net9\EvtxeCmd > <span class="token punctuation">.</span>\EvtxECmd<span class="token punctuation">.</span>exe <span class="token operator">-</span>f <span class="token string">"..\..\file.0xca82b31c5990.0xca82b3848c70.SharedCacheMap.Security.evtx.vacb"</span> <span class="token operator">--</span>csv <span class="token punctuation">.</span><span class="token operator">/</span>EvtxECmd version 1<span class="token punctuation">.</span>5<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0Author: Eric Zimmerman <span class="token punctuation">(</span>saericzimmerman@gmail<span class="token punctuation">.</span>com<span class="token punctuation">)</span>https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/EricZimmerman/evtxCommand line: <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token punctuation">.</span>\<span class="token punctuation">.</span><span class="token punctuation">.</span>\file<span class="token punctuation">.</span>0xca82b31c5990<span class="token punctuation">.</span>0xca82b3848c70<span class="token punctuation">.</span>SharedCacheMap<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>evtx<span class="token punctuation">.</span>vacb <span class="token operator">--</span>csv <span class="token punctuation">.</span><span class="token operator">/</span>Warning: Administrator privileges not found!CSV output will be saved to <span class="token punctuation">.</span><span class="token operator">/</span>20250904074916_EvtxECmd_Output<span class="token punctuation">.</span>csvMaps loaded: 453Processing C:\Users\yunshiuan\Desktop\file<span class="token punctuation">.</span>0xca82b31c5990<span class="token punctuation">.</span>0xca82b3848c70<span class="token punctuation">.</span>SharedCacheMap<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>evtx<span class="token punctuation">.</span>vacb<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Chunk count: 30<span class="token punctuation">,</span> Iterating records<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Record <span class="token comment"># 68 (Event Record Id: 68): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 68 (Event Record Id: 68): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 69 (Event Record Id: 69): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 69 (Event Record Id: 69): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 70 (Event Record Id: 70): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 70 (Event Record Id: 70): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 71 (Event Record Id: 71): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 71 (Event Record Id: 71): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 72 (Event Record Id: 72): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 72 (Event Record Id: 72): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 73 (Event Record Id: 73): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 73 (Event Record Id: 73): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 78 (Event Record Id: 78): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 78 (Event Record Id: 78): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 79 (Event Record Id: 79): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 79 (Event Record Id: 79): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 83 (Event Record Id: 83): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessName"] not found! Replacing with empty string</span>Record <span class="token comment"># 83 (Event Record Id: 83): In map for event 4718, Property /Event/EventData/Data[@Name="ProcessId"] not found! Replacing with empty string</span>Record <span class="token comment"># 2529 (Event Record Id: 2529): In map for event 1100, Property /Event/UserData[@Name="ServiceShutdown"] not found! Replacing with empty string</span>Event log detailsFlags: IsDirtyChunk count: 30Stored/Calculated CRC: B5FC0719/B5FC0719Earliest timestamp: 2024-01-31 23:47:41<span class="token punctuation">.</span>1765022Latest timestamp:   2024-02-01 19:48:31<span class="token punctuation">.</span>0253493Total event log records found: 246Records included: 246 Errors: 0 Events dropped: 0Metrics <span class="token punctuation">(</span>including dropped events<span class="token punctuation">)</span>Event ID        Count1100            14608            24624            584625            14647            14648            74672            514688            234696            24717            104718            94720            14725            24728            14731            114732            34735            114738            64739            14797            54798            74799            34826            24902            24907            15024            15033            15379            23Processed 1 file in 1<span class="token punctuation">.</span>8517 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之後就可以用Timeline Explorer 或其他可以開 csv 的軟體去做想要的Event ID查詢或者字串的搜尋。</p><p><img src="/assets/M9NLjmdw8XqYgsflY7NZPbn3tEQ6x0CqxY7Zf7XbbPU=.png"></p><hr><h1 id="🤔-有更方便的做法？"><a href="#🤔-有更方便的做法？" class="headerlink" title="🤔 有更方便的做法？"></a>🤔 有更方便的做法？</h1><p>有！有一個工具叫做 [Rstudio](<a href="https://www.r-studio.com/Forensic-and-DataRecovery-Business.html)%EF%BC%8C%E4%BB%96%E6%9C%89GUI%E7%9A%84%E9%A0%81%E9%9D%A2%E5%8F%AF%E4%BB%A5%E5%88%86%E6%9E%90">https://www.r-studio.com/Forensic-and-DataRecovery-Business.html)，他有GUI的頁面可以分析</a> Memory 檔並且可以非常方便地將檔案 dump  出來</p><p><img src="/assets/a9lH4T4x_xAnbX7HPQeh_7Q804NXx0Vwwy9CWo14Q98=.png"></p><p>但是，如果你想要將他 dump 出來，免費版大小只能1024KB，基本的 Evtx 的大小都沒辦法復原</p><p><img src="/assets/nl8flZbSu3WTqUCt4faVzeO_zFpM2ubRZAQEQy9tuBg=.png"></p><p>付費有許多方案，有一次付清的跟年繳的，這邊就就給大家參考</p><p><img src="/assets/ZrRN-kC5LD44hzYYPkMk10gbq-hQ0KscOklFM_hST2o=.png"></p><hr><h1 id="📚-參考資料"><a href="#📚-參考資料" class="headerlink" title="📚 參考資料"></a>📚 參考資料</h1><p><a href="https://wongkenny240.gitbook.io/computerforensics/memory-analysis/volatility#windows-vista-2008-and-7-event-logs">https://wongkenny240.gitbook.io/computerforensics/memory-analysis/volatility#windows-vista-2008-and-7-event-logs</a></p><p><a href="https://github.com/EricZimmerman/evtx?tab=readme-ov-file">https://github.com/EricZimmerman/evtx?tab=readme-ov-file</a></p><p><a href="https://medium.com/ouspg/digging-into-the-vortex-of-unknown-memory-dump-part-1-x-aaa6e0ee81d3">https://medium.com/ouspg/digging-into-the-vortex-of-unknown-memory-dump-part-1-x-aaa6e0ee81d3</a></p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Volatility </tag>
            
            <tag> forensic </tag>
            
            <tag> memoryforensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撥開電腦的記憶找出最黑暗的部分</title>
      <link href="/2025/09/16/memoryforensic/"/>
      <url>/2025/09/16/memoryforensic/</url>
      
        <content type="html"><![CDATA[<h1 id="🧂-前言"><a href="#🧂-前言" class="headerlink" title="🧂 前言"></a>🧂 前言</h1><p>記憶體分析我認為是如果在一個 CTF 的 Forensic 分類上是比較有趣的題目，因為它不像硬碟鑑識隨隨便便就需要很大的空間，但是可以體驗到在一台被攻擊的電腦上尋找線索的感覺，因此今天要分享的是什麼是記憶體分析，以及最常使用的記憶體分析工具 Volatility。</p><hr><h1 id="🧠-什麼是記憶體鑑識？"><a href="#🧠-什麼是記憶體鑑識？" class="headerlink" title="🧠 什麼是記憶體鑑識？"></a>🧠 什麼是記憶體鑑識？</h1><p>記憶體鑑識是從電腦的隨機存取記憶體（RAM）中提取、分析和解釋數位證據的過程。其中會需要得知的是正在執行的程式、process、載入的 library、網路連線狀態、使用者輸入、甚至密碼或加密金鑰，有些是根本沒寫到硬碟的那種。</p><p>那為什麼需要記憶體鑑識？</p><ol><li>易失性資料保存<ol><li>RAM 中的資料在斷電後會消失</li><li>許多重要證據只存在於記憶體中</li><li>需要及時捕獲這些易失性資訊</li></ol></li><li>惡意軟體分析<ol><li>現代惡意軟體常駐記憶體，不留檔案痕跡</li><li>Rootkit、無檔案攻擊</li><li>記憶體注入技術</li></ol></li><li>攻擊行為追蹤<ol><li>網路連線狀態</li><li>執行中的程序</li><li>系統呼叫和API使用</li></ol></li></ol><p>所以如果拿到一台受攻擊的電腦，第一步會先對記憶體進行 dump，因為有可能攻擊者會對 disk 做清除或者湮滅證據，但記憶體通常還是會記錄這些攻擊證據，這就是為什麼記憶體分析這麼重要。</p><p>而記憶體鑑識工具大家最常用的就是 <strong>Volatility</strong> </p><hr><h1 id="📈-Volatility"><a href="#📈-Volatility" class="headerlink" title="📈 Volatility"></a>📈 Volatility</h1><p>Volatility 是一個 memory forensics 框架，用來從 memory dump 中提取系統運作時的各種資訊，包含正在跑的 process、網路連線、註冊表資料、開啟的 file handles 等等</p><p><img src="/assets/4x0S5xFsoEzzfSCA27Jem2vPeA6639E9lqBBWVLKuk0=.png"></p><p>最初的版本是 Volatility 2 ，因為寫在 Python 2 上，之後推出了 Volatility 3，並使用 Python3 編寫</p><p>下載連結：</p><ul><li>Volatility 2 : <a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a></li><li>Volatility 3 : <a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></li></ul><p>Github 中安裝步驟都有寫在 README.md 上，而 Volatility 2 的安裝方式會比 3 的安裝會多一步是需要先安裝 Python2 </p><p>以下介紹一些 Volatility 2 跟 3 的基本操作</p><h2 id="Volatility-2-基本操作"><a href="#Volatility-2-基本操作" class="headerlink" title="Volatility 2 基本操作"></a>Volatility 2 基本操作</h2><p>當你有一個記憶體 dump 的檔案，例如 memdump.img</p><ol><li>取得作業系統與版本<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出進程列表<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 pslistpython2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 pstree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看網路連線<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 netscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出檔案<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 filescan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>dump files<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 dumpfiles dumpfiles -Q 0x000000003fc61be0 -D c:\files -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看使用者活動或命令列歷史<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img --profile&#x3D;Win7SP1x64 cmdline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>其他對應指令可以下 <code>-h</code> 查看或者看官方的 doc </p><hr><h2 id="Volatility-3-基本操作"><a href="#Volatility-3-基本操作" class="headerlink" title="Volatility 3 基本操作"></a>Volatility 3 基本操作</h2><p>Volatility 3 就不用再下 profile，先假設 memdump.img 是 Windows </p><ol><li>取得作業系統與版本<pre class="line-numbers language-none"><code class="language-none">python2 vol.py -f memdump.img imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出進程列表<pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f memdump.img windows.pslistpython3 vol.py -f memdump.img windows.pstree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看網路連線<pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f memdump.img windows.netscanpython3 vol.py -f memdump.img windows.netstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>列出檔案<pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f memdump.img windows.filescan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>dump files<pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f memdump.img -o .&#x2F;files_out windows.dumpfiles --pid 1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看使用者活動或命令列歷史<pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f memdump.img windows.cmdline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>其他指令可以下 <code>-h</code> 查看或者看官方的 doc </p><hr><h1 id="要選-Volatility2-還是-Volatility3？"><a href="#要選-Volatility2-還是-Volatility3？" class="headerlink" title="要選 Volatility2 還是 Volatility3？"></a>要選 Volatility2 還是 Volatility3？</h1><p>我個人會建議兩個都裝，因為有時候會出現 Volatility2 跑不出來的，Volatility3 就可以，不然就是 Volatility2 有的插件 Volatility3 沒有等等，另外現在 Volatility2 已經沒有再維護了，現在主要都是 Volatility3 還在持續的更新，但是 Volatility2 以目前來說 Plugin 的完整度還是大於 Volatility3，因此常常會看到有些人到現在還是會使用 Volatility2 進行記憶體分析</p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>今天介紹了什麼是記憶體鑑識以及 Volatility 工具使用，接下來幾天會分享我在學習記憶體分析時學到的有趣技術或者</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 記憶體鑑識 </tag>
            
            <tag> Volatility </tag>
            
            <tag> forensic </tag>
            
            <tag> memoryforensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上一世我玩CTF之後我重生了，這一世我將變成藍隊向大家復仇</title>
      <link href="/2025/09/15/ithome_introduce/"/>
      <url>/2025/09/15/ithome_introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="🐤-自我介紹"><a href="#🐤-自我介紹" class="headerlink" title="🐤 自我介紹"></a>🐤 自我介紹</h1><p>大家好，我是 yunshiuan，目前就讀資訊工程學系，從大一開始接觸資安到現在快二年了，目前專注於藍隊技術以及 Reverse，但正在偷學 Web 。</p><p>剛接觸資安時，我是跟著成大資安社的社課一起學習的，並都是在 <a href="https://class.nckuctf.org/">https://class.nckuctf.org/</a> 上跟著練習，因此我首先接觸的不是藍隊，而是先將 Web、Crypto、Reverse、Pwn 都接觸過後才在想要走哪一個領域</p><p>而接觸到藍隊的契機是在準備 2025 全國技能競賽時，發現有一個大項是要考數位鑑識，因此我開始去Cyberdefender 上練習題目，雖然一開始對藍隊的印象就是看log，但我發現到藍隊的題目比我想像的還要有趣許多，要從龐大的資料中找出線索，並分析攻擊者是如何攻擊的，過程就像解謎或密室逃脫一樣。這種需要推理攻擊者思路與目的的挑戰，讓我發現自己更喜歡防守端的藍隊工作。因此我開始在 Cyberdefender 上學習更多的藍隊知識，並參與許多藍隊CTF比賽，最近也拿到了Certified CyberDefender Certification，之後也會找一天跟大家分享這張證照</p><p>目前有整理 Blue Team Cheatsheet 在我的 Blog 上，包括常見會遇到的 Event ID 以及工具，歡迎大家可以參考</p><p><a href="https://yunshiuan.com/2025/08/12/BlueTeamCheatSheet/">https://yunshiuan.com/2025/08/12/BlueTeamCheatSheet/</a></p><hr><h1 id="🛡️-x20-x70BA-什麼想要做這個主題？"><a href="#🛡️-x20-x70BA-什麼想要做這個主題？" class="headerlink" title="🛡️&#x20;&#x70BA;什麼想要做這個主題？"></a><strong>🛡️&#x20;</strong>&#x70BA;什麼想要做這個主題？</h1><p>這次的鐵人賽主題想要給各位帶來的是藍隊相關的有趣技術分享，但是會比較偏向CTF一點，因為我自己還沒有正式的藍隊實務經驗。</p><p>一方面除了是想要趁鐵人賽的機會將我學到的藍隊知識給大家，另一方面想要挑戰一下自己，能不能把學到的知識消化後轉化成想法，並持續分享 30 天，並且我覺得把學到的東西記錄下來也可以幫助我學習。</p><p>要做紀錄是因為在做分析時常常會需要面臨到上百G的硬碟或封包分析，像平常在打 CTF 的 forensic 題時，最常會發生下載的檔案已經壓縮過後還有10幾G，然後解壓縮後硬碟容量就爆炸了，所以不可能單純的盯著那上百G的檔案一個一個翻，進而需要工具以及技巧去幫助我們分析，這些技巧或者工具的使用如果不記下來就很快就會生疏，因此這次鐵人賽我才會選擇做藍隊相關工具與一些我覺得值得分享給大家的技巧。</p><hr><h1 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h1><p>Day1 這天跟大家分享一些我有接觸過的藍隊學習資源：</p><h2 id="Cyber-Defender"><a href="#Cyber-Defender" class="headerlink" title="Cyber Defender"></a>Cyber Defender</h2><p>[網站連結](<a href="https://cyberdefenders.org/blueteam-ctf-challenges/">https://cyberdefenders.org/blueteam-ctf-challenges/</a>)</p><p>Cyber Defender 是一個藍隊平台，他當中有許多Lab 以及課程可以參加或挑戰，但是大多都是要收費的，可是其中也有免費的Lab 可以挑戰，題目的品質也很高，他們有推出一個證照是Certified CyberDefender Certification，有興趣的可以考慮考考看</p><h2 id="Hack-The-Box"><a href="#Hack-The-Box" class="headerlink" title="Hack The Box"></a>Hack The Box</h2><p>[網站連結](<a href="https://www.hackthebox.com/">https://www.hackthebox.com/</a>)</p><p>大家對Hack The Box 的印象應該是比較偏向紅隊的滲透測試平台，但是其實Hack The Box 也有推出許多藍隊的課程以及 lab 給大家挑戰，其中他們也有推出一張藍隊證照叫 CDSA，有興趣也可以研究看看</p><h2 id="TryHackMe"><a href="#TryHackMe" class="headerlink" title="TryHackMe"></a>TryHackMe</h2><p>[網站連結](<a href="https://tryhackme.com/">https://tryhackme.com/</a>)</p><p>TryHackMe 跟 Hack The Box 差不多，雖然大家可能對他的印象也是紅隊練習平台，但是其中也有推出許多的藍隊模組或者Lab</p><h2 id="LetsDefend"><a href="#LetsDefend" class="headerlink" title="LetsDefend"></a>LetsDefend</h2><p>[網站連結](<a href="https://app.letsdefend.io/challenge">https://app.letsdefend.io/challenge</a>)</p><p>LetsDefend 是一個藍隊練習平台，裡面都是藍隊相關的Lab 可以挑戰，但大多也是需要付費才能挑戰。</p><p>其實還有很多很零碎的資源，像是別人寫的 Blog 或者 Writeup，每次都是遇到相關卡住的就狂查google。</p><hr><h1 id="☀️-總結"><a href="#☀️-總結" class="headerlink" title="☀️ 總結"></a>☀️ 總結</h1><p>在這30天中，我會分享我學習藍隊技術以及玩藍隊相關CTF題時我覺得有趣的技巧與工具大家分享，內容會偏向CTF為主。</p>]]></content>
      
      
      <categories>
          
          <category> 2025 鐵人賽 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2025 SEKAICTF Web 題解</title>
      <link href="/2025/08/20/2025sekaiCTF2025/"/>
      <url>/2025/08/20/2025sekaiCTF2025/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這場比賽的題解會以學習Web為主，Writeup會參考<a href="https://github.com/project-sekai-ctf/sekaictf-2025/tree/main/web">官方github連結</a>以及其他參賽者在網路上討論的內容</p><h1 id="My-flask-app"><a href="#My-flask-app" class="headerlink" title="My flask app"></a>My flask app</h1><p>這是一個flask製作的網頁</p><p>原始碼可以看到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5001</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>發現到他有開啟debug mod，根據<a href="https://book.hacktricks.wiki/en/network-services-pentesting/pentesting-web/werkzeug.html#werkzeug--flask-debug">這篇blog</a>可以試試看<code>/console</code>路徑但是這個console會需要用到pin碼，這個密碼是可以爆破的，需要兩個<code>probably_public_bits</code>、<code>private_bits</code></p><ul><li><p>probably_public_bits</p><ul><li><code>username</code></li></ul></li><li><p>private_bits</p></li></ul><p>另外從源碼可以發現到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/view'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> filename<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Filename is required"</span><span class="token punctuation">,</span> <span class="token number">400</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> content<span class="token punctuation">,</span> <span class="token number">200</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"File not found"</span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>訪問到view後他會訪問filename的參數，因此可以任意讀檔，透過這個</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> sekai </tag>
            
            <tag> Web </tag>
            
            <tag> 網頁安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF 題解整理</title>
      <link href="/2025/08/14/picoCTF-Problems/"/>
      <url>/2025/08/14/picoCTF-Problems/</url>
      
        <content type="html"><![CDATA[<p>EASY :</p><ul><li><a href="#transformation">Transformation</a></li><li><a href="#vault-door-training">vault-door-training</a></li></ul><p>HARD : </p><ul><li><a href="#not-crypto">not crypto</a></li><li><a href="#no_way_out">No-Way_Out</a></li></ul><span id="more"></span><hr><h2 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h2><p>Difficulty : Easy</p><p><a href="https://play.picoctf.org/practice/challenge/104">picoCTF連結</a></p><p>Description</p><blockquote><p>I wonder what this really is… enc ‘’.join([chr((ord(flag[i]) &lt;&lt; 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)])</p></blockquote><h3 id="觀察"><a href="#觀察" class="headerlink" title="觀察"></a>觀察</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這段程式碼看起來將一段文字編成了其他編碼，丟進去CyberChef選擇magic自偵測的方式即可拿到flag</p><p><a href="%22https://gchq.github.io/CyberChef/#recipe=Magic(3,true,false,'')&input=54Gp5o2v5I2U5Jm744S25b2i5qW0542f5qWu542044y05pGf5r2m5by45by345Wk45C446S45om9&oenc=65001%22">CyberChef</a></p><p>flag:</p><blockquote><p>picoCTF{16_bits_inst34d_of_8_75d4898b}</p></blockquote><hr><h2 id="vault-door-training"><a href="#vault-door-training" class="headerlink" title="vault-door-training"></a>vault-door-training</h2><p>Difficulty : Easy</p><p><a href="https://play.picoctf.org/practice/challenge/7">picoCTF連結</a></p><p>Description</p><blockquote><p>Your mission is to enter Dr. Evil’s laboratory and retrieve the blueprints for his Doomsday Project. The laboratory is protected by a series of locked vault doors. Each door is controlled by a computer and requires a password to open. Unfortunately, our undercover agents have not been able to obtain the secret passwords for the vault doors, but one of our junior agents obtained the source code for each vault’s computer! You will need to read the source code for each level to figure out what the password is for that vault door. As a warmup, we have created a replica vault in our training facility. The source code for the training vault is here: VaultDoorTraining.java</p></blockquote><h3 id="觀察-1"><a href="#觀察-1" class="headerlink" title="觀察"></a>觀察</h3><p>打開VaultDoorTraining.java後發現他在checkPassword函式中直接將玩家的輸入與w4rm1ng_Up_w1tH_jAv4_3808d338b46做比對，相同救回傳Access granted</p><pre class="line-numbers language-none"><code class="language-none">public boolean checkPassword(String password) &#123;return password.equals(&quot;w4rm1ng_Up_w1tH_jAv4_3808d338b46&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因此可以直接組出flag</p><p>flag:</p><blockquote><p>picoCTF{w4rm1ng_Up_w1tH_jAv4_3808d338b46}</p></blockquote><hr><h2 id="not-crypto"><a href="#not-crypto" class="headerlink" title="not crypto"></a>not crypto</h2><p>Difficulty : hard</p><p><a href="https://play.picoctf.org/practice/challenge/222">picoCTF連結</a></p><p>Description</p><blockquote><p>there’s crypto in here but the challenge is not crypto… 🤔</p></blockquote><h3 id="觀察-2"><a href="#觀察-2" class="headerlink" title="觀察"></a>觀察</h3><p>執行過後會要使用者輸入東西，丟入ida發現到中間有一大串的操作，最後有一個memcmp去比較兩個字串，有可能是比較我們輸入的字串與程式操作過後的字串做比較，因此可以下斷點在memcpy上面並觀察傳入的參數</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><p><img src="/./assets/no-crypto.png" alt="no-crypto.png"></p><p>flag:</p><blockquote><p>picoCTF{c0mp1l3r_0pt1m1z4t10n_15_pur3_w1z4rdry_but_n0_pr0bl3m?}</p></blockquote><hr><h2 id="No-Way-Out"><a href="#No-Way-Out" class="headerlink" title="No_Way_Out"></a>No_Way_Out</h2><p>Difficulty : hard</p><p><a href="https://play.picoctf.org/practice/challenge/361">picoCTF連結</a></p><p>Description</p><blockquote><p>Put this flag in standard picoCTF format before submitting. If the flag was h1_1m_7h3_f14g submit picoCTF{h1_1m_7h3_f14g} to the platform.Windows game, Mac game Use password <code>picoctf</code> to unzip archives.</p></blockquote><h3 id="觀察-3"><a href="#觀察-3" class="headerlink" title="觀察"></a>觀察</h3><p>先用detect it easy 觀察一下<br><img src="/./assets/NoWayOut_DIE.png" alt="NoWayOut_die"><br>沒殼 使用C&#x2F;C++</p><p>進入遊戲後在畫面的最上方有hint提示:Escape to find the flag<br><img src="/./assets/NoWayOut_Game.png" alt="NoWayOut_Game"><br>爬上梯子後被牆擋住，因此目標是要<strong>通過牆前往旗子的地方</strong><br>可能可以考慮以下解法</p><ul><li>更改玩家跳躍的功能</li><li>更改觸發flag的條件</li><li>瞬移到牆壁外面</li></ul><h3 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h3><h4 id="解法一-dnspy"><a href="#解法一-dnspy" class="headerlink" title="解法一: dnspy"></a>解法一: dnspy</h4><p>逛一下遊戲資料夾，發現有一個檔案名為</p><blockquote><p>&#x2F;pico_Data&#x2F;Managed&#x2F;Assembly-Csharp.dll</p></blockquote><p>看檔案名可以猜測主要的遊戲程式內容，我們需要改的內容會在這裡<br>打開dnspy 並將Assembly-Csharp.dll丟進去</p><p>目標是要改變玩家的<strong>跳躍功能</strong> 因此要在裡面找到處理跳躍功能的程式碼<br>翻找一下會發現是在EvolveGames-&gt;PlayerController的update()函式中</p><p><img src="/./assets/NoWayOut_dnspy.png" alt="NoWayOut_dnspy"></p><p>其中有一個條件很明顯是處理跳躍功能</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetButton</span><span class="token punctuation">(</span><span class="token string">"Jump"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canMove <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>characterController<span class="token punctuation">.</span>isGrounded <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isClimbing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jumpSpeed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡有兩個解法</p><ol><li>增加跳躍數值</li></ol><p>code:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetButton</span><span class="token punctuation">(</span><span class="token string">"Jump"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canMove <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>characterController<span class="token punctuation">.</span>isGrounded <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isClimbing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jumpSpeed <span class="token operator">+</span> <span class="token number">20f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讓玩家一跳就跳很高</p><ol start="2"><li>刪除限制條件</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetButton</span><span class="token punctuation">(</span><span class="token string">"Jump"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jumpSpeed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moveDirection<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讓玩家可以在空中連續跳</p><p>另外，也可以注意到在APTX的 class中有一個條件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>collision<span class="token punctuation">.</span>gameObject <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Mysterious<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>這個條件的感覺很像是如果一個東西碰到玩家後，會將一個Mysterious設成true<br>可以猜測是如果玩家碰到旗子之後的程式<br>因此可以編輯這個class 新增一個start函式，讓遊戲執行的時候就將Mysterious設成true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token comment">// Token: 0x02000002 RID: 2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APTX</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span><span class="token comment">// Token: 0x06000001 RID: 1</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnTriggerEnter</span><span class="token punctuation">(</span>Collider collision<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>collision<span class="token punctuation">.</span>gameObject <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>Mysterious<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Token: 0x06000002 RID: 2</span><span class="token keyword">public</span> <span class="token function">APTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Token: 0x0600003A RID: 58</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>Mysterious<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Token: 0x04000001 RID: 1</span><span class="token keyword">public</span> GameObject player<span class="token punctuation">;</span><span class="token comment">// Token: 0x04000002 RID: 2</span><span class="token keyword">public</span> GameObject Mysterious<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解法二-CheatEngine"><a href="#解法二-CheatEngine" class="headerlink" title="解法二: CheatEngine"></a>解法二: CheatEngine</h4><p>使用cheatEngin獲得玩家位置的記憶體位置，修改掉數值達成穿牆<br><a href="https://youtu.be/QgF4PQjeG-o?si=qvckIAU1Cr03s50d&t=604">參考影片</a></p><p>flag:</p><blockquote><p>picoCTF{WELCOME_TO_UNITY!!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> picoCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025 AIS3 Pre-Exam Reverse 題解</title>
      <link href="/2025/08/14/2025AIS3PreExam-reverse/"/>
      <url>/2025/08/14/2025AIS3PreExam-reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="2025-AIS3-pre-exam-Reverse"><a href="#2025-AIS3-pre-exam-Reverse" class="headerlink" title="2025 AIS3-pre-exam Reverse"></a>2025 AIS3-pre-exam Reverse</h1><p>這次主要做Reverse的題目</p><p><img src="/assets/dashboard.png" alt="dashboard"></p><h2 id="AIS3-Tiny-Server-Reverse"><a href="#AIS3-Tiny-Server-Reverse" class="headerlink" title="AIS3 Tiny Server - Reverse"></a>AIS3 Tiny Server - Reverse</h2><p>ida反編譯後用strings 看一下</p><p><img src="/./assets/tiny1.png" alt="tiny1"></p><p>有明顯的 flag correct 的字串以及Wrong Flag的樣式，追過去看會來到<code>sub_2110</code>，</p><p><img src="/./assets/tiny2.png" alt="tiny2"></p><p>主要是這段，當將<code>p_s</code>丟進<code>sub_1E20</code>時回傳值會決定是對的還是錯的，因此可以確定<code>sub_1E20</code>是一個flag checker</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">_BOOL4 __cdecl sub_1E20(int a1)&#123;  unsigned int v1; &#x2F;&#x2F; ecx  char v2; &#x2F;&#x2F; si  char v3; &#x2F;&#x2F; al  int i; &#x2F;&#x2F; eax  char v5; &#x2F;&#x2F; dl  _BYTE v7[10]; &#x2F;&#x2F; [esp+7h] [ebp-49h] BYREF  _DWORD v8[11]; &#x2F;&#x2F; [esp+12h] [ebp-3Eh]  __int16 v9; &#x2F;&#x2F; [esp+3Eh] [ebp-12h]  v1 &#x3D; 0;  v2 &#x3D; 51;  v9 &#x3D; 20;  v3 &#x3D; 114;  v8[0] &#x3D; 1480073267;  v8[1] &#x3D; 1197221906;  v8[2] &#x3D; 254628393;  v8[3] &#x3D; 920154;  v8[4] &#x3D; 1343445007;  v8[5] &#x3D; 874076697;  v8[6] &#x3D; 1127428440;  v8[7] &#x3D; 1510228243;  v8[8] &#x3D; 743978009;  v8[9] &#x3D; 54940467;  v8[10] &#x3D; 1246382110;  qmemcpy(v7, &quot;rikki_l0v3&quot;, sizeof(v7));  while ( 1 )  &#123;    *((_BYTE *)v8 + v1++) &#x3D; v2 ^ v3;    if ( v1 &#x3D;&#x3D; 45 )      break;    v2 &#x3D; *((_BYTE *)v8 + v1);    v3 &#x3D; v7[v1 % 0xA];  &#125;  for ( i &#x3D; 0; i !&#x3D; 45; ++i )  &#123;    v5 &#x3D; *(_BYTE *)(a1 + i);    if ( !v5 || v5 !&#x3D; *((_BYTE *)v8 + i) )      return 0;  &#125;  return *(_BYTE *)(a1 + 45) &#x3D;&#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xor加密可以寫出下面的解密script解出他想要的flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt_sub_1E20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v8_ints <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">1480073267</span><span class="token punctuation">,</span>        <span class="token number">1197221906</span><span class="token punctuation">,</span>        <span class="token number">254628393</span><span class="token punctuation">,</span>        <span class="token number">920154</span><span class="token punctuation">,</span>        <span class="token number">1343445007</span><span class="token punctuation">,</span>        <span class="token number">874076697</span><span class="token punctuation">,</span>        <span class="token number">1127428440</span><span class="token punctuation">,</span>        <span class="token number">1510228243</span><span class="token punctuation">,</span>        <span class="token number">743978009</span><span class="token punctuation">,</span>        <span class="token number">54940467</span><span class="token punctuation">,</span>        <span class="token number">1246382110</span>    <span class="token punctuation">]</span>    orig <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>    idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> v8_ints<span class="token punctuation">:</span>        orig<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>idx<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>        idx <span class="token operator">+=</span> <span class="token number">4</span>    orig<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>    key <span class="token operator">=</span> <span class="token string">b"rikki_l0v3"</span>     result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>    v2 <span class="token operator">=</span> <span class="token number">51</span>       v3 <span class="token operator">=</span> <span class="token number">114</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v2 <span class="token operator">^</span> v3        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">44</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        v2 <span class="token operator">=</span> orig<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        v3 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    plaintext <span class="token operator">=</span> decrypt_sub_1E20<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./assets/tiny3.png" alt="tiny3"></p><p>:flags:AIS3{w0w_a_f1ag_check3r_1n_serv3r_1s_c00l!!!}</p><hr><h2 id="web-flag-checker"><a href="#web-flag-checker" class="headerlink" title="web flag checker"></a>web flag checker</h2><p>F12 看一下原始碼</p><p><img src="/./assets/web1.png" alt="web1"></p><p>這段出現了flag checker 的邏輯</p><p>接下來在index.wsam中有flag checker的函式內容 </p><pre><code><pre class="line-numbers language-none"><code class="language-none">(func $flagchecker (;9;) (export &quot;flagchecker&quot;) (param $var0 i32) (result i32)(local $var1 i32)(local $var2 i32)(local $var3 i32)(local $var4 i32)(local $var5 i32)(local $var6 i32)(local $var7 i64)(local $var8 i32)(local $var9 i32)(local $var10 i32)(local $var11 i32)(local $var12 i64)(local $var13 i64)(local $var14 i64)(local $var15 i64)(local $var16 i64)(local $var17 i32)(local $var18 i32)(local $var19 i32)(local $var20 i32)(local $var21 i32)(local $var22 i32)(local $var23 i32)(local $var24 i32)(local $var25 i32)(local $var26 i32)(local $var27 i32)(local $var28 i32)(local $var29 i32)(local $var30 i32)(local $var31 i32)(local $var32 i32)(local $var33 i32)(local $var34 i32)(local $var35 i32)(local $var36 i32)(local $var37 i32)(local $var38 i32)(local $var39 i32)(local $var40 i32)(local $var41 i64)(local $var42 i32)(local $var43 i32)(local $var44 i32)(local $var45 i32)(local $var46 i32)(local $var47 i32)(local $var48 i32)(local $var49 i64)(local $var50 i32)(local $var51 i64)(local $var52 i32)(local $var53 i32)(local $var54 i32)(local $var55 i32)(local $var56 i32)(local $var57 i32)(local $var58 i32)(local $var59 i64)(local $var60 i32)(local $var61 i32)(local $var62 i32)(local $var63 i32)(local $var64 i32)(local $var65 i32)(local $var66 i32)(local $var67 i32)(local $var68 i32)(local $var69 i32)(local $var70 i32)global.get $global0local.set $var1i32.const 96local.set $var2local.get $var1local.get $var2i32.sublocal.set $var3local.get $var3global.set $global0local.get $var3local.get $var0i32.store offset&#x3D;88i32.const -39934163local.set $var4local.get $var3local.get $var4i32.store offset&#x3D;84i32.const 64local.set $var5local.get $var3local.get $var5i32.addlocal.set $var6i64.const 0local.set $var7local.get $var6local.get $var7i64.storei32.const 56local.set $var8local.get $var3local.get $var8i32.addlocal.set $var9local.get $var9local.get $var7i64.storei32.const 48local.set $var10local.get $var3local.get $var10i32.addlocal.set $var11local.get $var11local.get $var7i64.storelocal.get $var3local.get $var7i64.store offset&#x3D;40local.get $var3local.get $var7i64.store offset&#x3D;32i64.const 7577352992956835434local.set $var12local.get $var3local.get $var12i64.store offset&#x3D;32i64.const 7148661717033493303local.set $var13local.get $var3local.get $var13i64.store offset&#x3D;40i64.const -7081446828746089091local.set $var14local.get $var3local.get $var14i64.store offset&#x3D;48i64.const -7479441386887439825local.set $var15local.get $var3local.get $var15i64.store offset&#x3D;56i64.const 8046961146294847270local.set $var16local.get $var3local.get $var16i64.store offset&#x3D;64local.get $var3i32.load offset&#x3D;88local.set $var17i32.const 0local.set $var18local.get $var17local.get $var18i32.nelocal.set $var19i32.const 1local.set $var20local.get $var19local.get $var20i32.andlocal.set $var21block $label2  block $label1    block $label0      local.get $var21      i32.eqz      br_if $label0      local.get $var3      i32.load offset&#x3D;88      local.set $var22      local.get $var22      call $func13      local.set $var23      i32.const 40      local.set $var24      local.get $var23      local.get $var24      i32.ne      local.set $var25      i32.const 1      local.set $var26      local.get $var25      local.get $var26      i32.and      local.set $var27      local.get $var27      i32.eqz      br_if $label1    end $label0    i32.const 0    local.set $var28    local.get $var3    local.get $var28    i32.store offset&#x3D;92    br $label2  end $label1  local.get $var3  i32.load offset&#x3D;88  local.set $var29  local.get $var3  local.get $var29  i32.store offset&#x3D;28  i32.const 0  local.set $var30  local.get $var3  local.get $var30  i32.store offset&#x3D;24  block $label3    loop $label5      local.get $var3      i32.load offset&#x3D;24      local.set $var31      i32.const 5      local.set $var32      local.get $var31      local.get $var32      i32.lt_s      local.set $var33      i32.const 1      local.set $var34      local.get $var33      local.get $var34      i32.and      local.set $var35      local.get $var35      i32.eqz      br_if $label3      local.get $var3      i32.load offset&#x3D;28      local.set $var36      local.get $var3      i32.load offset&#x3D;24      local.set $var37      i32.const 3      local.set $var38      local.get $var37      local.get $var38      i32.shl      local.set $var39      local.get $var36      local.get $var39      i32.add      local.set $var40      local.get $var40      i64.load      local.set $var41      local.get $var3      local.get $var41      i64.store offset&#x3D;16      local.get $var3      i32.load offset&#x3D;24      local.set $var42      i32.const 6      local.set $var43      local.get $var42      local.get $var43      i32.mul      local.set $var44      i32.const -39934163      local.set $var45      local.get $var45      local.get $var44      i32.shr_u      local.set $var46      i32.const 63      local.set $var47      local.get $var46      local.get $var47      i32.and      local.set $var48      local.get $var3      local.get $var48      i32.store offset&#x3D;12      local.get $var3      i64.load offset&#x3D;16      local.set $var49      local.get $var3      i32.load offset&#x3D;12      local.set $var50      local.get $var49      local.get $var50      call $func8      local.set $var51      local.get $var3      i32.load offset&#x3D;24      local.set $var52      i32.const 32      local.set $var53      local.get $var3      local.get $var53      i32.add      local.set $var54      local.get $var54      local.set $var55      i32.const 3      local.set $var56      local.get $var52      local.get $var56      i32.shl      local.set $var57      local.get $var55      local.get $var57      i32.add      local.set $var58      local.get $var58      i64.load      local.set $var59      local.get $var51      local.get $var59      i64.ne      local.set $var60      i32.const 1      local.set $var61      local.get $var60      local.get $var61      i32.and      local.set $var62      block $label4        local.get $var62        i32.eqz        br_if $label4        i32.const 0        local.set $var63        local.get $var3        local.get $var63        i32.store offset&#x3D;92        br $label2      end $label4      local.get $var3      i32.load offset&#x3D;24      local.set $var64      i32.const 1      local.set $var65      local.get $var64      local.get $var65      i32.add      local.set $var66      local.get $var3      local.get $var66      i32.store offset&#x3D;24      br $label5    end $label5  end $label3  i32.const 1  local.set $var67  local.get $var3  local.get $var67  i32.store offset&#x3D;92end $label2local.get $var3i32.load offset&#x3D;92local.set $var68i32.const 96local.set $var69local.get $var3local.get $var69i32.addlocal.set $var70local.get $var70global.set $global0local.get $var68return)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><p>給chatgpt整理分析以上的加密方式為</p><ul><li><p><code>magic = 0xFD9EA72D</code> 計算旋轉位數</p></li><li><p><code>expected[0] = 0x69282A668AEF666A; expected[1] = 0x633525F4D7372337; expected[2] = 0x9DB9A5A0DCC5DD7D; expected[3] = 0x9833AFAFB8381A2F; expected[4] = 0x6FAC8C8726464726;</code><br>是經過旋轉之後預期的flag</p></li><li><p>接下來把使用者輸入的每一個chunk取出來進行rot</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span> chunk <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>magic <span class="token operator">>></span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> rot <span class="token operator">=</span> <span class="token punctuation">(</span>chunk <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>chunk <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rot <span class="token operator">!=</span> expected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>總結可以寫出解密的script</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">expected <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x69282A668AEF666A</span><span class="token punctuation">,</span>    <span class="token number">0x633525F4D7372337</span><span class="token punctuation">,</span>    <span class="token number">0x9DB9A5A0DCC5DD7D</span><span class="token punctuation">,</span>    <span class="token number">0x9833AFAFB8381A2F</span><span class="token punctuation">,</span>    <span class="token number">0x6FAC8C8726464726</span><span class="token punctuation">]</span>magic <span class="token operator">=</span> <span class="token number">0xFD9EA72D</span> mask64 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">rotr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> r<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask64flag_bytes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> exp <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token punctuation">(</span>magic <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span>    chunk <span class="token operator">=</span> rotr<span class="token punctuation">(</span>exp<span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag_bytes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>chunk <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>flag_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./assets/web2.png" alt="web2"></p><p>:flags:AIS3{W4SM_R3v3rsing_w17h_g0_4pp_39229dd}</p><hr><h2 id="A-simple-snake-game"><a href="#A-simple-snake-game" class="headerlink" title="A_simple_snake_game"></a>A_simple_snake_game</h2><p>是一個貪吃蛇遊戲，用ida 反編譯後找一下主要加密函式，找到了draw_text函式</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void __userpurge SnakeGame::Screen::drawText(_DWORD *a1@&lt;ecx&gt;, #220 *this, int a3, int a4)&#123;  unsigned int v4; &#x2F;&#x2F; eax  int v5; &#x2F;&#x2F; eax  int v6; &#x2F;&#x2F; eax  int Error; &#x2F;&#x2F; eax  int v8; &#x2F;&#x2F; eax  char v9; &#x2F;&#x2F; [esp+23h] [ebp-F5h]  char lpuexcpt; &#x2F;&#x2F; [esp+24h] [ebp-F4h]  struct _Unwind_Exception *lpuexcpta; &#x2F;&#x2F; [esp+24h] [ebp-F4h]  struct _Unwind_Exception *lpuexcptb; &#x2F;&#x2F; [esp+24h] [ebp-F4h]  _DWORD v14[10]; &#x2F;&#x2F; [esp+6Dh] [ebp-ABh] BYREF  __int16 v15; &#x2F;&#x2F; [esp+95h] [ebp-83h]  char v16; &#x2F;&#x2F; [esp+97h] [ebp-81h]  int v17; &#x2F;&#x2F; [esp+98h] [ebp-80h]  int v18; &#x2F;&#x2F; [esp+9Ch] [ebp-7Ch]  int v19; &#x2F;&#x2F; [esp+A0h] [ebp-78h]  int v20; &#x2F;&#x2F; [esp+A4h] [ebp-74h]  int v21; &#x2F;&#x2F; [esp+A8h] [ebp-70h]  _BYTE v22[24]; &#x2F;&#x2F; [esp+ACh] [ebp-6Ch] BYREF  int v23; &#x2F;&#x2F; [esp+C4h] [ebp-54h]  int v24; &#x2F;&#x2F; [esp+C8h] [ebp-50h]  int v25; &#x2F;&#x2F; [esp+CCh] [ebp-4Ch]  int v26; &#x2F;&#x2F; [esp+D0h] [ebp-48h]  int v27; &#x2F;&#x2F; [esp+D4h] [ebp-44h]  _BYTE v28[27]; &#x2F;&#x2F; [esp+D8h] [ebp-40h] BYREF  char v29; &#x2F;&#x2F; [esp+F3h] [ebp-25h] BYREF  int TextureFromSurface; &#x2F;&#x2F; [esp+F4h] [ebp-24h]  int v31; &#x2F;&#x2F; [esp+F8h] [ebp-20h]  unsigned int i; &#x2F;&#x2F; [esp+FCh] [ebp-1Ch]  if ( (int)this &lt;&#x3D; 11451419 || a3 &lt;&#x3D; 19810 )  &#123;    SnakeGame::Screen::createText[abi:cxx11](a1, this, a3);    v27 &#x3D; 0xFFFFFF;    v8 &#x3D; std::string::c_str(v28);    a1[3] &#x3D; TTF_RenderText_Solid(a1[5], v8, 0xFFFFFF);    a1[4] &#x3D; SDL_CreateTextureFromSurface(a1[1], a1[3]);    v23 &#x3D; 400;    v24 &#x3D; 565;    v25 &#x3D; 320;    v26 &#x3D; 30;    SDL_RenderCopy(a1[1], a1[4]);    std::string::~string(v28);  &#125;  else  &#123;    v14[0] &#x3D; -831958911;    v14[1] &#x3D; -1047254091;    v14[2] &#x3D; -1014295699;    v14[3] &#x3D; -620220219;    v14[4] &#x3D; 2001515017;    v14[5] &#x3D; -317711271;    v14[6] &#x3D; 1223368792;    v14[7] &#x3D; 1697251023;    v14[8] &#x3D; 496855031;    v14[9] &#x3D; -569364828;    v15 &#x3D; 26365;    v16 &#x3D; 40;    std::allocator&lt;char&gt;::allocator(&amp;v29);    std::string::basic_string(v14, 43, &amp;v29);    std::allocator&lt;char&gt;::~allocator(&amp;v29);    for ( i &#x3D; 0; ; ++i )    &#123;      v4 &#x3D; std::string::length(v22);      if ( i &gt;&#x3D; v4 )        break;      lpuexcpt &#x3D; *(_BYTE *)std::string::operator[](i);      v9 &#x3D; SnakeGame::hex_array1[i];      *(_BYTE *)std::string::operator[](i) &#x3D; v9 ^ lpuexcpt;    &#125;    v21 &#x3D; 0xFFFFFF;    v5 &#x3D; std::string::c_str(v22);    v31 &#x3D; TTF_RenderText_Solid(a1[5], v5, v21);    if ( v31 )    &#123;      TextureFromSurface &#x3D; SDL_CreateTextureFromSurface(a1[1], v31);      if ( TextureFromSurface )      &#123;        v17 &#x3D; 200;        v18 &#x3D; 565;        v19 &#x3D; 590;        v20 &#x3D; 30;        SDL_RenderCopy(a1[1], TextureFromSurface);        SDL_FreeSurface(v31);        SDL_DestroyTexture(TextureFromSurface);      &#125;      else      &#123;        lpuexcptb &#x3D; (struct _Unwind_Exception *)std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(                                                  &amp;std::cerr,                                                  &quot;SDL_CreateTextureFromSurface: &quot;);        Error &#x3D; SDL_GetError();        std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(lpuexcptb, Error);        std::ostream::operator&lt;&lt;(std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);        SDL_FreeSurface(v31);      &#125;    &#125;    else    &#123;      lpuexcpta &#x3D; (struct _Unwind_Exception *)std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(                                                &amp;std::cerr,                                                &quot;TTF_RenderText_Solid: &quot;);      v6 &#x3D; SDL_GetError();      std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(lpuexcpta, v6);      std::ostream::operator&lt;&lt;(std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);    &#125;    std::string::~string(v22);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起來是進到else條件後會出現flag文字，並且是用XOR加解密</p><p>可以寫出下面的解密script</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> structv14 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">-</span><span class="token number">831958911</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1047254091</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1014295699</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">620220219</span><span class="token punctuation">,</span>    <span class="token number">2001515017</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">317711271</span><span class="token punctuation">,</span> <span class="token number">1223368792</span><span class="token punctuation">,</span> <span class="token number">1697251023</span><span class="token punctuation">,</span>    <span class="token number">496855031</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">569364828</span><span class="token punctuation">]</span>raw_bytes <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> x <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> v14<span class="token punctuation">)</span>raw_bytes <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;H'</span><span class="token punctuation">,</span> <span class="token number">26365</span><span class="token punctuation">)</span>raw_bytes <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span>    <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span>    <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span>    <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span>    <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>decrypted <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>raw_bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag："</span><span class="token punctuation">,</span> decrypted<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:flags:AIS3{CH3aT_Eng1n3?_0fcau53_I_bo_1T_by_hAnD}</p><hr><h2 id="verysafe-image-encrypter"><a href="#verysafe-image-encrypter" class="headerlink" title="verysafe_image_encrypter"></a>verysafe_image_encrypter</h2><p>ida 反編譯之後無法辨識，用DIE看一下</p><p><img src="/./assets/pic1.png" alt="pic1"></p><p>發現有加了壓縮殼，並且看起來是自製的殼，因此先利用x64dbg去看哪裡是OEP 並用scylla dump 出脫殼程式</p><p>在找OEP之前可以先用CFF explore 把ASLR關掉</p><p><img src="/./assets/pic2.png" alt="pic2"></p><p>F9執行到這邊後會執行到popad 的下一行<code>jmp dword ptr ss:[esp-24]</code></p><p>jmp之後跳到這邊</p><p><img src="/./assets/pic3.png" alt="pic3"></p><p>在經過一次jmp之後會到這邊</p><p><img src="/./assets/pic4.png" alt="pic4"></p><p>這邊看起來非常像原本程式的OEP，因此401170可以先猜測為OEP</p><p>使用scylla dump 出來 參考：<a href="https://feifeitan.cn/index.php/archives/216/">https://feifeitan.cn/index.php/archives/216/</a> </p><p>將dump 出來的用ida反編譯後會得到原本的程式碼</p><p>經過分析後主要圖片加密功能會<code>sub_4018EA</code>中的<code>sub_401520</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl sub_4018EA(char a1)&#123;  int v1; &#x2F;&#x2F; eax  int v3; &#x2F;&#x2F; [esp+0h] [ebp-88h] BYREF  int v4; &#x2F;&#x2F; [esp+18h] [ebp-70h]  char v5[4]; &#x2F;&#x2F; [esp+1Ch] [ebp-6Ch] BYREF  int v6; &#x2F;&#x2F; [esp+20h] [ebp-68h]  int (__cdecl *v7)(int, int, int, int, int, int); &#x2F;&#x2F; [esp+34h] [ebp-54h]  int *v8; &#x2F;&#x2F; [esp+38h] [ebp-50h]  int *v9; &#x2F;&#x2F; [esp+3Ch] [ebp-4Ch]  void *v10; &#x2F;&#x2F; [esp+40h] [ebp-48h]  int *v11; &#x2F;&#x2F; [esp+44h] [ebp-44h]  char v12[16]; &#x2F;&#x2F; [esp+58h] [ebp-30h] BYREF  char *v13; &#x2F;&#x2F; [esp+68h] [ebp-20h]  char *v14; &#x2F;&#x2F; [esp+6Ch] [ebp-1Ch]  char *v15; &#x2F;&#x2F; [esp+78h] [ebp-10h]  int savedregs; &#x2F;&#x2F; [esp+88h] [ebp+0h] BYREF  v15 &#x3D; &a1;  v7 &#x3D; sub_4CCCF0;  v8 &#x3D; &dword_4CE4D4;  v9 &#x3D; &savedregs;  v10 &#x3D; &loc_4019D0;  v11 &#x3D; &v3;  sub_40C590(v5);  sub_40A8B0();  v14 &#x3D; aInputImagePng;  v13 &#x3D; aEncryptedImage;  v6 &#x3D; -1;  sub_401580(v12, aInputImagePng);  v12[15] &#x3D; 114;  sub_401520(v12, 114);  v6 &#x3D; 1;  sub_40177D(v13, v12);  v1 &#x3D; sub_4C87B0(&amp;dword_4D27C0, (char *)dword_4D303C);  sub_4C87B0(v1, v13);  sub_47DFC0(sub_4C6890);  v4 &#x3D; 0;  sub_4B0FB8(v12);  sub_40C860(v5);  return v4;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool __cdecl <span class="token function">sub_401520</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  bool result<span class="token punctuation">;</span> <span class="token comment">// al</span>  _BYTE <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>  _BYTE <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-Ch]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> i <span class="token operator">&lt;</span> <span class="token function">sub_4315C4</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4B1020</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v3 <span class="token operator">^=</span> a2<span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4B1020</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v4 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很簡單可以看出來他將圖片的每個byte經過0x72的xor之後+4<br>因此可以用以下的script解密出來</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">^</span> key <span class="token keyword">for</span> c <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./encrypted_image.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        cipher <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        plain <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> b <span class="token keyword">in</span> plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>將解密出來的16進位丟到cyberchef之後就會得到下面的照片</p><p><img src="/./assets/pic5.png" alt="pic5"></p><p>:flags:AIS3​{rwx_53gm3nttt_s0_5AS}</p><hr><h2 id="BabyUnicorn"><a href="#BabyUnicorn" class="headerlink" title="BabyUnicorn"></a>BabyUnicorn</h2><p>顯示用pwntools 的disassembly 看一下 shellcode</p><p>??? note “BabyUnicorn Shellcode Assembly”<br>    <pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">  0:       83 fe 20                cmp    esi, 0x20  3:       0f 84 a3 03 00 00       je     0x3ac  9:       83 fe 0d                cmp    esi, 0xd  c:       0f 84 13 04 00 00       je     0x425  12:       83 fe 15                cmp    esi, 0x15  15:       0f 84 49 04 00 00       je     0x464  1b:       83 fe 5a                cmp    esi, 0x5a  1e:       0f 84 c1 04 00 00       je     0x4e5  24:       83 fe 3d                cmp    esi, 0x3d  27:       0f 84 e7 04 00 00       je     0x514  2d:       83 fe 36                cmp    esi, 0x36  30:       0f 84 70 04 00 00       je     0x4a6  36:       83 fe 31                cmp    esi, 0x31  39:       0f 84 46 05 00 00       je     0x585  3f:       83 fe 0f                cmp    esi, 0xf  42:       0f 84 7f 05 00 00       je     0x5c7  48:       83 fe 50                cmp    esi, 0x50  4b:       0f 84 a4 05 00 00       je     0x5f5  51:       83 fe 59                cmp    esi, 0x59  54:       0f 84 fc 04 00 00       je     0x556  5a:       83 fe 4a                cmp    esi, 0x4a  5d:       0f 84 c1 05 00 00       je     0x624  63:       83 fe 06                cmp    esi, 0x6  66:       0f 84 e4 05 00 00       je     0x650  6c:       83 fe 0c                cmp    esi, 0xc  6f:       0f 84 39 06 00 00       je     0x6ae  75:       83 fe 16                cmp    esi, 0x16  78:       0f 84 01 06 00 00       je     0x67f  7e:       83 fe 2b                cmp    esi, 0x2b  81:       0f 84 56 06 00 00       je     0x6dd  87:       83 fe 34                cmp    esi, 0x34  8a:       0f 84 7c 06 00 00       je     0x70c  90:       83 fe 55                cmp    esi, 0x55  93:       0f 84 ce 06 00 00       je     0x767  99:       83 fe 17                cmp    esi, 0x17  9c:       0f 84 96 06 00 00       je     0x738  a2:       83 fe 0e                cmp    esi, 0xe  a5:       0f 84 ac 0c 00 00       je     0xd57  ab:       83 fe 11                cmp    esi, 0x11  ae:       0f 84 79 0c 00 00       je     0xd2d  b4:       83 fe 4f                cmp    esi, 0x4f  b7:       0f 84 44 0c 00 00       je     0xd01  bd:       83 fe 47                cmp    esi, 0x47  c0:       0f 84 0c 0c 00 00       je     0xcd2  c6:       83 fe 2f                cmp    esi, 0x2f  c9:       0f 84 d4 0b 00 00       je     0xca3  cf:       83 fe 30                cmp    esi, 0x30  d2:       0f 84 9c 0b 00 00       je     0xc74  d8:       83 fe 04                cmp    esi, 0x4  db:       0f 84 67 0b 00 00       je     0xc48  e1:       83 fe 2c                cmp    esi, 0x2c  e4:       0f 84 2f 0b 00 00       je     0xc19  ea:       83 fe 40                cmp    esi, 0x40  ed:       0f 84 5b 0f 00 00       je     0x104e  f3:       83 fe 1a                cmp    esi, 0x1a  f6:       0f 84 23 0f 00 00       je     0x101f  fc:       83 fe 38                cmp    esi, 0x38  ff:       0f 84 eb 0e 00 00       je     0xff0  105:       83 fe 32                cmp    esi, 0x32  108:       0f 84 b3 0e 00 00       je     0xfc1  10e:       83 fe 46                cmp    esi, 0x46  111:       0f 84 7b 0e 00 00       je     0xf92  117:       83 fe 43                cmp    esi, 0x43  11a:       0f 84 46 0e 00 00       je     0xf66  120:       83 fe 39                cmp    esi, 0x39  123:       0f 84 0e 0e 00 00       je     0xf37  129:       83 fe 53                cmp    esi, 0x53  12c:       0f 84 d6 0d 00 00       je     0xf08  132:       83 fe 23                cmp    esi, 0x23  135:       0f 84 9e 0d 00 00       je     0xed9  13b:       83 fe 37                cmp    esi, 0x37  13e:       0f 84 66 0d 00 00       je     0xeaa  144:       83 fe 2a                cmp    esi, 0x2a  147:       0f 84 2e 0d 00 00       je     0xe7b  14d:       83 fe 29                cmp    esi, 0x29  150:       0f 84 f6 0c 00 00       je     0xe4c  156:       83 fe 1e                cmp    esi, 0x1e  159:       0f 84 b4 0c 00 00       je     0xe13  15f:       83 fe 51                cmp    esi, 0x51  162:       0f 84 7c 0c 00 00       je     0xde4  168:       83 fe 27                cmp    esi, 0x27  16b:       0f 84 44 0c 00 00       je     0xdb5  171:       83 fe 63                cmp    esi, 0x63  174:       0f 84 0c 0c 00 00       je     0xd86  17a:       83 fe 52                cmp    esi, 0x52  17d:       0f 84 9e 14 00 00       je     0x1621  183:       83 fe 60                cmp    esi, 0x60  186:       0f 84 66 14 00 00       je     0x15f2  18c:       83 fe 44                cmp    esi, 0x44  18f:       0f 84 2e 14 00 00       je     0x15c3  195:       83 fe 2e                cmp    esi, 0x2e  198:       0f 84 f9 13 00 00       je     0x1597  19e:       83 fe 07                cmp    esi, 0x7  1a1:       0f 84 c4 13 00 00       je     0x156b  1a7:       83 fe 21                cmp    esi, 0x21  1aa:       0f 84 8c 13 00 00       je     0x153c  1b0:       83 fe 45                cmp    esi, 0x45  1b3:       0f 84 54 13 00 00       je     0x150d  1b9:       83 fe 33                cmp    esi, 0x33  1bc:       0f 84 1c 13 00 00       je     0x14de  1c2:       83 fe 5e                cmp    esi, 0x5e  1c5:       0f 84 e7 12 00 00       je     0x14b2  1cb:       83 fe 2d                cmp    esi, 0x2d  1ce:       0f 84 af 12 00 00       je     0x1483  1d4:       83 fe 08                cmp    esi, 0x8  1d7:       0f 84 77 12 00 00       je     0x1454  1dd:       83 fe 61                cmp    esi, 0x61  1e0:       0f 84 41 12 00 00       je     0x1427  1e6:       83 fe 02                cmp    esi, 0x2  1e9:       0f 84 09 12 00 00       je     0x13f8  1ef:       83 fe 4b                cmp    esi, 0x4b  1f2:       0f 84 d1 11 00 00       je     0x13c9  1f8:       83 fe 22                cmp    esi, 0x22  1fb:       0f 84 99 11 00 00       je     0x139a  201:       83 fe 3b                cmp    esi, 0x3b  204:       0f 84 61 11 00 00       je     0x136b  20a:       83 fe 3c                cmp    esi, 0x3c  20d:       0f 84 29 11 00 00       je     0x133c  213:       83 fe 25                cmp    esi, 0x25  216:       0f 84 f1 10 00 00       je     0x130d  21c:       83 fe 4c                cmp    esi, 0x4c  21f:       0f 84 bb 10 00 00       je     0x12e0  225:       83 fe 19                cmp    esi, 0x19  228:       0f 84 83 10 00 00       je     0x12b1  22e:       83 fe 12                cmp    esi, 0x12  231:       0f 84 4b 10 00 00       je     0x1282  237:       83 fe 1c                cmp    esi, 0x1c  23a:       0f 84 13 10 00 00       je     0x1253  240:       83 fe 5c                cmp    esi, 0x5c  243:       0f 84 db 0f 00 00       je     0x1224  249:       83 fe 03                cmp    esi, 0x3  24c:       0f 84 a3 0f 00 00       je     0x11f5  252:       83 fe 62                cmp    esi, 0x62  255:       0f 84 6b 0f 00 00       je     0x11c6  25b:       83 fe 4e                cmp    esi, 0x4e  25e:       0f 84 33 0f 00 00       je     0x1197  264:       83 fe 4d                cmp    esi, 0x4d  267:       0f 84 fb 0e 00 00       je     0x1168  26d:       83 fe 42                cmp    esi, 0x42  270:       0f 84 c3 0e 00 00       je     0x1139  276:       83 fe 3f                cmp    esi, 0x3f  279:       0f 84 8b 0e 00 00       je     0x110a  27f:       83 fe 58                cmp    esi, 0x58  282:       0f 84 53 0e 00 00       je     0x10db  288:       83 fe 54                cmp    esi, 0x54  28b:       0f 84 1b 0e 00 00       je     0x10ac  291:       83 fe 05                cmp    esi, 0x5  294:       0f 84 e3 0d 00 00       je     0x107d  29a:       83 fe 10                cmp    esi, 0x10  29d:       0f 84 d8 07 00 00       je     0xa7b  2a3:       83 fe 64                cmp    esi, 0x64  2a6:       0f 84 a0 07 00 00       je     0xa4c  2ac:       83 fe 1d                cmp    esi, 0x1d  2af:       0f 84 68 07 00 00       je     0xa1d  2b5:       83 fe 13                cmp    esi, 0x13  2b8:       0f 84 30 07 00 00       je     0x9ee  2be:       83 fe 0b                cmp    esi, 0xb  2c1:       0f 84 f8 06 00 00       je     0x9bf  2c7:       83 fe 01                cmp    esi, 0x1  2ca:       0f 84 c0 06 00 00       je     0x990  2d0:       83 fe 3a                cmp    esi, 0x3a  2d3:       0f 84 88 06 00 00       je     0x961  2d9:       83 fe 48                cmp    esi, 0x48  2dc:       0f 84 50 06 00 00       je     0x932  2e2:       83 fe 49                cmp    esi, 0x49  2e5:       0f 84 18 06 00 00       je     0x903  2eb:       83 fe 1b                cmp    esi, 0x1b  2ee:       0f 84 e0 05 00 00       je     0x8d4  2f4:       83 fe 56                cmp    esi, 0x56  2f7:       0f 84 a8 05 00 00       je     0x8a5  2fd:       83 fe 26                cmp    esi, 0x26  300:       0f 84 70 05 00 00       je     0x876  306:       83 fe 14                cmp    esi, 0x14  309:       0f 84 38 05 00 00       je     0x847  30f:       83 fe 0a                cmp    esi, 0xa  312:       0f 84 03 05 00 00       je     0x81b  318:       83 fe 09                cmp    esi, 0x9  31b:       0f 84 ce 04 00 00       je     0x7ef  321:       83 fe 1f                cmp    esi, 0x1f  324:       0f 84 96 04 00 00       je     0x7c0  32a:       83 fe 3e                cmp    esi, 0x3e  32d:       0f 84 ba 08 00 00       je     0xbed  333:       83 fe 5b                cmp    esi, 0x5b  336:       0f 84 82 08 00 00       je     0xbbe  33c:       83 fe 5d                cmp    esi, 0x5d  33f:       0f 84 4a 08 00 00       je     0xb8f  345:       83 fe 28                cmp    esi, 0x28  348:       0f 84 12 08 00 00       je     0xb60  34e:       83 fe 35                cmp    esi, 0x35  351:       0f 84 da 07 00 00       je     0xb31  357:       83 fe 41                cmp    esi, 0x41  35a:       0f 84 a5 07 00 00       je     0xb05  360:       83 fe 57                cmp    esi, 0x57  363:       0f 84 6d 07 00 00       je     0xad6  369:       83 fe 5f                cmp    esi, 0x5f  36c:       0f 84 38 07 00 00       je     0xaaa  372:       83 fe 18                cmp    esi, 0x18  375:       0f 84 1b 04 00 00       je     0x796  37b:       83 fe 24                cmp    esi, 0x24  37e:       75 6d                   jne    0x3ed  380:       8d 74 24 fa             lea    esi, [esp-0x6]  384:       b9 26 00 00 00          mov    ecx, 0x26  389:       bf 2f 00 00 00          mov    edi, 0x2f  38e:       89 c8                   mov    eax, ecx  390:       99                      cdq  391:       f7 ff                   idiv   edi  393:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  398:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  39b:       83 c1 01                add    ecx, 0x1  39e:       83 f9 4d                cmp    ecx, 0x4d  3a1:       75 eb                   jne    0x38e  3a3:       cd 51                   int    0x51  3a5:       be 1b 00 00 00          mov    esi, 0x1b  3aa:       eb 41                   jmp    0x3ed  3ac:       8d 74 24 15             lea    esi, [esp+0x15]  3b0:       b9 0b 00 00 00          mov    ecx, 0xb  3b5:       bf 5d 41 4c ae          mov    edi, 0xae4c415d  3ba:       8d 74 26 00             lea    esi, [esi+eiz*1+0x0]  3be:       89 c8                   mov    eax, ecx  3c0:       f7 ef                   imul   edi  3c2:       8d 04 0a                lea    eax, [edx+ecx*1]  3c5:       89 ca                   mov    edx, ecx  3c7:       c1 fa 1f                sar    edx, 0x1f  3ca:       c1 f8 05                sar    eax, 0x5  3cd:       29 d0                   sub    eax, edx  3cf:       89 ca                   mov    edx, ecx  3d1:       6b c0 2f                imul   eax, eax, 0x2f  3d4:       29 c2                   sub    edx, eax  3d6:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  3db:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  3de:       83 c1 01                add    ecx, 0x1  3e1:       83 f9 17                cmp    ecx, 0x17  3e4:       75 d8                   jne    0x3be  3e6:       cd 2b                   int    0x2b  3e8:       be 64 00 00 00          mov    esi, 0x64  3ed:       89 74 24 04             mov    DWORD PTR [esp+0x4], esi  3f1:       8d 74 24 20             lea    esi, [esp+0x20]  3f5:       c7 04 24 68 70 40 00    mov    DWORD PTR [esp], 0x407068  3fc:       e8 e5 f9 ff ff          call   0xfffffde6  401:       0f be 06                movsx  eax, BYTE PTR [esi]  404:       c7 04 24 6c 70 40 00    mov    DWORD PTR [esp], 0x40706c  40b:       83 c6 01                add    esi, 0x1  40e:       89 44 24 04             mov    DWORD PTR [esp+0x4], eax  412:       e8 cf f9 ff ff          call   0xfffffde6  417:       39 f3                   cmp    ebx, esi  419:       75 e6                   jne    0x401  41b:       8d 65 f4                lea    esp, [ebp-0xc]  41e:       31 c0                   xor    eax, eax  420:       5b                      pop    ebx  421:       5e                      pop    esi  422:       5f                      pop    edi  423:       5d                      pop    ebp  424:       c3                      ret  425:       8d 74 24 0d             lea    esi, [esp+0xd]  429:       b9 13 00 00 00          mov    ecx, 0x13  42e:       bf 5d 41 4c ae          mov    edi, 0xae4c415d  433:       89 c8                   mov    eax, ecx  435:       f7 ef                   imul   edi  437:       8d 04 0a                lea    eax, [edx+ecx*1]  43a:       89 ca                   mov    edx, ecx  43c:       c1 fa 1f                sar    edx, 0x1f  43f:       c1 f8 05                sar    eax, 0x5  442:       29 d0                   sub    eax, edx  444:       89 ca                   mov    edx, ecx  446:       6b c0 2f                imul   eax, eax, 0x2f  449:       29 c2                   sub    edx, eax  44b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  450:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  453:       83 c1 01                add    ecx, 0x1  456:       83 f9 27                cmp    ecx, 0x27  459:       75 d8                   jne    0x433  45b:       cd 23                   int    0x23  45d:       be 50 00 00 00          mov    esi, 0x50  462:       eb 89                   jmp    0x3ed  464:       8d 74 24 14             lea    esi, [esp+0x14]  468:       b9 0c 00 00 00          mov    ecx, 0xc  46d:       bf 5d 41 4c ae          mov    edi, 0xae4c415d  472:       89 c8                   mov    eax, ecx  474:       f7 ef                   imul   edi  476:       8d 04 0a                lea    eax, [edx+ecx*1]  479:       89 ca                   mov    edx, ecx  47b:       c1 fa 1f                sar    edx, 0x1f  47e:       c1 f8 05                sar    eax, 0x5  481:       29 d0                   sub    eax, edx  483:       89 ca                   mov    edx, ecx  485:       6b c0 2f                imul   eax, eax, 0x2f  488:       29 c2                   sub    edx, eax  48a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  48f:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  492:       83 c1 01                add    ecx, 0x1  495:       83 f9 19                cmp    ecx, 0x19  498:       75 d8                   jne    0x472  49a:       cd 08                   int    0x8  49c:       be 47 00 00 00          mov    esi, 0x47  4a1:       e9 47 ff ff ff          jmp    0x3ed  4a6:       b9 1f 00 00 00          mov    ecx, 0x1f  4ab:       be 5d 41 4c ae          mov    esi, 0xae4c415d  4b0:       89 c8                   mov    eax, ecx  4b2:       89 cf                   mov    edi, ecx  4b4:       f7 ee                   imul   esi  4b6:       8d 04 0a                lea    eax, [edx+ecx*1]  4b9:       89 ca                   mov    edx, ecx  4bb:       c1 fa 1f                sar    edx, 0x1f  4be:       c1 f8 05                sar    eax, 0x5  4c1:       29 d0                   sub    eax, edx  4c3:       6b c0 2f                imul   eax, eax, 0x2f  4c6:       29 c7                   sub    edi, eax  4c8:       0f b6 44 3c 20          movzx  eax, BYTE PTR [esp+edi*1+0x20]  4cd:       30 44 0c 01             xor    BYTE PTR [esp+ecx*1+0x1], al  4d1:       83 c1 01                add    ecx, 0x1  4d4:       83 f9 3f                cmp    ecx, 0x3f  4d7:       75 d7                   jne    0x4b0  4d9:       cd 12                   int    0x12  4db:       be 21 00 00 00          mov    esi, 0x21  4e0:       e9 08 ff ff ff          jmp    0x3ed  4e5:       8d 74 24 1c             lea    esi, [esp+0x1c]  4e9:       b9 04 00 00 00          mov    ecx, 0x4  4ee:       bf 2f 00 00 00          mov    edi, 0x2f  4f3:       89 c8                   mov    eax, ecx  4f5:       99                      cdq  4f6:       f7 ff                   idiv   edi  4f8:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  4fd:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  500:       83 c1 01                add    ecx, 0x1  503:       83 f9 09                cmp    ecx, 0x9  506:       75 eb                   jne    0x4f3  508:       cd 3a                   int    0x3a  50a:       be 1d 00 00 00          mov    esi, 0x1d  50f:       e9 d9 fe ff ff          jmp    0x3ed  514:       8d 74 24 06             lea    esi, [esp+0x6]  518:       b9 1a 00 00 00          mov    ecx, 0x1a  51d:       bf 5d 41 4c ae          mov    edi, 0xae4c415d  522:       89 c8                   mov    eax, ecx  524:       f7 ef                   imul   edi  526:       8d 04 0a                lea    eax, [edx+ecx*1]  529:       89 ca                   mov    edx, ecx  52b:       c1 fa 1f                sar    edx, 0x1f  52e:       c1 f8 05                sar    eax, 0x5  531:       29 d0                   sub    eax, edx  533:       89 ca                   mov    edx, ecx  535:       6b c0 2f                imul   eax, eax, 0x2f  538:       29 c2                   sub    edx, eax  53a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  53f:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  542:       83 c1 01                add    ecx, 0x1  545:       83 f9 35                cmp    ecx, 0x35  548:       75 d8                   jne    0x522  54a:       cd 4f                   int    0x4f  54c:       be 60 00 00 00          mov    esi, 0x60  551:       e9 97 fe ff ff          jmp    0x3ed  556:       8d 74 24 19             lea    esi, [esp+0x19]  55a:       b9 07 00 00 00          mov    ecx, 0x7  55f:       bf 2f 00 00 00          mov    edi, 0x2f  564:       89 c8                   mov    eax, ecx  566:       99                      cdq  567:       f7 ff                   idiv   edi  569:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  56e:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  571:       83 c1 01                add    ecx, 0x1  574:       83 f9 0f                cmp    ecx, 0xf  577:       75 eb                   jne    0x564  579:       cd 5d                   int    0x5d  57b:       be 3d 00 00 00          mov    esi, 0x3d  580:       e9 68 fe ff ff          jmp    0x3ed  585:       8d 74 24 0e             lea    esi, [esp+0xe]  589:       b9 12 00 00 00          mov    ecx, 0x12  58e:       bf 5d 41 4c ae          mov    edi, 0xae4c415d  593:       89 c8                   mov    eax, ecx  595:       f7 ef                   imul   edi  597:       8d 04 0a                lea    eax, [edx+ecx*1]  59a:       89 ca                   mov    edx, ecx  59c:       c1 fa 1f                sar    edx, 0x1f  59f:       c1 f8 05                sar    eax, 0x5  5a2:       29 d0                   sub    eax, edx  5a4:       89 ca                   mov    edx, ecx  5a6:       6b c0 2f                imul   eax, eax, 0x2f  5a9:       29 c2                   sub    edx, eax  5ab:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  5b0:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  5b3:       83 c1 01                add    ecx, 0x1  5b6:       83 f9 25                cmp    ecx, 0x25  5b9:       75 d8                   jne    0x593  5bb:       cd 13                   int    0x13  5bd:       be 09 00 00 00          mov    esi, 0x9  5c2:       e9 26 fe ff ff          jmp    0x3ed  5c7:       8d 74 24 15             lea    esi, [esp+0x15]  5cb:       b9 0b 00 00 00          mov    ecx, 0xb  5d0:       bf 2f 00 00 00          mov    edi, 0x2f  5d5:       89 c8                   mov    eax, ecx  5d7:       99                      cdq  5d8:       f7 ff                   idiv   edi  5da:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  5df:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  5e2:       83 c1 01                add    ecx, 0x1  5e5:       83 f9 17                cmp    ecx, 0x17  5e8:       75 eb                   jne    0x5d5  5ea:       cc                      int3  5eb:       be 3a 00 00 00          mov    esi, 0x3a  5f0:       e9 f8 fd ff ff          jmp    0x3ed  5f5:       8d 74 24 0e             lea    esi, [esp+0xe]  5f9:       b9 12 00 00 00          mov    ecx, 0x12  5fe:       bf 2f 00 00 00          mov    edi, 0x2f  603:       89 c8                   mov    eax, ecx  605:       99                      cdq  606:       f7 ff                   idiv   edi  608:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  60d:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  610:       83 c1 01                add    ecx, 0x1  613:       83 f9 25                cmp    ecx, 0x25  616:       75 eb                   jne    0x603  618:       cd 44                   int    0x44  61a:       be 26 00 00 00          mov    esi, 0x26  61f:       e9 c9 fd ff ff          jmp    0x3ed  624:       b9 1b 00 00 00          mov    ecx, 0x1b  629:       be 2f 00 00 00          mov    esi, 0x2f  62e:       89 c8                   mov    eax, ecx  630:       99                      cdq  631:       f7 fe                   idiv   esi  633:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  638:       30 44 0c 05             xor    BYTE PTR [esp+ecx*1+0x5], al  63c:       83 c1 01                add    ecx, 0x1  63f:       83 f9 37                cmp    ecx, 0x37  642:       75 ea                   jne    0x62e  644:       cd 0b                   int    0xb  646:       be 33 00 00 00          mov    esi, 0x33  64b:       e9 9d fd ff ff          jmp    0x3ed  650:       8d 74 24 03             lea    esi, [esp+0x3]  654:       b9 1d 00 00 00          mov    ecx, 0x1d  659:       bf 2f 00 00 00          mov    edi, 0x2f  65e:       89 c8                   mov    eax, ecx  660:       99                      cdq  661:       f7 ff                   idiv   edi  663:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  668:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  66b:       83 c1 01                add    ecx, 0x1  66e:       83 f9 3b                cmp    ecx, 0x3b  671:       75 eb                   jne    0x65e  673:       cd 2d                   int    0x2d  675:       be 11 00 00 00          mov    esi, 0x11  67a:       e9 6e fd ff ff          jmp    0x3ed  67f:       8d 74 24 f5             lea    esi, [esp-0xb]  683:       b9 2b 00 00 00          mov    ecx, 0x2b  688:       bf 2f 00 00 00          mov    edi, 0x2f  68d:       89 c8                   mov    eax, ecx  68f:       99                      cdq  690:       f7 ff                   idiv   edi  692:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  697:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  69a:       83 c1 01                add    ecx, 0x1  69d:       83 f9 57                cmp    ecx, 0x57  6a0:       75 eb                   jne    0x68d  6a2:       cd 4c                   int    0x4c  6a4:       be 13 00 00 00          mov    esi, 0x13  6a9:       e9 3f fd ff ff          jmp    0x3ed  6ae:       8d 74 24 fc             lea    esi, [esp-0x4]  6b2:       b9 24 00 00 00          mov    ecx, 0x24  6b7:       bf 2f 00 00 00          mov    edi, 0x2f  6bc:       89 c8                   mov    eax, ecx  6be:       99                      cdq  6bf:       f7 ff                   idiv   edi  6c1:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  6c6:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  6c9:       83 c1 01                add    ecx, 0x1  6cc:       83 f9 49                cmp    ecx, 0x49  6cf:       75 eb                   jne    0x6bc  6d1:       cd 5b                   int    0x5b  6d3:       be 0d 00 00 00          mov    esi, 0xd  6d8:       e9 10 fd ff ff          jmp    0x3ed  6dd:       8d 4c 24 13             lea    ecx, [esp+0x13]  6e1:       be 0d 00 00 00          mov    esi, 0xd  6e6:       bf 2f 00 00 00          mov    edi, 0x2f  6eb:       89 f0                   mov    eax, esi  6ed:       99                      cdq  6ee:       f7 ff                   idiv   edi  6f0:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  6f5:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  6f8:       83 c6 01                add    esi, 0x1  6fb:       83 fe 1b                cmp    esi, 0x1b  6fe:       75 eb                   jne    0x6eb  700:       cd 50                   int    0x50  702:       be 3b 00 00 00          mov    esi, 0x3b  707:       e9 e1 fc ff ff          jmp    0x3ed  70c:       b9 2d 00 00 00          mov    ecx, 0x2d  711:       be 2f 00 00 00          mov    esi, 0x2f  716:       89 c8                   mov    eax, ecx  718:       99                      cdq  719:       f7 fe                   idiv   esi  71b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  720:       30 44 0c f3             xor    BYTE PTR [esp+ecx*1-0xd], al  724:       83 c1 01                add    ecx, 0x1  727:       83 f9 5b                cmp    ecx, 0x5b  72a:       75 ea                   jne    0x716  72c:       cd 49                   int    0x49  72e:       be 29 00 00 00          mov    esi, 0x29  733:       e9 b5 fc ff ff          jmp    0x3ed  738:       8d 4c 24 0f             lea    ecx, [esp+0xf]  73c:       be 11 00 00 00          mov    esi, 0x11  741:       bf 2f 00 00 00          mov    edi, 0x2f  746:       89 f0                   mov    eax, esi  748:       99                      cdq  749:       f7 ff                   idiv   edi  74b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  750:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  753:       83 c6 01                add    esi, 0x1  756:       83 fe 23                cmp    esi, 0x23  759:       75 eb                   jne    0x746  75b:       cd 01                   int    0x1  75d:       be 30 00 00 00          mov    esi, 0x30  762:       e9 86 fc ff ff          jmp    0x3ed  767:       8d 74 24 03             lea    esi, [esp+0x3]  76b:       b9 1d 00 00 00          mov    ecx, 0x1d  770:       bf 2f 00 00 00          mov    edi, 0x2f  775:       89 c8                   mov    eax, ecx  777:       99                      cdq  778:       f7 ff                   idiv   edi  77a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  77f:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  782:       83 c1 01                add    ecx, 0x1  785:       83 f9 3b                cmp    ecx, 0x3b  788:       75 eb                   jne    0x775  78a:       cd 48                   int    0x48  78c:       be 14 00 00 00          mov    esi, 0x14  791:       e9 57 fc ff ff          jmp    0x3ed  796:       8d 4c 24 08             lea    ecx, [esp+0x8]  79a:       bf 2f 00 00 00          mov    edi, 0x2f  79f:       89 f0                   mov    eax, esi  7a1:       99                      cdq  7a2:       f7 ff                   idiv   edi  7a4:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  7a9:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  7ac:       83 c6 01                add    esi, 0x1  7af:       83 fe 31                cmp    esi, 0x31  7b2:       75 eb                   jne    0x79f  7b4:       cd 58                   int    0x58  7b6:       be 4e 00 00 00          mov    esi, 0x4e  7bb:       e9 2d fc ff ff          jmp    0x3ed  7c0:       8d 74 24 03             lea    esi, [esp+0x3]  7c4:       b9 1d 00 00 00          mov    ecx, 0x1d  7c9:       bf 2f 00 00 00          mov    edi, 0x2f  7ce:       89 c8                   mov    eax, ecx  7d0:       99                      cdq  7d1:       f7 ff                   idiv   edi  7d3:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  7d8:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  7db:       83 c1 01                add    ecx, 0x1  7de:       83 f9 3b                cmp    ecx, 0x3b  7e1:       75 eb                   jne    0x7ce  7e3:       cd 31                   int    0x31  7e5:       be 4b 00 00 00          mov    esi, 0x4b  7ea:       e9 fe fb ff ff          jmp    0x3ed  7ef:       b9 2e 00 00 00          mov    ecx, 0x2e  7f4:       be 2f 00 00 00          mov    esi, 0x2f  7f9:       89 c8                   mov    eax, ecx  7fb:       99                      cdq  7fc:       f7 fe                   idiv   esi  7fe:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  803:       30 44 0c f2             xor    BYTE PTR [esp+ecx*1-0xe], al  807:       83 c1 01                add    ecx, 0x1  80a:       83 f9 5d                cmp    ecx, 0x5d  80d:       75 ea                   jne    0x7f9  80f:       cd 3c                   int    0x3c  811:       be 52 00 00 00          mov    esi, 0x52  816:       e9 d2 fb ff ff          jmp    0x3ed  81b:       b9 03 00 00 00          mov    ecx, 0x3  820:       be 2f 00 00 00          mov    esi, 0x2f  825:       89 c8                   mov    eax, ecx  827:       99                      cdq  828:       f7 fe                   idiv   esi  82a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  82f:       30 44 0c 1d             xor    BYTE PTR [esp+ecx*1+0x1d], al  833:       83 c1 01                add    ecx, 0x1  836:       83 f9 07                cmp    ecx, 0x7  839:       75 ea                   jne    0x825  83b:       cd 1c                   int    0x1c  83d:       be 4d 00 00 00          mov    esi, 0x4d  842:       e9 a6 fb ff ff          jmp    0x3ed  847:       8d 4c 24 f7             lea    ecx, [esp-0x9]  84b:       be 29 00 00 00          mov    esi, 0x29  850:       bf 2f 00 00 00          mov    edi, 0x2f  855:       89 f0                   mov    eax, esi  857:       99                      cdq  858:       f7 ff                   idiv   edi  85a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  85f:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  862:       83 c6 01                add    esi, 0x1  865:       83 fe 53                cmp    esi, 0x53  868:       75 eb                   jne    0x855  86a:       cd 06                   int    0x6  86c:       be 2a 00 00 00          mov    esi, 0x2a  871:       e9 77 fb ff ff          jmp    0x3ed  876:       8d 74 24 17             lea    esi, [esp+0x17]  87a:       b9 09 00 00 00          mov    ecx, 0x9  87f:       bf 2f 00 00 00          mov    edi, 0x2f  884:       89 c8                   mov    eax, ecx  886:       99                      cdq  887:       f7 ff                   idiv   edi  889:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  88e:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  891:       83 c1 01                add    ecx, 0x1  894:       83 f9 13                cmp    ecx, 0x13  897:       75 eb                   jne    0x884  899:       cd 35                   int    0x35  89b:       be 4a 00 00 00          mov    esi, 0x4a  8a0:       e9 48 fb ff ff          jmp    0x3ed  8a5:       8d 74 24 fc             lea    esi, [esp-0x4]  8a9:       b9 24 00 00 00          mov    ecx, 0x24  8ae:       bf 2f 00 00 00          mov    edi, 0x2f  8b3:       89 c8                   mov    eax, ecx  8b5:       99                      cdq  8b6:       f7 ff                   idiv   edi  8b8:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  8bd:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  8c0:       83 c1 01                add    ecx, 0x1  8c3:       83 f9 49                cmp    ecx, 0x49  8c6:       75 eb                   jne    0x8b3  8c8:       cd 54                   int    0x54  8ca:       be 38 00 00 00          mov    esi, 0x38  8cf:       e9 19 fb ff ff          jmp    0x3ed  8d4:       8d 4c 24 18             lea    ecx, [esp+0x18]  8d8:       be 08 00 00 00          mov    esi, 0x8  8dd:       bf 2f 00 00 00          mov    edi, 0x2f  8e2:       89 f0                   mov    eax, esi  8e4:       99                      cdq  8e5:       f7 ff                   idiv   edi  8e7:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  8ec:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  8ef:       83 c6 01                add    esi, 0x1  8f2:       83 fe 11                cmp    esi, 0x11  8f5:       75 eb                   jne    0x8e2  8f7:       cd 2f                   int    0x2f  8f9:       be 0f 00 00 00          mov    esi, 0xf  8fe:       e9 ea fa ff ff          jmp    0x3ed  903:       8d 74 24 fc             lea    esi, [esp-0x4]  907:       b9 24 00 00 00          mov    ecx, 0x24  90c:       bf 2f 00 00 00          mov    edi, 0x2f  911:       89 c8                   mov    eax, ecx  913:       99                      cdq  914:       f7 ff                   idiv   edi  916:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  91b:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  91e:       83 c1 01                add    ecx, 0x1  921:       83 f9 49                cmp    ecx, 0x49  924:       75 eb                   jne    0x911  926:       cd 43                   int    0x43  928:       be 43 00 00 00          mov    esi, 0x43  92d:       e9 bb fa ff ff          jmp    0x3ed  932:       8d 4c 24 12             lea    ecx, [esp+0x12]  936:       be 0e 00 00 00          mov    esi, 0xe  93b:       bf 2f 00 00 00          mov    edi, 0x2f  940:       89 f0                   mov    eax, esi  942:       99                      cdq  943:       f7 ff                   idiv   edi  945:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  94a:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  94d:       83 c6 01                add    esi, 0x1  950:       83 fe 1d                cmp    esi, 0x1d  953:       75 eb                   jne    0x940  955:       cd 0a                   int    0xa  957:       be 57 00 00 00          mov    esi, 0x57  95c:       e9 8c fa ff ff          jmp    0x3ed  961:       8d 4c 24 1e             lea    ecx, [esp+0x1e]  965:       be 02 00 00 00          mov    esi, 0x2  96a:       bf 2f 00 00 00          mov    edi, 0x2f  96f:       89 f0                   mov    eax, esi  971:       99                      cdq  972:       f7 ff                   idiv   edi  974:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  979:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  97c:       83 c6 01                add    esi, 0x1  97f:       83 fe 05                cmp    esi, 0x5  982:       75 eb                   jne    0x96f  984:       cd 04                   int    0x4  986:       be 28 00 00 00          mov    esi, 0x28  98b:       e9 5d fa ff ff          jmp    0x3ed  990:       8d 74 24 1c             lea    esi, [esp+0x1c]  994:       b9 04 00 00 00          mov    ecx, 0x4  999:       bf 2f 00 00 00          mov    edi, 0x2f  99e:       89 c8                   mov    eax, ecx  9a0:       99                      cdq  9a1:       f7 ff                   idiv   edi  9a3:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  9a8:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  9ab:       83 c1 01                add    ecx, 0x1  9ae:       83 f9 09                cmp    ecx, 0x9  9b1:       75 eb                   jne    0x99e  9b3:       cd 52                   int    0x52  9b5:       be 44 00 00 00          mov    esi, 0x44  9ba:       e9 2e fa ff ff          jmp    0x3ed  9bf:       8d 4c 24 18             lea    ecx, [esp+0x18]  9c3:       be 08 00 00 00          mov    esi, 0x8  9c8:       bf 2f 00 00 00          mov    edi, 0x2f  9cd:       89 f0                   mov    eax, esi  9cf:       99                      cdq  9d0:       f7 ff                   idiv   edi  9d2:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  9d7:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  9da:       83 c6 01                add    esi, 0x1  9dd:       83 fe 11                cmp    esi, 0x11  9e0:       75 eb                   jne    0x9cd  9e2:       cd 4b                   int    0x4b  9e4:       be 10 00 00 00          mov    esi, 0x10  9e9:       e9 ff f9 ff ff          jmp    0x3ed  9ee:       8d 4c 24 13             lea    ecx, [esp+0x13]  9f2:       be 0d 00 00 00          mov    esi, 0xd  9f7:       bf 2f 00 00 00          mov    edi, 0x2f  9fc:       89 f0                   mov    eax, esi  9fe:       99                      cdq  9ff:       f7 ff                   idiv   edi  a01:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  a06:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  a09:       83 c6 01                add    esi, 0x1  a0c:       83 fe 1b                cmp    esi, 0x1b  a0f:       75 eb                   jne    0x9fc  a11:       cd 56                   int    0x56  a13:       be 51 00 00 00          mov    esi, 0x51  a18:       e9 d0 f9 ff ff          jmp    0x3ed  a1d:       8d 4c 24 1e             lea    ecx, [esp+0x1e]  a21:       be 02 00 00 00          mov    esi, 0x2  a26:       bf 2f 00 00 00          mov    edi, 0x2f  a2b:       89 f0                   mov    eax, esi  a2d:       99                      cdq  a2e:       f7 ff                   idiv   edi  a30:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  a35:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  a38:       83 c6 01                add    esi, 0x1  a3b:       83 fe 05                cmp    esi, 0x5  a3e:       75 eb                   jne    0xa2b  a40:       cd 5e                   int    0x5e  a42:       be 2f 00 00 00          mov    esi, 0x2f  a47:       e9 a1 f9 ff ff          jmp    0x3ed  a4c:       8d 4c 24 0a             lea    ecx, [esp+0xa]  a50:       be 16 00 00 00          mov    esi, 0x16  a55:       bf 2f 00 00 00          mov    edi, 0x2f  a5a:       89 f0                   mov    eax, esi  a5c:       99                      cdq  a5d:       f7 ff                   idiv   edi  a5f:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  a64:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  a67:       83 c6 01                add    esi, 0x1  a6a:       83 fe 2d                cmp    esi, 0x2d  a6d:       75 eb                   jne    0xa5a  a6f:       cd 5a                   int    0x5a  a71:       be 5a 00 00 00          mov    esi, 0x5a  a76:       e9 72 f9 ff ff          jmp    0x3ed  a7b:       8d 4c 24 08             lea    ecx, [esp+0x8]  a7f:       be 18 00 00 00          mov    esi, 0x18  a84:       bf 2f 00 00 00          mov    edi, 0x2f  a89:       89 f0                   mov    eax, esi  a8b:       99                      cdq  a8c:       f7 ff                   idiv   edi  a8e:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  a93:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  a96:       83 c6 01                add    esi, 0x1  a99:       83 fe 31                cmp    esi, 0x31  a9c:       75 eb                   jne    0xa89  a9e:       cd 37                   int    0x37  aa0:       be 18 00 00 00          mov    esi, 0x18  aa5:       e9 43 f9 ff ff          jmp    0x3ed  aaa:       b9 27 00 00 00          mov    ecx, 0x27  aaf:       be 2f 00 00 00          mov    esi, 0x2f  ab4:       89 c8                   mov    eax, ecx  ab6:       99                      cdq  ab7:       f7 fe                   idiv   esi  ab9:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  abe:       30 44 0c f9             xor    BYTE PTR [esp+ecx*1-0x7], al  ac2:       83 c1 01                add    ecx, 0x1  ac5:       83 f9 4f                cmp    ecx, 0x4f  ac8:       75 ea                   jne    0xab4  aca:       cd 25                   int    0x25  acc:       be 3c 00 00 00          mov    esi, 0x3c  ad1:       e9 17 f9 ff ff          jmp    0x3ed  ad6:       8d 4c 24 f7             lea    ecx, [esp-0x9]  ada:       be 29 00 00 00          mov    esi, 0x29  adf:       bf 2f 00 00 00          mov    edi, 0x2f  ae4:       89 f0                   mov    eax, esi  ae6:       99                      cdq  ae7:       f7 ff                   idiv   edi  ae9:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  aee:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  af1:       83 c6 01                add    esi, 0x1  af4:       83 fe 53                cmp    esi, 0x53  af7:       75 eb                   jne    0xae4  af9:       cd 57                   int    0x57  afb:       be 02 00 00 00          mov    esi, 0x2  b00:       e9 e8 f8 ff ff          jmp    0x3ed  b05:       b9 21 00 00 00          mov    ecx, 0x21  b0a:       be 2f 00 00 00          mov    esi, 0x2f  b0f:       89 c8                   mov    eax, ecx  b11:       99                      cdq  b12:       f7 fe                   idiv   esi  b14:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  b19:       30 44 0c ff             xor    BYTE PTR [esp+ecx*1-0x1], al  b1d:       83 c1 01                add    ecx, 0x1  b20:       83 f9 43                cmp    ecx, 0x43  b23:       75 ea                   jne    0xb0f  b25:       cd 53                   int    0x53  b27:       be 59 00 00 00          mov    esi, 0x59  b2c:       e9 bc f8 ff ff          jmp    0x3ed  b31:       8d 74 24 fc             lea    esi, [esp-0x4]  b35:       b9 24 00 00 00          mov    ecx, 0x24  b3a:       bf 2f 00 00 00          mov    edi, 0x2f  b3f:       89 c8                   mov    eax, ecx  b41:       99                      cdq  b42:       f7 ff                   idiv   edi  b44:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  b49:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  b4c:       83 c1 01                add    ecx, 0x1  b4f:       83 f9 49                cmp    ecx, 0x49  b52:       75 eb                   jne    0xb3f  b54:       cd 46                   int    0x46  b56:       be 24 00 00 00          mov    esi, 0x24  b5b:       e9 8d f8 ff ff          jmp    0x3ed  b60:       8d 4c 24 0a             lea    ecx, [esp+0xa]  b64:       be 16 00 00 00          mov    esi, 0x16  b69:       bf 2f 00 00 00          mov    edi, 0x2f  b6e:       89 f0                   mov    eax, esi  b70:       99                      cdq  b71:       f7 ff                   idiv   edi  b73:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  b78:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  b7b:       83 c6 01                add    esi, 0x1  b7e:       83 fe 2d                cmp    esi, 0x2d  b81:       75 eb                   jne    0xb6e  b83:       cd 30                   int    0x30  b85:       be 40 00 00 00          mov    esi, 0x40  b8a:       e9 5e f8 ff ff          jmp    0x3ed  b8f:       8d 74 24 14             lea    esi, [esp+0x14]  b93:       b9 0c 00 00 00          mov    ecx, 0xc  b98:       bf 2f 00 00 00          mov    edi, 0x2f  b9d:       89 c8                   mov    eax, ecx  b9f:       99                      cdq  ba0:       f7 ff                   idiv   edi  ba2:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  ba7:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  baa:       83 c1 01                add    ecx, 0x1  bad:       83 f9 19                cmp    ecx, 0x19  bb0:       75 eb                   jne    0xb9d  bb2:       cd 62                   int    0x62  bb4:       be 41 00 00 00          mov    esi, 0x41  bb9:       e9 2f f8 ff ff          jmp    0x3ed  bbe:       8d 74 24 fc             lea    esi, [esp-0x4]  bc2:       b9 24 00 00 00          mov    ecx, 0x24  bc7:       bf 2f 00 00 00          mov    edi, 0x2f  bcc:       89 c8                   mov    eax, ecx  bce:       99                      cdq  bcf:       f7 ff                   idiv   edi  bd1:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  bd6:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  bd9:       83 c1 01                add    ecx, 0x1  bdc:       83 f9 49                cmp    ecx, 0x49  bdf:       75 eb                   jne    0xbcc  be1:       cd 63                   int    0x63  be3:       be 12 00 00 00          mov    esi, 0x12  be8:       e9 00 f8 ff ff          jmp    0x3ed  bed:       b9 22 00 00 00          mov    ecx, 0x22  bf2:       be 2f 00 00 00          mov    esi, 0x2f  bf7:       89 c8                   mov    eax, ecx  bf9:       99                      cdq  bfa:       f7 fe                   idiv   esi  bfc:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  c01:       30 44 0c fe             xor    BYTE PTR [esp+ecx*1-0x2], al  c05:       83 c1 01                add    ecx, 0x1  c08:       83 f9 45                cmp    ecx, 0x45  c0b:       75 ea                   jne    0xbf7  c0d:       cd 45                   int    0x45  c0f:       be 2c 00 00 00          mov    esi, 0x2c  c14:       e9 d4 f7 ff ff          jmp    0x3ed  c19:       8d 74 24 0d             lea    esi, [esp+0xd]  c1d:       b9 13 00 00 00          mov    ecx, 0x13  c22:       bf 2f 00 00 00          mov    edi, 0x2f  c27:       89 c8                   mov    eax, ecx  c29:       99                      cdq  c2a:       f7 ff                   idiv   edi  c2c:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  c31:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  c34:       83 c1 01                add    ecx, 0x1  c37:       83 f9 27                cmp    ecx, 0x27  c3a:       75 eb                   jne    0xc27  c3c:       cd 09                   int    0x9  c3e:       be 63 00 00 00          mov    esi, 0x63  c43:       e9 a5 f7 ff ff          jmp    0x3ed  c48:       b9 0a 00 00 00          mov    ecx, 0xa  c4d:       be 2f 00 00 00          mov    esi, 0x2f  c52:       89 c8                   mov    eax, ecx  c54:       99                      cdq  c55:       f7 fe                   idiv   esi  c57:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  c5c:       30 44 0c 16             xor    BYTE PTR [esp+ecx*1+0x16], al  c60:       83 c1 01                add    ecx, 0x1  c63:       83 f9 15                cmp    ecx, 0x15  c66:       75 ea                   jne    0xc52  c68:       cd 26                   int    0x26  c6a:       be 53 00 00 00          mov    esi, 0x53  c6f:       e9 79 f7 ff ff          jmp    0x3ed  c74:       8d 74 24 f5             lea    esi, [esp-0xb]  c78:       b9 2b 00 00 00          mov    ecx, 0x2b  c7d:       bf 2f 00 00 00          mov    edi, 0x2f  c82:       89 c8                   mov    eax, ecx  c84:       99                      cdq  c85:       f7 ff                   idiv   edi  c87:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  c8c:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  c8f:       83 c1 01                add    ecx, 0x1  c92:       83 f9 57                cmp    ecx, 0x57  c95:       75 eb                   jne    0xc82  c97:       cd 33                   int    0x33  c99:       be 20 00 00 00          mov    esi, 0x20  c9e:       e9 4a f7 ff ff          jmp    0x3ed  ca3:       8d 4c 24 18             lea    ecx, [esp+0x18]  ca7:       be 08 00 00 00          mov    esi, 0x8  cac:       bf 2f 00 00 00          mov    edi, 0x2f  cb1:       89 f0                   mov    eax, esi  cb3:       99                      cdq  cb4:       f7 ff                   idiv   edi  cb6:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  cbb:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  cbe:       83 c6 01                add    esi, 0x1  cc1:       83 fe 11                cmp    esi, 0x11  cc4:       75 eb                   jne    0xcb1  cc6:       cd 5c                   int    0x5c  cc8:       be 54 00 00 00          mov    esi, 0x54  ccd:       e9 1b f7 ff ff          jmp    0x3ed  cd2:       8d 4c 24 f8             lea    ecx, [esp-0x8]  cd6:       be 28 00 00 00          mov    esi, 0x28  cdb:       bf 2f 00 00 00          mov    edi, 0x2f  ce0:       89 f0                   mov    eax, esi  ce2:       99                      cdq  ce3:       f7 ff                   idiv   edi  ce5:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  cea:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  ced:       83 c6 01                add    esi, 0x1  cf0:       83 fe 51                cmp    esi, 0x51  cf3:       75 eb                   jne    0xce0  cf5:       cd 17                   int    0x17  cf7:       be 05 00 00 00          mov    esi, 0x5  cfc:       e9 ec f6 ff ff          jmp    0x3ed  d01:       b9 05 00 00 00          mov    ecx, 0x5  d06:       be 2f 00 00 00          mov    esi, 0x2f  d0b:       89 c8                   mov    eax, ecx  d0d:       99                      cdq  d0e:       f7 fe                   idiv   esi  d10:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  d15:       30 44 0c 1b             xor    BYTE PTR [esp+ecx*1+0x1b], al  d19:       83 c1 01                add    ecx, 0x1  d1c:       83 f9 0b                cmp    ecx, 0xb  d1f:       75 ea                   jne    0xd0b  d21:       cd 1a                   int    0x1a  d23:       be 0c 00 00 00          mov    esi, 0xc  d28:       e9 c0 f6 ff ff          jmp    0x3ed  d2d:       8d 4c 24 0f             lea    ecx, [esp+0xf]  d31:       bf 2f 00 00 00          mov    edi, 0x2f  d36:       89 f0                   mov    eax, esi  d38:       99                      cdq  d39:       f7 ff                   idiv   edi  d3b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  d40:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  d43:       83 c6 01                add    esi, 0x1  d46:       83 fe 23                cmp    esi, 0x23  d49:       75 eb                   jne    0xd36  d4b:       cd 07                   int    0x7  d4d:       be 0b 00 00 00          mov    esi, 0xb  d52:       e9 96 f6 ff ff          jmp    0x3ed  d57:       8d 74 24 f6             lea    esi, [esp-0xa]  d5b:       b9 2a 00 00 00          mov    ecx, 0x2a  d60:       bf 2f 00 00 00          mov    edi, 0x2f  d65:       89 c8                   mov    eax, ecx  d67:       99                      cdq  d68:       f7 ff                   idiv   edi  d6a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  d6f:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  d72:       83 c1 01                add    ecx, 0x1  d75:       83 f9 55                cmp    ecx, 0x55  d78:       75 eb                   jne    0xd65  d7a:       cd 39                   int    0x39  d7c:       be 46 00 00 00          mov    esi, 0x46  d81:       e9 67 f6 ff ff          jmp    0x3ed  d86:       8d 4c 24 f8             lea    ecx, [esp-0x8]  d8a:       be 28 00 00 00          mov    esi, 0x28  d8f:       bf 2f 00 00 00          mov    edi, 0x2f  d94:       89 f0                   mov    eax, esi  d96:       99                      cdq  d97:       f7 ff                   idiv   edi  d99:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  d9e:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  da1:       83 c6 01                add    esi, 0x1  da4:       83 fe 51                cmp    esi, 0x51  da7:       75 eb                   jne    0xd94  da9:       cd 05                   int    0x5  dab:       be 4c 00 00 00          mov    esi, 0x4c  db0:       e9 38 f6 ff ff          jmp    0x3ed  db5:       8d 74 24 06             lea    esi, [esp+0x6]  db9:       b9 1a 00 00 00          mov    ecx, 0x1a  dbe:       bf 2f 00 00 00          mov    edi, 0x2f  dc3:       89 c8                   mov    eax, ecx  dc5:       99                      cdq  dc6:       f7 ff                   idiv   edi  dc8:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  dcd:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  dd0:       83 c1 01                add    ecx, 0x1  dd3:       83 f9 35                cmp    ecx, 0x35  dd6:       75 eb                   jne    0xdc3  dd8:       cd 18                   int    0x18  dda:       be 5b 00 00 00          mov    esi, 0x5b  ddf:       e9 09 f6 ff ff          jmp    0x3ed  de4:       8d 4c 24 0b             lea    ecx, [esp+0xb]  de8:       be 15 00 00 00          mov    esi, 0x15  ded:       bf 2f 00 00 00          mov    edi, 0x2f  df2:       89 f0                   mov    eax, esi  df4:       99                      cdq  df5:       f7 ff                   idiv   edi  df7:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  dfc:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  dff:       83 c6 01                add    esi, 0x1  e02:       83 fe 2b                cmp    esi, 0x2b  e05:       75 eb                   jne    0xdf2  e07:       cd 4d                   int    0x4d  e09:       be 0a 00 00 00          mov    esi, 0xa  e0e:       e9 da f5 ff ff          jmp    0x3ed  e13:       8d 4c 24 13             lea    ecx, [esp+0x13]  e17:       c7 44 24 1c 0d 00 00 00         mov    DWORD PTR [esp+0x1c], 0xd  e1f:       8b 44 24 1c             mov    eax, DWORD PTR [esp+0x1c]  e23:       bf 2f 00 00 00          mov    edi, 0x2f  e28:       99                      cdq  e29:       f7 ff                   idiv   edi  e2b:       8b 7c 24 1c             mov    edi, DWORD PTR [esp+0x1c]  e2f:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  e34:       30 04 39                xor    BYTE PTR [ecx+edi*1], al  e37:       89 f8                   mov    eax, edi  e39:       83 c0 01                add    eax, 0x1  e3c:       83 f8 1b                cmp    eax, 0x1b  e3f:       89 44 24 1c             mov    DWORD PTR [esp+0x1c], eax  e43:       75 da                   jne    0xe1f  e45:       cd 14                   int    0x14  e47:       e9 a1 f5 ff ff          jmp    0x3ed  e4c:       8d 4c 24 08             lea    ecx, [esp+0x8]  e50:       be 18 00 00 00          mov    esi, 0x18  e55:       bf 2f 00 00 00          mov    edi, 0x2f  e5a:       89 f0                   mov    eax, esi  e5c:       99                      cdq  e5d:       f7 ff                   idiv   edi  e5f:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  e64:       30 04 31                xor    BYTE PTR [ecx+esi*1], al  e67:       83 c6 01                add    esi, 0x1  e6a:       83 fe 31                cmp    esi, 0x31  e6d:       75 eb                   jne    0xe5a  e6f:       cd 3d                   int    0x3d  e71:       be 07 00 00 00          mov    esi, 0x7  e76:       e9 72 f5 ff ff          jmp    0x3ed  e7b:       8d 74 24 0c             lea    esi, [esp+0xc]  e7f:       b9 14 00 00 00          mov    ecx, 0x14  e84:       bf 2f 00 00 00          mov    edi, 0x2f  e89:       89 c8                   mov    eax, ecx  e8b:       99                      cdq  e8c:       f7 ff                   idiv   edi  e8e:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  e93:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  e96:       83 c1 01                add    ecx, 0x1  e99:       83 f9 29                cmp    ecx, 0x29  e9c:       75 eb                   jne    0xe89  e9e:       cd 19                   int    0x19  ea0:       be 36 00 00 00          mov    esi, 0x36  ea5:       e9 43 f5 ff ff          jmp    0x3ed  eaa:       8d 74 24 fc             lea    esi, [esp-0x4]  eae:       b9 24 00 00 00          mov    ecx, 0x24  eb3:       bf 2f 00 00 00          mov    edi, 0x2f  eb8:       89 c8                   mov    eax, ecx  eba:       99                      cdq  ebb:       f7 ff                   idiv   edi  ebd:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  ec2:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  ec5:       83 c1 01                add    ecx, 0x1  ec8:       83 f9 49                cmp    ecx, 0x49  ecb:       75 eb                   jne    0xeb8  ecd:       cd 1f                   int    0x1f  ecf:       be 0e 00 00 00          mov    esi, 0xe  ed4:       e9 14 f5 ff ff          jmp    0x3ed  ed9:       8d 74 24 14             lea    esi, [esp+0x14]  edd:       b9 0c 00 00 00          mov    ecx, 0xc  ee2:       bf 2f 00 00 00          mov    edi, 0x2f  ee7:       89 c8                   mov    eax, ecx  ee9:       99                      cdq  eea:       f7 ff                   idiv   edi  eec:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  ef1:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  ef4:       83 c1 01                add    ecx, 0x1  ef7:       83 f9 19                cmp    ecx, 0x19  efa:       75 eb                   jne    0xee7  efc:       cd 34                   int    0x34  efe:       be 01 00 00 00          mov    esi, 0x1  f03:       e9 e5 f4 ff ff          jmp    0x3ed  f08:       8d 74 24 f6             lea    esi, [esp-0xa]  f0c:       b9 2a 00 00 00          mov    ecx, 0x2a  f11:       bf 2f 00 00 00          mov    edi, 0x2f  f16:       89 c8                   mov    eax, ecx  f18:       99                      cdq  f19:       f7 ff                   idiv   edi  f1b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  f20:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  f23:       83 c1 01                add    ecx, 0x1  f26:       83 f9 55                cmp    ecx, 0x55  f29:       75 eb                   jne    0xf16  f2b:       cd 2c                   int    0x2c  f2d:       be 1a 00 00 00          mov    esi, 0x1a  f32:       e9 b6 f4 ff ff          jmp    0x3ed  f37:       8d 74 24 0c             lea    esi, [esp+0xc]  f3b:       b9 14 00 00 00          mov    ecx, 0x14  f40:       bf 2f 00 00 00          mov    edi, 0x2f  f45:       89 c8                   mov    eax, ecx  f47:       99                      cdq  f48:       f7 ff                   idiv   edi  f4a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  f4f:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  f52:       83 c1 01                add    ecx, 0x1  f55:       83 f9 29                cmp    ecx, 0x29  f58:       75 eb                   jne    0xf45  f5a:       cd 0f                   int    0xf  f5c:       be 04 00 00 00          mov    esi, 0x4  f61:       e9 87 f4 ff ff          jmp    0x3ed  f66:       b9 23 00 00 00          mov    ecx, 0x23  f6b:       be 2f 00 00 00          mov    esi, 0x2f  f70:       89 c8                   mov    eax, ecx  f72:       99                      cdq  f73:       f7 fe                   idiv   esi  f75:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  f7a:       30 44 0c fd             xor    BYTE PTR [esp+ecx*1-0x3], al  f7e:       83 c1 01                add    ecx, 0x1  f81:       83 f9 47                cmp    ecx, 0x47  f84:       75 ea                   jne    0xf70  f86:       cd 28                   int    0x28  f88:       be 49 00 00 00          mov    esi, 0x49  f8d:       e9 5b f4 ff ff          jmp    0x3ed  f92:       8d 74 24 f4             lea    esi, [esp-0xc]  f96:       b9 2c 00 00 00          mov    ecx, 0x2c  f9b:       bf 2f 00 00 00          mov    edi, 0x2f  fa0:       89 c8                   mov    eax, ecx  fa2:       99                      cdq  fa3:       f7 ff                   idiv   edi  fa5:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  faa:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  fad:       83 c1 01                add    ecx, 0x1  fb0:       83 f9 59                cmp    ecx, 0x59  fb3:       75 eb                   jne    0xfa0  fb5:       cd 60                   int    0x60  fb7:       be 45 00 00 00          mov    esi, 0x45  fbc:       e9 2c f4 ff ff          jmp    0x3ed  fc1:       8d 74 24 0d             lea    esi, [esp+0xd]  fc5:       b9 13 00 00 00          mov    ecx, 0x13  fca:       bf 2f 00 00 00          mov    edi, 0x2f  fcf:       89 c8                   mov    eax, ecx  fd1:       99                      cdq  fd2:       f7 ff                   idiv   edi  fd4:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]  fd9:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al  fdc:       83 c1 01                add    ecx, 0x1  fdf:       83 f9 27                cmp    ecx, 0x27  fe2:       75 eb                   jne    0xfcf  fe4:       cd 24                   int    0x24  fe6:       be 3f 00 00 00          mov    esi, 0x3f  feb:       e9 fd f3 ff ff          jmp    0x3ed  ff0:       8d 4c 24 0b             lea    ecx, [esp+0xb]  ff4:       be 15 00 00 00          mov    esi, 0x15  ff9:       bf 2f 00 00 00          mov    edi, 0x2f  ffe:       89 f0                   mov    eax, esi1000:       99                      cdq1001:       f7 ff                   idiv   edi1003:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1008:       30 04 31                xor    BYTE PTR [ecx+esi*1], al100b:       83 c6 01                add    esi, 0x1100e:       83 fe 2b                cmp    esi, 0x2b1011:       75 eb                   jne    0xffe1013:       cd 15                   int    0x151015:       be 5c 00 00 00          mov    esi, 0x5c101a:       e9 ce f3 ff ff          jmp    0x3ed101f:       8d 4c 24 f8             lea    ecx, [esp-0x8]1023:       be 28 00 00 00          mov    esi, 0x281028:       bf 2f 00 00 00          mov    edi, 0x2f102d:       89 f0                   mov    eax, esi102f:       99                      cdq1030:       f7 ff                   idiv   edi1032:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1037:       30 04 31                xor    BYTE PTR [ecx+esi*1], al103a:       83 c6 01                add    esi, 0x1103d:       83 fe 51                cmp    esi, 0x511040:       75 eb                   jne    0x102d1042:       cd 59                   int    0x591044:       be 5e 00 00 00          mov    esi, 0x5e1049:       e9 9f f3 ff ff          jmp    0x3ed104e:       8d 4c 24 12             lea    ecx, [esp+0x12]1052:       be 0e 00 00 00          mov    esi, 0xe1057:       bf 2f 00 00 00          mov    edi, 0x2f105c:       89 f0                   mov    eax, esi105e:       99                      cdq105f:       f7 ff                   idiv   edi1061:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1066:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1069:       83 c6 01                add    esi, 0x1106c:       83 fe 1d                cmp    esi, 0x1d106f:       75 eb                   jne    0x105c1071:       cd 0e                   int    0xe1073:       be 16 00 00 00          mov    esi, 0x161078:       e9 70 f3 ff ff          jmp    0x3ed107d:       8d 74 24 19             lea    esi, [esp+0x19]1081:       b9 07 00 00 00          mov    ecx, 0x71086:       bf 2f 00 00 00          mov    edi, 0x2f108b:       89 c8                   mov    eax, ecx108d:       99                      cdq108e:       f7 ff                   idiv   edi1090:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1095:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1098:       83 c1 01                add    ecx, 0x1109b:       83 f9 0f                cmp    ecx, 0xf109e:       75 eb                   jne    0x108b10a0:       cd 42                   int    0x4210a2:       be 37 00 00 00          mov    esi, 0x3710a7:       e9 41 f3 ff ff          jmp    0x3ed10ac:       8d 74 24 15             lea    esi, [esp+0x15]10b0:       b9 0b 00 00 00          mov    ecx, 0xb10b5:       bf 2f 00 00 00          mov    edi, 0x2f10ba:       89 c8                   mov    eax, ecx10bc:       99                      cdq10bd:       f7 ff                   idiv   edi10bf:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]10c4:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al10c7:       83 c1 01                add    ecx, 0x110ca:       83 f9 17                cmp    ecx, 0x17:q10cd:       75 eb                   jne    0x10ba10cf:       0f a2                   cpuid10d1:       be 2e 00 00 00          mov    esi, 0x2e10d6:       e9 12 f3 ff ff          jmp    0x3ed10db:       8d 4c 24 08             lea    ecx, [esp+0x8]10df:       be 18 00 00 00          mov    esi, 0x1810e4:       bf 2f 00 00 00          mov    edi, 0x2f10e9:       89 f0                   mov    eax, esi10eb:       99                      cdq10ec:       f7 ff                   idiv   edi10ee:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]10f3:       30 04 31                xor    BYTE PTR [ecx+esi*1], al10f6:       83 c6 01                add    esi, 0x110f9:       83 fe 31                cmp    esi, 0x3110fc:       75 eb                   jne    0x10e910fe:       cd 3b                   int    0x3b1100:       be 1f 00 00 00          mov    esi, 0x1f1105:       e9 e3 f2 ff ff          jmp    0x3ed110a:       8d 4c 24 0a             lea    ecx, [esp+0xa]110e:       be 16 00 00 00          mov    esi, 0x161113:       bf 2f 00 00 00          mov    edi, 0x2f1118:       89 f0                   mov    eax, esi111a:       99                      cdq111b:       f7 ff                   idiv   edi111d:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1122:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1125:       83 c6 01                add    esi, 0x11128:       83 fe 2d                cmp    esi, 0x2d112b:       75 eb                   jne    0x1118112d:       cd 16                   int    0x16112f:       be 25 00 00 00          mov    esi, 0x251134:       e9 b4 f2 ff ff          jmp    0x3ed1139:       8d 74 24 f4             lea    esi, [esp-0xc]113d:       b9 2c 00 00 00          mov    ecx, 0x2c1142:       bf 2f 00 00 00          mov    edi, 0x2f1147:       89 c8                   mov    eax, ecx1149:       99                      cdq114a:       f7 ff                   idiv   edi114c:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1151:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1154:       83 c1 01                add    ecx, 0x11157:       83 f9 59                cmp    ecx, 0x59115a:       75 eb                   jne    0x1147115c:       cd 0c                   int    0xc115e:       be 48 00 00 00          mov    esi, 0x481163:       e9 85 f2 ff ff          jmp    0x3ed1168:       8d 74 24 03             lea    esi, [esp+0x3]116c:       b9 1d 00 00 00          mov    ecx, 0x1d1171:       bf 2f 00 00 00          mov    edi, 0x2f1176:       89 c8                   mov    eax, ecx1178:       99                      cdq1179:       f7 ff                   idiv   edi117b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1180:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1183:       83 c1 01                add    ecx, 0x11186:       83 f9 3b                cmp    ecx, 0x3b1189:       75 eb                   jne    0x1176118b:       cd 64                   int    0x64118d:       be 17 00 00 00          mov    esi, 0x171192:       e9 56 f2 ff ff          jmp    0x3ed1197:       8d 74 24 fa             lea    esi, [esp-0x6]119b:       b9 26 00 00 00          mov    ecx, 0x2611a0:       bf 2f 00 00 00          mov    edi, 0x2f11a5:       89 c8                   mov    eax, ecx11a7:       99                      cdq11a8:       f7 ff                   idiv   edi11aa:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]11af:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al11b2:       83 c1 01                add    ecx, 0x111b5:       83 f9 4d                cmp    ecx, 0x4d11b8:       75 eb                   jne    0x11a511ba:       cd 22                   int    0x2211bc:       be 3e 00 00 00          mov    esi, 0x3e11c1:       e9 27 f2 ff ff          jmp    0x3ed11c6:       8d 4c 24 0f             lea    ecx, [esp+0xf]11ca:       be 11 00 00 00          mov    esi, 0x1111cf:       bf 2f 00 00 00          mov    edi, 0x2f11d4:       89 f0                   mov    eax, esi11d6:       99                      cdq11d7:       f7 ff                   idiv   edi11d9:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]11de:       30 04 31                xor    BYTE PTR [ecx+esi*1], al11e1:       83 c6 01                add    esi, 0x111e4:       83 fe 23                cmp    esi, 0x2311e7:       75 eb                   jne    0x11d411e9:       cd 29                   int    0x2911eb:       be 58 00 00 00          mov    esi, 0x5811f0:       e9 f8 f1 ff ff          jmp    0x3ed11f5:       8d 74 24 1a             lea    esi, [esp+0x1a]11f9:       b9 06 00 00 00          mov    ecx, 0x611fe:       bf 2f 00 00 00          mov    edi, 0x2f1203:       89 c8                   mov    eax, ecx1205:       99                      cdq1206:       f7 ff                   idiv   edi1208:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]120d:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1210:       83 c1 01                add    ecx, 0x11213:       83 f9 0d                cmp    ecx, 0xd1216:       75 eb                   jne    0x12031218:       cd 27                   int    0x27121a:       be 56 00 00 00          mov    esi, 0x56121f:       e9 c9 f1 ff ff          jmp    0x3ed1224:       8d 4c 24 f7             lea    ecx, [esp-0x9]1228:       be 29 00 00 00          mov    esi, 0x29122d:       bf 2f 00 00 00          mov    edi, 0x2f1232:       89 f0                   mov    eax, esi1234:       99                      cdq1235:       f7 ff                   idiv   edi1237:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]123c:       30 04 31                xor    BYTE PTR [ecx+esi*1], al123f:       83 c6 01                add    esi, 0x11242:       83 fe 53                cmp    esi, 0x531245:       75 eb                   jne    0x12321247:       cd 20                   int    0x201249:       be 55 00 00 00          mov    esi, 0x55124e:       e9 9a f1 ff ff          jmp    0x3ed1253:       8d 4c 24 08             lea    ecx, [esp+0x8]1257:       be 18 00 00 00          mov    esi, 0x18125c:       bf 2f 00 00 00          mov    edi, 0x2f1261:       89 f0                   mov    eax, esi1263:       99                      cdq1264:       f7 ff                   idiv   edi1266:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]126b:       30 04 31                xor    BYTE PTR [ecx+esi*1], al126e:       83 c6 01                add    esi, 0x11271:       83 fe 31                cmp    esi, 0x311274:       75 eb                   jne    0x12611276:       cd 1b                   int    0x1b1278:       be 62 00 00 00          mov    esi, 0x62127d:       e9 6b f1 ff ff          jmp    0x3ed1282:       8d 4c 24 0b             lea    ecx, [esp+0xb]1286:       be 15 00 00 00          mov    esi, 0x15128b:       bf 2f 00 00 00          mov    edi, 0x2f1290:       89 f0                   mov    eax, esi1292:       99                      cdq1293:       f7 ff                   idiv   edi1295:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]129a:       30 04 31                xor    BYTE PTR [ecx+esi*1], al129d:       83 c6 01                add    esi, 0x112a0:       83 fe 2b                cmp    esi, 0x2b12a3:       75 eb                   jne    0x129012a5:       cd 40                   int    0x4012a7:       be 2d 00 00 00          mov    esi, 0x2d12ac:       e9 3c f1 ff ff          jmp    0x3ed12b1:       8d 4c 24 13             lea    ecx, [esp+0x13]12b5:       be 0d 00 00 00          mov    esi, 0xd12ba:       bf 2f 00 00 00          mov    edi, 0x2f12bf:       89 f0                   mov    eax, esi12c1:       99                      cdq12c2:       f7 ff                   idiv   edi12c4:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]12c9:       30 04 31                xor    BYTE PTR [ecx+esi*1], al12cc:       83 c6 01                add    esi, 0x112cf:       83 fe 1b                cmp    esi, 0x1b12d2:       75 eb                   jne    0x12bf12d4:       cd 4e                   int    0x4e12d6:       be 35 00 00 00          mov    esi, 0x3512db:       e9 0d f1 ff ff          jmp    0x3ed12e0:       b9 20 00 00 00          mov    ecx, 0x2012e5:       89 e6                   mov    esi, esp12e7:       bf 2f 00 00 00          mov    edi, 0x2f12ec:       89 c8                   mov    eax, ecx12ee:       99                      cdq12ef:       f7 ff                   idiv   edi12f1:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]12f6:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al12f9:       83 c1 01                add    ecx, 0x112fc:       83 f9 41                cmp    ecx, 0x4112ff:       75 eb                   jne    0x12ec1301:       cd 0d                   int    0xd1303:       be 39 00 00 00          mov    esi, 0x391308:       e9 e0 f0 ff ff          jmp    0x3ed130d:       8d 74 24 06             lea    esi, [esp+0x6]1311:       b9 1a 00 00 00          mov    ecx, 0x1a1316:       bf 2f 00 00 00          mov    edi, 0x2f131b:       89 c8                   mov    eax, ecx131d:       99                      cdq131e:       f7 ff                   idiv   edi1320:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1325:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1328:       83 c1 01                add    ecx, 0x1132b:       83 f9 35                cmp    ecx, 0x35132e:       75 eb                   jne    0x131b1330:       cd 41                   int    0x411332:       be 5f 00 00 00          mov    esi, 0x5f1337:       e9 b1 f0 ff ff          jmp    0x3ed133c:       8d 4c 24 08             lea    ecx, [esp+0x8]1340:       be 18 00 00 00          mov    esi, 0x181345:       bf 2f 00 00 00          mov    edi, 0x2f134a:       89 f0                   mov    eax, esi134c:       99                      cdq134d:       f7 ff                   idiv   edi134f:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1354:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1357:       83 c6 01                add    esi, 0x1135a:       83 fe 31                cmp    esi, 0x31135d:       75 eb                   jne    0x134a135f:       cd 1e                   int    0x1e1361:       be 42 00 00 00          mov    esi, 0x421366:       e9 82 f0 ff ff          jmp    0x3ed136b:       8d 74 24 03             lea    esi, [esp+0x3]136f:       b9 1d 00 00 00          mov    ecx, 0x1d1374:       bf 2f 00 00 00          mov    edi, 0x2f1379:       89 c8                   mov    eax, ecx137b:       99                      cdq137c:       f7 ff                   idiv   edi137e:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1383:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1386:       83 c1 01                add    ecx, 0x11389:       83 f9 3b                cmp    ecx, 0x3b138c:       75 eb                   jne    0x1379138e:       cd 55                   int    0x551390:       be 32 00 00 00          mov    esi, 0x321395:       e9 53 f0 ff ff          jmp    0x3ed139a:       8d 74 24 17             lea    esi, [esp+0x17]139e:       b9 09 00 00 00          mov    ecx, 0x913a3:       bf 2f 00 00 00          mov    edi, 0x2f13a8:       89 c8                   mov    eax, ecx13aa:       99                      cdq13ab:       f7 ff                   idiv   edi13ad:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]13b2:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al13b5:       83 c1 01                add    ecx, 0x113b8:       83 f9 13                cmp    ecx, 0x1313bb:       75 eb                   jne    0x13a813bd:       cd 5f                   int    0x5f13bf:       be 2b 00 00 00          mov    esi, 0x2b13c4:       e9 24 f0 ff ff          jmp    0x3ed13c9:       8d 74 24 1a             lea    esi, [esp+0x1a]13cd:       b9 06 00 00 00          mov    ecx, 0x613d2:       bf 2f 00 00 00          mov    edi, 0x2f13d7:       89 c8                   mov    eax, ecx13d9:       99                      cdq13da:       f7 ff                   idiv   edi13dc:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]13e1:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al13e4:       83 c1 01                add    ecx, 0x113e7:       83 f9 0d                cmp    ecx, 0xd13ea:       75 eb                   jne    0x13d713ec:       cd 32                   int    0x3213ee:       be 06 00 00 00          mov    esi, 0x613f3:       e9 f5 ef ff ff          jmp    0x3ed13f8:       8d 4c 24 f8             lea    ecx, [esp-0x8]13fc:       be 28 00 00 00          mov    esi, 0x281401:       bf 2f 00 00 00          mov    edi, 0x2f1406:       89 f0                   mov    eax, esi1408:       99                      cdq1409:       f7 ff                   idiv   edi140b:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1410:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1413:       83 c6 01                add    esi, 0x11416:       83 fe 51                cmp    esi, 0x511419:       75 eb                   jne    0x1406141b:       cd 61                   int    0x61141d:       be 27 00 00 00          mov    esi, 0x271422:       e9 c6 ef ff ff          jmp    0x3ed1427:       b9 20 00 00 00          mov    ecx, 0x20142c:       89 e6                   mov    esi, esp142e:       bf 2f 00 00 00          mov    edi, 0x2f1433:       89 c8                   mov    eax, ecx1435:       99                      cdq1436:       f7 ff                   idiv   edi1438:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]143d:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al1440:       83 c1 01                add    ecx, 0x11443:       83 f9 41                cmp    ecx, 0x411446:       75 eb                   jne    0x14331448:       cd 10                   int    0x10144a:       be 5d 00 00 00          mov    esi, 0x5d144f:       e9 99 ef ff ff          jmp    0x3ed1454:       8d 74 24 f5             lea    esi, [esp-0xb]1458:       b9 2b 00 00 00          mov    ecx, 0x2b145d:       bf 2f 00 00 00          mov    edi, 0x2f1462:       89 c8                   mov    eax, ecx1464:       99                      cdq1465:       f7 ff                   idiv   edi1467:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]146c:       30 04 0e                xor    BYTE PTR [esi+ecx*1], al146f:       83 c1 01                add    ecx, 0x11472:       83 f9 57                cmp    ecx, 0x571475:       75 eb                   jne    0x14621477:       cd 38                   int    0x381479:       be 31 00 00 00          mov    esi, 0x31147e:       e9 6a ef ff ff          jmp    0x3ed1483:       8d 4c 24 08             lea    ecx, [esp+0x8]1487:       be 18 00 00 00          mov    esi, 0x18148c:       bf 2f 00 00 00          mov    edi, 0x2f1491:       89 f0                   mov    eax, esi1493:       99                      cdq1494:       f7 ff                   idiv   edi1496:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]149b:       30 04 31                xor    BYTE PTR [ecx+esi*1], al149e:       83 c6 01                add    esi, 0x114a1:       83 fe 31                cmp    esi, 0x3114a4:       75 eb                   jne    0x149114a6:       cd 36                   int    0x3614a8:       be 23 00 00 00          mov    esi, 0x2314ad:       e9 3b ef ff ff          jmp    0x3ed14b2:       b9 17 00 00 00          mov    ecx, 0x1714b7:       be 2f 00 00 00          mov    esi, 0x2f14bc:       89 c8                   mov    eax, ecx14be:       99                      cdq14bf:       f7 fe                   idiv   esi14c1:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]14c6:       30 44 0c 09             xor    BYTE PTR [esp+ecx*1+0x9], al14ca:       83 c1 01                add    ecx, 0x114cd:       83 f9 2f                cmp    ecx, 0x2f14d0:       75 ea                   jne    0x14bc14d2:       cd 21                   int    0x2114d4:       be 4f 00 00 00          mov    esi, 0x4f14d9:       e9 0f ef ff ff          jmp    0x3ed14de:       8d 4c 24 08             lea    ecx, [esp+0x8]14e2:       be 18 00 00 00          mov    esi, 0x1814e7:       bf 2f 00 00 00          mov    edi, 0x2f14ec:       89 f0                   mov    eax, esi14ee:       99                      cdq14ef:       f7 ff                   idiv   edi14f1:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]14f6:       30 04 31                xor    BYTE PTR [ecx+esi*1], al14f9:       83 c6 01                add    esi, 0x114fc:       83 fe 31                cmp    esi, 0x3114ff:       75 eb                   jne    0x14ec1501:       cd 4a                   int    0x4a1503:       be 34 00 00 00          mov    esi, 0x341508:       e9 e0 ee ff ff          jmp    0x3ed150d:       8d 4c 24 1e             lea    ecx, [esp+0x1e]1511:       be 02 00 00 00          mov    esi, 0x21516:       bf 2f 00 00 00          mov    edi, 0x2f151b:       89 f0                   mov    eax, esi151d:       99                      cdq151e:       f7 ff                   idiv   edi1520:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1525:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1528:       83 c6 01                add    esi, 0x1152b:       83 fe 05                cmp    esi, 0x5152e:       75 eb                   jne    0x151b1530:       cd 2a                   int    0x2a1532:       be 19 00 00 00          mov    esi, 0x191537:       e9 b1 ee ff ff          jmp    0x3ed153c:       8d 4c 24 0f             lea    ecx, [esp+0xf]1540:       be 11 00 00 00          mov    esi, 0x111545:       bf 2f 00 00 00          mov    edi, 0x2f154a:       89 f0                   mov    eax, esi154c:       99                      cdq154d:       f7 ff                   idiv   edi154f:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1554:       30 04 31                xor    BYTE PTR [ecx+esi*1], al1557:       83 c6 01                add    esi, 0x1155a:       83 fe 23                cmp    esi, 0x23155d:       75 eb                   jne    0x154a155f:       cd 47                   int    0x471561:       be 08 00 00 00          mov    esi, 0x81566:       e9 82 ee ff ff          jmp    0x3ed156b:       b9 0f 00 00 00          mov    ecx, 0xf1570:       be 2f 00 00 00          mov    esi, 0x2f1575:       89 c8                   mov    eax, ecx1577:       99                      cdq1578:       f7 fe                   idiv   esi157a:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]157f:       30 44 0c 11             xor    BYTE PTR [esp+ecx*1+0x11], al1583:       83 c1 01                add    ecx, 0x11586:       83 f9 1f                cmp    ecx, 0x1f1589:       75 ea                   jne    0x1575158b:       cd 3e                   int    0x3e158d:       be 15 00 00 00          mov    esi, 0x151592:       e9 56 ee ff ff          jmp    0x3ed1597:       b9 19 00 00 00          mov    ecx, 0x19159c:       be 2f 00 00 00          mov    esi, 0x2f15a1:       89 c8                   mov    eax, ecx15a3:       99                      cdq15a4:       f7 fe                   idiv   esi15a6:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]15ab:       30 44 0c 07             xor    BYTE PTR [esp+ecx*1+0x7], al15af:       83 c1 01                add    ecx, 0x115b2:       83 f9 33                cmp    ecx, 0x3315b5:       75 ea                   jne    0x15a115b7:       cd 1d                   int    0x1d15b9:       be 03 00 00 00          mov    esi, 0x315be:       e9 2a ee ff ff          jmp    0x3ed15c3:       8d 4c 24 12             lea    ecx, [esp+0x12]15c7:       be 0e 00 00 00          mov    esi, 0xe15cc:       bf 2f 00 00 00          mov    edi, 0x2f15d1:       89 f0                   mov    eax, esi15d3:       99                      cdq15d4:       f7 ff                   idiv   edi15d6:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]15db:       30 04 31                xor    BYTE PTR [ecx+esi*1], al15de:       83 c6 01                add    esi, 0x115e1:       83 fe 1d                cmp    esi, 0x1d15e4:       75 eb                   jne    0x15d115e6:       cd 2e                   int    0x2e15e8:       be 61 00 00 00          mov    esi, 0x6115ed:       e9 fb ed ff ff          jmp    0x3ed15f2:       8d 4c 24 1e             lea    ecx, [esp+0x1e]15f6:       be 02 00 00 00          mov    esi, 0x215fb:       bf 2f 00 00 00          mov    edi, 0x2f1600:       89 f0                   mov    eax, esi1602:       99                      cdq1603:       f7 ff                   idiv   edi1605:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]160a:       30 04 31                xor    BYTE PTR [ecx+esi*1], al160d:       83 c6 01                add    esi, 0x11610:       83 fe 05                cmp    esi, 0x51613:       75 eb                   jne    0x16001615:       cd 11                   int    0x111617:       be 1c 00 00 00          mov    esi, 0x1c161c:       e9 cc ed ff ff          jmp    0x3ed1621:       8d 4c 24 0b             lea    ecx, [esp+0xb]1625:       be 15 00 00 00          mov    esi, 0x15162a:       bf 2f 00 00 00          mov    edi, 0x2f162f:       89 f0                   mov    eax, esi1631:       99                      cdq1632:       f7 ff                   idiv   edi1634:       0f b6 44 14 20          movzx  eax, BYTE PTR [esp+edx*1+0x20]1639:       30 04 31                xor    BYTE PTR [ecx+esi*1], al163c:       83 c6 01                add    esi, 0x1163f:       83 fe 2b                cmp    esi, 0x2b1642:       75 eb                   jne    0x162f1644:       cd 3f                   int    0x3f1646:       be 22 00 00 00          mov    esi, 0x22164b:       e9                      .byte 0xe9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>主要可以知道的是shellcode 會根據ESI的狀態跳到對應的地方並且進行區間跟自己的xor</p><p>因此我們需要先抓所有eip所變化的所有狀態</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hook_exception</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> exception_type<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ck<span class="token punctuation">,</span>cmp_collet    <span class="token keyword">if</span> ck <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> exception_type <span class="token operator">==</span> <span class="token number">0x2d</span><span class="token punctuation">:</span>        <span class="token comment">#uc.emu_stop()</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> exception_type <span class="token operator">==</span> <span class="token number">0x2d</span><span class="token punctuation">:</span>        ck <span class="token operator">=</span> <span class="token number">1</span>    EIP <span class="token operator">=</span> ADDRESS_CODE    ESI <span class="token operator">=</span> exception_type    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[STATE] ESI ← 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>exception_type<span class="token punctuation">:</span><span class="token format-spec">02X</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    cmp_collet<span class="token operator">=</span><span class="token boolean">False</span>    uc<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_EIP<span class="token punctuation">,</span> EIP<span class="token punctuation">)</span>    uc<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_ESI<span class="token punctuation">,</span> ESI<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先把ESI的每個狀態輸出出來</p><p>??? note “Unicorn esi”<br>    <pre class="line-numbers language-none"><code class="language-none">[STATE] ESI ← 0x61[STATE] ESI ← 0x10[STATE] ESI ← 0x37[STATE] ESI ← 0x1F[STATE] ESI ← 0x31[STATE] ESI ← 0x13[STATE] ESI ← 0x56[STATE] ESI ← 0x54[STATE] ESI ← 0x2D[STATE] ESI ← 0x36[STATE] ESI ← 0x12[STATE] ESI ← 0x40[STATE] ESI ← 0x0E[STATE] ESI ← 0x39[STATE] ESI ← 0x0F[STATE] ESI ← 0x03[STATE] ESI ← 0x27[STATE] ESI ← 0x18[STATE] ESI ← 0x58[STATE] ESI ← 0x3B[STATE] ESI ← 0x55[STATE] ESI ← 0x48[STATE] ESI ← 0x0A[STATE] ESI ← 0x1C[STATE] ESI ← 0x1B[STATE] ESI ← 0x2F[STATE] ESI ← 0x5C[STATE] ESI ← 0x20[STATE] ESI ← 0x2B[STATE] ESI ← 0x50[STATE] ESI ← 0x44[STATE] ESI ← 0x2E[STATE] ESI ← 0x1D[STATE] ESI ← 0x5E[STATE] ESI ← 0x21[STATE] ESI ← 0x47[STATE] ESI ← 0x17[STATE] ESI ← 0x01[STATE] ESI ← 0x52[STATE] ESI ← 0x3F[STATE] ESI ← 0x16[STATE] ESI ← 0x4C[STATE] ESI ← 0x0D[STATE] ESI ← 0x23[STATE] ESI ← 0x34[STATE] ESI ← 0x49[STATE] ESI ← 0x43[STATE] ESI ← 0x28[STATE] ESI ← 0x30[STATE] ESI ← 0x33[STATE] ESI ← 0x4A[STATE] ESI ← 0x0B[STATE] ESI ← 0x4B[STATE] ESI ← 0x32[STATE] ESI ← 0x24[STATE] ESI ← 0x51[STATE] ESI ← 0x4D[STATE] ESI ← 0x64[STATE] ESI ← 0x5A[STATE] ESI ← 0x3A[STATE] ESI ← 0x04[STATE] ESI ← 0x26[STATE] ESI ← 0x35[STATE] ESI ← 0x46[STATE] ESI ← 0x60[STATE] ESI ← 0x11[STATE] ESI ← 0x07[STATE] ESI ← 0x3E[STATE] ESI ← 0x45[STATE] ESI ← 0x2A[STATE] ESI ← 0x19[STATE] ESI ← 0x4E[STATE] ESI ← 0x22[STATE] ESI ← 0x5F[STATE] ESI ← 0x25[STATE] ESI ← 0x41[STATE] ESI ← 0x53[STATE] ESI ← 0x2C[STATE] ESI ← 0x09[STATE] ESI ← 0x3C[STATE] ESI ← 0x1E[STATE] ESI ← 0x14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>接下來要取得xor會從哪裡到哪裡，在shellcode中是使用mov esi XXX 以及cmp ecx YYY ，代表XXX 到YYY 進行xor</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hook_mov_esi</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读出当前指令的机器码</span>    <span class="token keyword">global</span> cmp_collet    mc <span class="token operator">=</span> uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token comment"># 机器码前 1 字节是 0xBE (mov esi, imm32)，后面 4 字节是 little-endian 的 imm32</span>    <span class="token keyword">if</span> mc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xBE</span><span class="token punctuation">:</span>        imm <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>mc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'little'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[HOOK MOV] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">&#125;</span></span><span class="token string">: mov esi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        cmp_collet <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> mc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xB9</span><span class="token punctuation">:</span>        imm <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>mc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'little'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[HOOK MOV] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">&#125;</span></span><span class="token string">: mov esi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        cmp_collet <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> mc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xBF</span><span class="token punctuation">:</span>        imm <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>mc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'little'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[HOOK MOV] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">&#125;</span></span><span class="token string">: mov esi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            cmp_collet <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">def</span> <span class="token function">hook_cmp_esi</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> cmp_collet    mc <span class="token operator">=</span> uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cmp_collet <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment"># cmp esi, imm8 的编码是 0x83 0xFE imm8</span>    <span class="token keyword">if</span> mc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x83</span> <span class="token keyword">and</span> mc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xFE</span><span class="token punctuation">:</span>        imm8 <span class="token operator">=</span> mc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[HOOK CMP] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">&#125;</span></span><span class="token string">: cmp esi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>imm8<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        cmp_collet <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> mc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x83</span> <span class="token keyword">and</span> mc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xf9</span><span class="token punctuation">:</span>        imm8 <span class="token operator">=</span> mc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[HOOK CMP] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span><span class="token format-spec">08x</span><span class="token punctuation">&#125;</span></span><span class="token string">: cmp esi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>imm8<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        cmp_collet <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token number">0</span>      mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> hook_mov_esi<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UC_X86_INS_CPUID<span class="token punctuation">)</span>mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> hook_cmp_esi<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">0x1000380</span><span class="token punctuation">,</span> ADDRESS_CODE <span class="token operator">+</span> CODE_SIZE<span class="token punctuation">,</span> UC_X86_INS_CPUID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>??? note “Unicorn cmp mov”<br>    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010013fc</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001416</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x61</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001427</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001443</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x10</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000a7f</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000a99</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x37</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000eae</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000ec8</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x1F</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010007c4</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010007de</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x31</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000589</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100058e</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xae4c415d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010005b6</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x13</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010009f2</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000a0c</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x56</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010008a9</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010008c3</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x54</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010010b0</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010010ca</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010010d1</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000654</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100066e</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2D</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001487</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010014a1</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x36</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010004a6</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010004ab</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xae4c415d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010004d4</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x12</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001286</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010012a0</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x40</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001052</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100106c</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x0E</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000d5b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000d75</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x39</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000f3b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000f55</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x0F</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010005cb</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010005e5</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x03</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010011f9</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001213</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x27</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000db9</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000dd3</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010007af</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x58</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010010df</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010010f9</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x3B</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100136f</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001389</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x55</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100076b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000785</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x48</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000936</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000950</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x0A</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100081b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000820</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000836</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x1C</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001257</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001271</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x1B</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010008d8</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010008f2</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2F</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000ca7</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000cc1</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x5C</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001228</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001242</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x20</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010003b0</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010003b5</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xae4c415d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010003e1</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2B</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010006e1</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010006fb</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x50</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010005f9</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000613</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x44</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010015c7</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010015e1</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2E</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001597</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100159c</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010015b2</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x1D</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000a21</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000a3b</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x5E</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010014b2</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010014b7</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010014cd</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x21</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001540</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100155a</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x47</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000cd6</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000cf0</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x17</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100073c</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000756</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x01</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000994</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010009ae</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x52</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001625</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100163f</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x3F</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100110e</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001128</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x16</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000683</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100069d</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x4C</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010012e0</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010012fc</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x0D</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000429</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100042e</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xae4c415d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000456</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x23</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000edd</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000ef7</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x34</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100070c</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000711</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000727</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x49</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000907</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000921</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x43</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000f66</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000f6b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000f81</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x28</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000b64</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000b7e</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x30</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000c78</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000c92</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x33</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010014e2</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010014fc</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x4A</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000624</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000629</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100063f</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x0B</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010009c3</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010009dd</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x4B</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010013cd</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010013e7</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x32</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000fc5</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000fdf</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x24</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000384</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100039e</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x51</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000de8</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000e02</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x4D</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100116c</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001186</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x64</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000a50</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000a6a</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x5A</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010004e9</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000503</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x3A</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000965</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100097f</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x04</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000c48</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000c4d</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000c63</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x26</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100087a</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000894</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x35</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000b35</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000b4f</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x46</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000f96</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000fb0</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x60</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010015f6</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001610</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x11</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000d46</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x07</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100156b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001570</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01001586</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x3E</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000bed</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000bf2</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000c08</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x45</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001511</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100152b</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2A</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000e7f</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000e99</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x19</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010012b5</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010012cf</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x4E</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100119b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010011b5</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x22</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100139e</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x010013b8</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x5F</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000aaa</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000aaf</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000ac5</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x25</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001311</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100132b</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x41</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000b05</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000b0a</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000b20</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x53</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000f0c</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000f26</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x2C</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000c1d</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000c37</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x09</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010007ef</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x010007f4</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100080a</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x3C</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01001340</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100135a</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x1E</span><span class="token punctuation">[</span>STATE<span class="token punctuation">]</span> ESI ← <span class="token number">0x14</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x0100084b</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x01000865</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000654</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">[</span>HOOK CMP<span class="token punctuation">]</span> @<span class="token number">0x0100066e</span><span class="token punctuation">:</span> <span class="token builtin">cmp</span> esi<span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">[</span>HOOK MOV<span class="token punctuation">]</span> @<span class="token number">0x01000675</span><span class="token punctuation">:</span> mov esi<span class="token punctuation">,</span> <span class="token number">0x11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>再來要知道他是怎麼進行XOR加密的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hook_xor_insn</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    mc <span class="token operator">=</span> uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token keyword">if</span> mc<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'\x30\x04'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        eip <span class="token operator">=</span> address        ecx <span class="token operator">=</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_ECX<span class="token punctuation">)</span>        esi <span class="token operator">=</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_ESI<span class="token punctuation">)</span>        dest <span class="token operator">=</span> ecx <span class="token operator">+</span> esi        old <span class="token operator">=</span> uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        al <span class="token operator">=</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_EAX<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>        result <span class="token operator">=</span> old <span class="token operator">^</span> al        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[XOR @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>eip<span class="token punctuation">:</span><span class="token format-spec">x</span><span class="token punctuation">&#125;</span></span><span class="token string">] MEM[0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dest<span class="token punctuation">:</span><span class="token format-spec">x</span><span class="token punctuation">&#125;</span></span><span class="token string">] 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>old<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string"> ^ AL(0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>al<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">) → 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        after <span class="token operator">=</span> uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>dest<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f" 寫入後 MEM = 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>after<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hook_mem_write</span><span class="token punctuation">(</span>uc<span class="token punctuation">,</span> access<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> value<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[WRITE] @0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>addr<span class="token punctuation">:</span><span class="token format-spec">x</span><span class="token punctuation">&#125;</span></span><span class="token string"> ← 0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> hook_xor_insn<span class="token punctuation">,</span><span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>UC_X86_INS_CPUID<span class="token punctuation">)</span>mu<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_MEM_WRITE<span class="token punctuation">,</span> hook_mem_write<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>??? note “Unicorn XOE dump”<br>    <pre class="line-numbers language-none"><code class="language-none">Unicorn CHAL By:ShallowFeatherEnter the flag: --- Starting emulation ---[HOOK MOV] @0x010013fc: mov esi, 0x28[XOR @0x1001410] MEM[0x2003f20] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01001416: cmp esi, 0x51[XOR @0x1001410] MEM[0x2003f21] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x32[XOR @0x1001410] MEM[0x2003f22] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x33[XOR @0x1001410] MEM[0x2003f23] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x31[XOR @0x1001410] MEM[0x2003f24] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x32[XOR @0x1001410] MEM[0x2003f25] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x33[XOR @0x1001410] MEM[0x2003f26] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x31[XOR @0x1001410] MEM[0x2003f27] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f27 ← 0x03[XOR @0x1001410] MEM[0x2003f28] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x01[XOR @0x1001410] MEM[0x2003f29] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x02[XOR @0x1001410] MEM[0x2003f2a] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x03[XOR @0x1001410] MEM[0x2003f2b] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2b ← 0x01[XOR @0x1001410] MEM[0x2003f2c] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2c ← 0x02[XOR @0x1001410] MEM[0x2003f2d] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2d ← 0x03[XOR @0x1001410] MEM[0x2003f2e] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x30[XOR @0x1001410] MEM[0x2003f2f] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x30[XOR @0x1001410] MEM[0x2003f30] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x30[XOR @0x1001410] MEM[0x2003f31] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x30[XOR @0x1001410] MEM[0x2003f32] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x30[XOR @0x1001410] MEM[0x2003f33] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x30[XOR @0x1001410] MEM[0x2003f34] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x30[XOR @0x1001410] MEM[0x2003f35] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f35 ← 0x30[XOR @0x1001410] MEM[0x2003f36] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x30[XOR @0x1001410] MEM[0x2003f37] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x30[XOR @0x1001410] MEM[0x2003f38] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f38 ← 0x30[XOR @0x1001410] MEM[0x2003f39] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f39 ← 0x30[XOR @0x1001410] MEM[0x2003f3a] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3a ← 0x30[XOR @0x1001410] MEM[0x2003f3b] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3b ← 0x30[XOR @0x1001410] MEM[0x2003f3c] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x30[XOR @0x1001410] MEM[0x2003f3d] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3d ← 0x30[XOR @0x1001410] MEM[0x2003f3e] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x30[XOR @0x1001410] MEM[0x2003f3f] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3f ← 0x30[XOR @0x1001410] MEM[0x2003f40] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f40 ← 0x30[XOR @0x1001410] MEM[0x2003f41] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f41 ← 0x30[XOR @0x1001410] MEM[0x2003f42] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f42 ← 0x30[XOR @0x1001410] MEM[0x2003f43] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f43 ← 0x30[XOR @0x1001410] MEM[0x2003f44] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f44 ← 0x30[XOR @0x1001410] MEM[0x2003f45] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f45 ← 0x30[XOR @0x1001410] MEM[0x2003f46] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f46 ← 0x30[XOR @0x1001410] MEM[0x2003f47] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f47 ← 0x30[XOR @0x1001410] MEM[0x2003f48] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f48 ← 0x30[STATE] ESI ← 0x61[HOOK MOV] @0x01001427: mov esi, 0x20[XOR @0x100143d] MEM[0x2003f20] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x01001443: cmp esi, 0x41[XOR @0x100143d] MEM[0x2003f21] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x02[XOR @0x100143d] MEM[0x2003f22] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x03[XOR @0x100143d] MEM[0x2003f23] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x01[XOR @0x100143d] MEM[0x2003f24] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x02[XOR @0x100143d] MEM[0x2003f25] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x03[XOR @0x100143d] MEM[0x2003f26] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x01[XOR @0x100143d] MEM[0x2003f27] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x33[XOR @0x100143d] MEM[0x2003f28] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x31[XOR @0x100143d] MEM[0x2003f29] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x02[XOR @0x100143d] MEM[0x2003f2a] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x03[XOR @0x100143d] MEM[0x2003f2b] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x01[XOR @0x100143d] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x100143d] MEM[0x2003f2d] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x03[XOR @0x100143d] MEM[0x2003f2e] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x30[XOR @0x100143d] MEM[0x2003f2f] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x31[XOR @0x100143d] MEM[0x2003f30] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x32[XOR @0x100143d] MEM[0x2003f31] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f31 ← 0x33[XOR @0x100143d] MEM[0x2003f32] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f32 ← 0x31[XOR @0x100143d] MEM[0x2003f33] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x32[XOR @0x100143d] MEM[0x2003f34] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f34 ← 0x33[XOR @0x100143d] MEM[0x2003f35] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x31[XOR @0x100143d] MEM[0x2003f36] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f36 ← 0x03[XOR @0x100143d] MEM[0x2003f37] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f37 ← 0x01[XOR @0x100143d] MEM[0x2003f38] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f38 ← 0x32[XOR @0x100143d] MEM[0x2003f39] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f39 ← 0x33[XOR @0x100143d] MEM[0x2003f3a] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3a ← 0x31[XOR @0x100143d] MEM[0x2003f3b] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3b ← 0x32[XOR @0x100143d] MEM[0x2003f3c] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3c ← 0x33[XOR @0x100143d] MEM[0x2003f3d] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3d ← 0x00[XOR @0x100143d] MEM[0x2003f3e] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3e ← 0x01[XOR @0x100143d] MEM[0x2003f3f] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3f ← 0x02[XOR @0x100143d] MEM[0x2003f40] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f40 ← 0x03[STATE] ESI ← 0x10[HOOK MOV] @0x01000a7f: mov esi, 0x18[XOR @0x1000a93] MEM[0x2003f20] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x01000a99: cmp esi, 0x31[XOR @0x1000a93] MEM[0x2003f21] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x31[XOR @0x1000a93] MEM[0x2003f22] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f22 ← 0x32[XOR @0x1000a93] MEM[0x2003f23] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x33[XOR @0x1000a93] MEM[0x2003f24] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x31[XOR @0x1000a93] MEM[0x2003f25] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x03[XOR @0x1000a93] MEM[0x2003f26] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x00[XOR @0x1000a93] MEM[0x2003f27] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x31[XOR @0x1000a93] MEM[0x2003f28] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x32[XOR @0x1000a93] MEM[0x2003f29] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x32[XOR @0x1000a93] MEM[0x2003f2a] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x33[XOR @0x1000a93] MEM[0x2003f2b] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x31[XOR @0x1000a93] MEM[0x2003f2c] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x32[XOR @0x1000a93] MEM[0x2003f2d] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x33[XOR @0x1000a93] MEM[0x2003f2e] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x00[XOR @0x1000a93] MEM[0x2003f2f] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x01[XOR @0x1000a93] MEM[0x2003f30] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x02[XOR @0x1000a93] MEM[0x2003f31] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x33[XOR @0x1000a93] MEM[0x2003f32] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x31[XOR @0x1000a93] MEM[0x2003f33] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x32[XOR @0x1000a93] MEM[0x2003f34] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x33[XOR @0x1000a93] MEM[0x2003f35] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x31[XOR @0x1000a93] MEM[0x2003f36] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x03[XOR @0x1000a93] MEM[0x2003f37] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f37 ← 0x32[XOR @0x1000a93] MEM[0x2003f38] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f38 ← 0x03[STATE] ESI ← 0x37[HOOK MOV] @0x01000eae: mov esi, 0x24[XOR @0x1000ec2] MEM[0x2003f20] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01000ec8: cmp esi, 0x49[XOR @0x1000ec2] MEM[0x2003f21] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x01[XOR @0x1000ec2] MEM[0x2003f22] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x02[XOR @0x1000ec2] MEM[0x2003f23] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f23 ← 0x03[XOR @0x1000ec2] MEM[0x2003f24] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x01[XOR @0x1000ec2] MEM[0x2003f25] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x03[XOR @0x1000ec2] MEM[0x2003f26] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x00[XOR @0x1000ec2] MEM[0x2003f27] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x31[XOR @0x1000ec2] MEM[0x2003f28] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x32[XOR @0x1000ec2] MEM[0x2003f29] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x32[XOR @0x1000ec2] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x1000ec2] MEM[0x2003f2b] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x32[XOR @0x1000ec2] MEM[0x2003f2c] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x33[XOR @0x1000ec2] MEM[0x2003f2d] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x31[XOR @0x1000ec2] MEM[0x2003f2e] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x03[XOR @0x1000ec2] MEM[0x2003f2f] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x00[XOR @0x1000ec2] MEM[0x2003f30] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f30 ← 0x01[XOR @0x1000ec2] MEM[0x2003f31] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x33[XOR @0x1000ec2] MEM[0x2003f32] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x00[XOR @0x1000ec2] MEM[0x2003f33] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x00[XOR @0x1000ec2] MEM[0x2003f34] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x01[XOR @0x1000ec2] MEM[0x2003f35] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x02[XOR @0x1000ec2] MEM[0x2003f36] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x31[XOR @0x1000ec2] MEM[0x2003f37] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x01[XOR @0x1000ec2] MEM[0x2003f38] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f38 ← 0x32[XOR @0x1000ec2] MEM[0x2003f39] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f39 ← 0x30[XOR @0x1000ec2] MEM[0x2003f3a] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3a ← 0x31[XOR @0x1000ec2] MEM[0x2003f3b] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3b ← 0x33[XOR @0x1000ec2] MEM[0x2003f3c] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3c ← 0x00[XOR @0x1000ec2] MEM[0x2003f3d] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3d ← 0x00[XOR @0x1000ec2] MEM[0x2003f3e] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3e ← 0x01[XOR @0x1000ec2] MEM[0x2003f3f] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3f ← 0x03[XOR @0x1000ec2] MEM[0x2003f40] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f40 ← 0x01[XOR @0x1000ec2] MEM[0x2003f41] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f41 ← 0x01[XOR @0x1000ec2] MEM[0x2003f42] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f42 ← 0x31[XOR @0x1000ec2] MEM[0x2003f43] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f43 ← 0x02[XOR @0x1000ec2] MEM[0x2003f44] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f44 ← 0x00[STATE] ESI ← 0x1F[HOOK MOV] @0x010007c4: mov esi, 0x1d[XOR @0x10007d8] MEM[0x2003f20] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x010007de: cmp esi, 0x3b[XOR @0x10007d8] MEM[0x2003f21] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x00[XOR @0x10007d8] MEM[0x2003f22] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x01[XOR @0x10007d8] MEM[0x2003f23] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f23 ← 0x02[XOR @0x10007d8] MEM[0x2003f24] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x00[XOR @0x10007d8] MEM[0x2003f25] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x32[XOR @0x10007d8] MEM[0x2003f26] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x02[XOR @0x10007d8] MEM[0x2003f27] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x31[XOR @0x10007d8] MEM[0x2003f28] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x02[XOR @0x10007d8] MEM[0x2003f29] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x02[XOR @0x10007d8] MEM[0x2003f2a] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x03[XOR @0x10007d8] MEM[0x2003f2b] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x02[XOR @0x10007d8] MEM[0x2003f2c] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x33[XOR @0x10007d8] MEM[0x2003f2d] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x31[XOR @0x10007d8] MEM[0x2003f2e] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x03[XOR @0x10007d8] MEM[0x2003f2f] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x00[XOR @0x10007d8] MEM[0x2003f30] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x01[XOR @0x10007d8] MEM[0x2003f31] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x33[XOR @0x10007d8] MEM[0x2003f32] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x03[XOR @0x10007d8] MEM[0x2003f33] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x00[XOR @0x10007d8] MEM[0x2003f34] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x00[XOR @0x10007d8] MEM[0x2003f35] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f35 ← 0x00[XOR @0x10007d8] MEM[0x2003f36] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f36 ← 0x31[XOR @0x10007d8] MEM[0x2003f37] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f37 ← 0x33[XOR @0x10007d8] MEM[0x2003f38] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f38 ← 0x30[XOR @0x10007d8] MEM[0x2003f39] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f39 ← 0x01[XOR @0x10007d8] MEM[0x2003f3a] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3a ← 0x33[XOR @0x10007d8] MEM[0x2003f3b] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3b ← 0x31[XOR @0x10007d8] MEM[0x2003f3c] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x03[XOR @0x10007d8] MEM[0x2003f3d] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3d ← 0x02[STATE] ESI ← 0x31[HOOK MOV] @0x01000589: mov esi, 0x12[HOOK MOV] @0x0100058e: mov esi, 0xae4c415d[XOR @0x10005b0] MEM[0x2003f20] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x010005b6: cmp esi, 0x25[XOR @0x10005b0] MEM[0x2003f21] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x00[XOR @0x10005b0] MEM[0x2003f22] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x01[XOR @0x10005b0] MEM[0x2003f23] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x02[XOR @0x10005b0] MEM[0x2003f24] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x31[XOR @0x10005b0] MEM[0x2003f25] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x01[XOR @0x10005b0] MEM[0x2003f26] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f26 ← 0x32[XOR @0x10005b0] MEM[0x2003f27] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x30[XOR @0x10005b0] MEM[0x2003f28] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x31[XOR @0x10005b0] MEM[0x2003f29] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x33[XOR @0x10005b0] MEM[0x2003f2a] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x00[XOR @0x10005b0] MEM[0x2003f2b] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x00[XOR @0x10005b0] MEM[0x2003f2c] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x32[XOR @0x10005b0] MEM[0x2003f2d] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x32[XOR @0x10005b0] MEM[0x2003f2e] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x02[XOR @0x10005b0] MEM[0x2003f2f] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x01[XOR @0x10005b0] MEM[0x2003f30] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x30[XOR @0x10005b0] MEM[0x2003f31] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x31[XOR @0x10005b0] MEM[0x2003f32] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f32 ← 0x03[STATE] ESI ← 0x13[HOOK MOV] @0x010009f2: mov esi, 0xd[XOR @0x1000a06] MEM[0x2003f20] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x01000a0c: cmp esi, 0x1b[XOR @0x1000a06] MEM[0x2003f21] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x02[XOR @0x1000a06] MEM[0x2003f22] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x00[XOR @0x1000a06] MEM[0x2003f23] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x32[XOR @0x1000a06] MEM[0x2003f24] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x00[XOR @0x1000a06] MEM[0x2003f25] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x02[XOR @0x1000a06] MEM[0x2003f26] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x32[XOR @0x1000a06] MEM[0x2003f27] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x30[XOR @0x1000a06] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x1000a06] MEM[0x2003f29] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x02[XOR @0x1000a06] MEM[0x2003f2a] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x33[XOR @0x1000a06] MEM[0x2003f2b] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x30[XOR @0x1000a06] MEM[0x2003f2c] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x33[XOR @0x1000a06] MEM[0x2003f2d] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2d ← 0x01[STATE] ESI ← 0x56[HOOK MOV] @0x010008a9: mov esi, 0x24[XOR @0x10008bd] MEM[0x2003f20] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x010008c3: cmp esi, 0x49[XOR @0x10008bd] MEM[0x2003f21] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x32[XOR @0x10008bd] MEM[0x2003f22] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x30[XOR @0x10008bd] MEM[0x2003f23] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x02[XOR @0x10008bd] MEM[0x2003f24] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x30[XOR @0x10008bd] MEM[0x2003f25] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x02[XOR @0x10008bd] MEM[0x2003f26] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x32[XOR @0x10008bd] MEM[0x2003f27] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x30[XOR @0x10008bd] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x10008bd] MEM[0x2003f29] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x02[XOR @0x10008bd] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x10008bd] MEM[0x2003f2b] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2b ← 0x02[XOR @0x10008bd] MEM[0x2003f2c] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x01[XOR @0x10008bd] MEM[0x2003f2d] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x31[XOR @0x10008bd] MEM[0x2003f2e] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2e ← 0x00[XOR @0x10008bd] MEM[0x2003f2f] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x31[XOR @0x10008bd] MEM[0x2003f30] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x32[XOR @0x10008bd] MEM[0x2003f31] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x03[XOR @0x10008bd] MEM[0x2003f32] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f32 ← 0x33[XOR @0x10008bd] MEM[0x2003f33] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x31[XOR @0x10008bd] MEM[0x2003f34] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f34 ← 0x02[XOR @0x10008bd] MEM[0x2003f35] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f35 ← 0x33[XOR @0x10008bd] MEM[0x2003f36] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f36 ← 0x33[XOR @0x10008bd] MEM[0x2003f37] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f37 ← 0x32[XOR @0x10008bd] MEM[0x2003f38] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f38 ← 0x01[XOR @0x10008bd] MEM[0x2003f39] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x01[XOR @0x10008bd] MEM[0x2003f3a] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3a ← 0x02[XOR @0x10008bd] MEM[0x2003f3b] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3b ← 0x03[XOR @0x10008bd] MEM[0x2003f3c] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3c ← 0x00[XOR @0x10008bd] MEM[0x2003f3d] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3d ← 0x31[XOR @0x10008bd] MEM[0x2003f3e] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3e ← 0x30[XOR @0x10008bd] MEM[0x2003f3f] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3f ← 0x01[XOR @0x10008bd] MEM[0x2003f40] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f40 ← 0x32[XOR @0x10008bd] MEM[0x2003f41] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f41 ← 0x32[XOR @0x10008bd] MEM[0x2003f42] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f42 ← 0x03[XOR @0x10008bd] MEM[0x2003f43] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f43 ← 0x03[XOR @0x10008bd] MEM[0x2003f44] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f44 ← 0x01[STATE] ESI ← 0x54[HOOK MOV] @0x010010b0: mov esi, 0xb[XOR @0x10010c4] MEM[0x2003f20] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x010010ca: cmp esi, 0x17[XOR @0x10010c4] MEM[0x2003f21] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x33[XOR @0x10010c4] MEM[0x2003f22] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x01[XOR @0x10010c4] MEM[0x2003f23] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x02[XOR @0x10010c4] MEM[0x2003f24] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x01[XOR @0x10010c4] MEM[0x2003f25] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x30[XOR @0x10010c4] MEM[0x2003f26] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x31[XOR @0x10010c4] MEM[0x2003f27] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x03[XOR @0x10010c4] MEM[0x2003f28] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x00[XOR @0x10010c4] MEM[0x2003f29] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x00[XOR @0x10010c4] MEM[0x2003f2a] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x00[XOR @0x10010c4] MEM[0x2003f2b] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x31[HOOK MOV] @0x010010d1: mov esi, 0x2e[HOOK MOV] @0x01000654: mov esi, 0x1d[XOR @0x1000668] MEM[0x2003f20] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x0100066e: cmp esi, 0x3b[XOR @0x1000668] MEM[0x2003f21] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f21 ← 0x03[XOR @0x1000668] MEM[0x2003f22] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x00[XOR @0x1000668] MEM[0x2003f23] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x30[XOR @0x1000668] MEM[0x2003f24] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x33[XOR @0x1000668] MEM[0x2003f25] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x33[XOR @0x1000668] MEM[0x2003f26] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x32[XOR @0x1000668] MEM[0x2003f27] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x02[XOR @0x1000668] MEM[0x2003f28] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x30[XOR @0x1000668] MEM[0x2003f29] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f29 ← 0x30[XOR @0x1000668] MEM[0x2003f2a] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x30[XOR @0x1000668] MEM[0x2003f2b] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x01[XOR @0x1000668] MEM[0x2003f2c] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2c ← 0x01[XOR @0x1000668] MEM[0x2003f2d] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x31[XOR @0x1000668] MEM[0x2003f2e] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x00[XOR @0x1000668] MEM[0x2003f2f] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x31[XOR @0x1000668] MEM[0x2003f30] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x32[XOR @0x1000668] MEM[0x2003f31] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f31 ← 0x03[XOR @0x1000668] MEM[0x2003f32] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f32 ← 0x32[XOR @0x1000668] MEM[0x2003f33] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f33 ← 0x32[XOR @0x1000668] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x1000668] MEM[0x2003f35] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x03[XOR @0x1000668] MEM[0x2003f36] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f36 ← 0x00[XOR @0x1000668] MEM[0x2003f37] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x01[XOR @0x1000668] MEM[0x2003f38] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f38 ← 0x33[XOR @0x1000668] MEM[0x2003f39] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x03[XOR @0x1000668] MEM[0x2003f3a] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3a ← 0x32[XOR @0x1000668] MEM[0x2003f3b] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3b ← 0x33[XOR @0x1000668] MEM[0x2003f3c] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x30[XOR @0x1000668] MEM[0x2003f3d] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3d ← 0x30[STATE] ESI ← 0x2D[HOOK MOV] @0x01001487: mov esi, 0x18[XOR @0x100149b] MEM[0x2003f20] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x010014a1: cmp esi, 0x31[XOR @0x100149b] MEM[0x2003f21] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x00[XOR @0x100149b] MEM[0x2003f22] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x32[XOR @0x100149b] MEM[0x2003f23] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x03[XOR @0x100149b] MEM[0x2003f24] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x03[XOR @0x100149b] MEM[0x2003f25] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x03[XOR @0x100149b] MEM[0x2003f26] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x02[XOR @0x100149b] MEM[0x2003f27] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f27 ← 0x03[XOR @0x100149b] MEM[0x2003f28] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f28 ← 0x02[XOR @0x100149b] MEM[0x2003f29] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f29 ← 0x02[XOR @0x100149b] MEM[0x2003f2a] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2a ← 0x33[XOR @0x100149b] MEM[0x2003f2b] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x02[XOR @0x100149b] MEM[0x2003f2c] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2c ← 0x00[XOR @0x100149b] MEM[0x2003f2d] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x01[XOR @0x100149b] MEM[0x2003f2e] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x30[XOR @0x100149b] MEM[0x2003f2f] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x01[XOR @0x100149b] MEM[0x2003f30] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x02[XOR @0x100149b] MEM[0x2003f31] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f31 ← 0x03[XOR @0x100149b] MEM[0x2003f32] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x32[XOR @0x100149b] MEM[0x2003f33] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x32[XOR @0x100149b] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x100149b] MEM[0x2003f35] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f35 ← 0x03[XOR @0x100149b] MEM[0x2003f36] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x00[XOR @0x100149b] MEM[0x2003f37] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f37 ← 0x33[XOR @0x100149b] MEM[0x2003f38] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f38 ← 0x33[STATE] ESI ← 0x36[HOOK MOV] @0x010004a6: mov esi, 0x1f[HOOK MOV] @0x010004ab: mov esi, 0xae4c415d[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x010004d4: cmp esi, 0x3f[WRITE] @0x2003f21 ← 0x32[WRITE] @0x2003f22 ← 0x00[WRITE] @0x2003f23 ← 0x00[WRITE] @0x2003f24 ← 0x00[WRITE] @0x2003f25 ← 0x02[WRITE] @0x2003f26 ← 0x32[WRITE] @0x2003f27 ← 0x33[WRITE] @0x2003f28 ← 0x32[WRITE] @0x2003f29 ← 0x32[WRITE] @0x2003f2a ← 0x33[WRITE] @0x2003f2b ← 0x02[WRITE] @0x2003f2c ← 0x00[WRITE] @0x2003f2d ← 0x01[WRITE] @0x2003f2e ← 0x30[WRITE] @0x2003f2f ← 0x01[WRITE] @0x2003f30 ← 0x31[WRITE] @0x2003f31 ← 0x31[WRITE] @0x2003f32 ← 0x32[WRITE] @0x2003f33 ← 0x32[WRITE] @0x2003f34 ← 0x02[WRITE] @0x2003f35 ← 0x01[WRITE] @0x2003f36 ← 0x32[WRITE] @0x2003f37 ← 0x00[WRITE] @0x2003f38 ← 0x01[WRITE] @0x2003f39 ← 0x31[WRITE] @0x2003f3a ← 0x01[WRITE] @0x2003f3b ← 0x31[WRITE] @0x2003f3c ← 0x30[WRITE] @0x2003f3d ← 0x31[WRITE] @0x2003f3e ← 0x00[WRITE] @0x2003f3f ← 0x00[STATE] ESI ← 0x12[HOOK MOV] @0x01001286: mov esi, 0x15[XOR @0x100129a] MEM[0x2003f20] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x010012a0: cmp esi, 0x2b[XOR @0x100129a] MEM[0x2003f21] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x00[XOR @0x100129a] MEM[0x2003f22] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x00[XOR @0x100129a] MEM[0x2003f23] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x01[XOR @0x100129a] MEM[0x2003f24] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x31[XOR @0x100129a] MEM[0x2003f25] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x03[XOR @0x100129a] MEM[0x2003f26] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x03[XOR @0x100129a] MEM[0x2003f27] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x03[XOR @0x100129a] MEM[0x2003f28] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x03[XOR @0x100129a] MEM[0x2003f29] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x32[XOR @0x100129a] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x100129a] MEM[0x2003f2b] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x30[XOR @0x100129a] MEM[0x2003f2c] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2c ← 0x32[XOR @0x100129a] MEM[0x2003f2d] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x02[XOR @0x100129a] MEM[0x2003f2e] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x33[XOR @0x100129a] MEM[0x2003f2f] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x00[XOR @0x100129a] MEM[0x2003f30] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x01[XOR @0x100129a] MEM[0x2003f31] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x01[XOR @0x100129a] MEM[0x2003f32] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x02[XOR @0x100129a] MEM[0x2003f33] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x02[XOR @0x100129a] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x100129a] MEM[0x2003f35] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f35 ← 0x01[STATE] ESI ← 0x40[HOOK MOV] @0x01001052: mov esi, 0xe[XOR @0x1001066] MEM[0x2003f20] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x0100106c: cmp esi, 0x1d[XOR @0x1001066] MEM[0x2003f21] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x00[XOR @0x1001066] MEM[0x2003f22] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x01[XOR @0x1001066] MEM[0x2003f23] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x00[XOR @0x1001066] MEM[0x2003f24] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x33[XOR @0x1001066] MEM[0x2003f25] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x01[XOR @0x1001066] MEM[0x2003f26] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f26 ← 0x01[XOR @0x1001066] MEM[0x2003f27] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x02[XOR @0x1001066] MEM[0x2003f28] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x31[XOR @0x1001066] MEM[0x2003f29] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x32[XOR @0x1001066] MEM[0x2003f2a] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x32[XOR @0x1001066] MEM[0x2003f2b] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2b ← 0x01[XOR @0x1001066] MEM[0x2003f2c] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x33[XOR @0x1001066] MEM[0x2003f2d] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x33[XOR @0x1001066] MEM[0x2003f2e] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x03[STATE] ESI ← 0x0E[HOOK MOV] @0x01000d5b: mov esi, 0x2a[XOR @0x1000d6f] MEM[0x2003f20] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x01000d75: cmp esi, 0x55[XOR @0x1000d6f] MEM[0x2003f21] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x00[XOR @0x1000d6f] MEM[0x2003f22] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x01[XOR @0x1000d6f] MEM[0x2003f23] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x00[XOR @0x1000d6f] MEM[0x2003f24] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x33[XOR @0x1000d6f] MEM[0x2003f25] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x00[XOR @0x1000d6f] MEM[0x2003f26] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x01[XOR @0x1000d6f] MEM[0x2003f27] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f27 ← 0x03[XOR @0x1000d6f] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x1000d6f] MEM[0x2003f29] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x01[XOR @0x1000d6f] MEM[0x2003f2a] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x32[XOR @0x1000d6f] MEM[0x2003f2b] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x00[XOR @0x1000d6f] MEM[0x2003f2c] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x30[XOR @0x1000d6f] MEM[0x2003f2d] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x02[XOR @0x1000d6f] MEM[0x2003f2e] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x02[XOR @0x1000d6f] MEM[0x2003f2f] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x32[XOR @0x1000d6f] MEM[0x2003f30] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x01[XOR @0x1000d6f] MEM[0x2003f31] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x31[XOR @0x1000d6f] MEM[0x2003f32] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x00[XOR @0x1000d6f] MEM[0x2003f33] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f33 ← 0x00[XOR @0x1000d6f] MEM[0x2003f34] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x30[XOR @0x1000d6f] MEM[0x2003f35] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f35 ← 0x00[XOR @0x1000d6f] MEM[0x2003f36] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f36 ← 0x03[XOR @0x1000d6f] MEM[0x2003f37] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x00[XOR @0x1000d6f] MEM[0x2003f38] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f38 ← 0x01[XOR @0x1000d6f] MEM[0x2003f39] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f39 ← 0x01[XOR @0x1000d6f] MEM[0x2003f3a] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x01[XOR @0x1000d6f] MEM[0x2003f3b] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3b ← 0x32[XOR @0x1000d6f] MEM[0x2003f3c] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3c ← 0x30[XOR @0x1000d6f] MEM[0x2003f3d] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3d ← 0x30[XOR @0x1000d6f] MEM[0x2003f3e] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x01[XOR @0x1000d6f] MEM[0x2003f3f] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3f ← 0x01[XOR @0x1000d6f] MEM[0x2003f40] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f40 ← 0x00[XOR @0x1000d6f] MEM[0x2003f41] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f41 ← 0x02[XOR @0x1000d6f] MEM[0x2003f42] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f42 ← 0x33[XOR @0x1000d6f] MEM[0x2003f43] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f43 ← 0x02[XOR @0x1000d6f] MEM[0x2003f44] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f44 ← 0x00[XOR @0x1000d6f] MEM[0x2003f45] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f45 ← 0x30[XOR @0x1000d6f] MEM[0x2003f46] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f46 ← 0x32[XOR @0x1000d6f] MEM[0x2003f47] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f47 ← 0x03[XOR @0x1000d6f] MEM[0x2003f48] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f48 ← 0x32[XOR @0x1000d6f] MEM[0x2003f49] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f49 ← 0x00[XOR @0x1000d6f] MEM[0x2003f4a] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f4a ← 0x30[STATE] ESI ← 0x39[HOOK MOV] @0x01000f3b: mov esi, 0x14[XOR @0x1000f4f] MEM[0x2003f20] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01000f55: cmp esi, 0x29[XOR @0x1000f4f] MEM[0x2003f21] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x00[XOR @0x1000f4f] MEM[0x2003f22] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x02[XOR @0x1000f4f] MEM[0x2003f23] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x00[XOR @0x1000f4f] MEM[0x2003f24] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x32[XOR @0x1000f4f] MEM[0x2003f25] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x01[XOR @0x1000f4f] MEM[0x2003f26] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x00[XOR @0x1000f4f] MEM[0x2003f27] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x31[XOR @0x1000f4f] MEM[0x2003f28] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x01[XOR @0x1000f4f] MEM[0x2003f29] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x31[XOR @0x1000f4f] MEM[0x2003f2a] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x33[XOR @0x1000f4f] MEM[0x2003f2b] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x01[XOR @0x1000f4f] MEM[0x2003f2c] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x30[XOR @0x1000f4f] MEM[0x2003f2d] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x00[XOR @0x1000f4f] MEM[0x2003f2e] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2e ← 0x31[XOR @0x1000f4f] MEM[0x2003f2f] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2f ← 0x30[XOR @0x1000f4f] MEM[0x2003f30] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x01[XOR @0x1000f4f] MEM[0x2003f31] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x01[XOR @0x1000f4f] MEM[0x2003f32] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x32[XOR @0x1000f4f] MEM[0x2003f33] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x03[XOR @0x1000f4f] MEM[0x2003f34] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f34 ← 0x02[STATE] ESI ← 0x0F[HOOK MOV] @0x010005cb: mov esi, 0xb[XOR @0x10005df] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x010005e5: cmp esi, 0x17[XOR @0x10005df] MEM[0x2003f21] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x30[XOR @0x10005df] MEM[0x2003f22] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x02[XOR @0x10005df] MEM[0x2003f23] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x31[XOR @0x10005df] MEM[0x2003f24] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x02[XOR @0x10005df] MEM[0x2003f25] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x00[XOR @0x10005df] MEM[0x2003f26] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x01[XOR @0x10005df] MEM[0x2003f27] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x03[XOR @0x10005df] MEM[0x2003f28] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x02[XOR @0x10005df] MEM[0x2003f29] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x33[XOR @0x10005df] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x10005df] MEM[0x2003f2b] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x02[STATE] ESI ← 0x03[HOOK MOV] @0x010011f9: mov esi, 0x6[XOR @0x100120d] MEM[0x2003f20] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01001213: cmp esi, 0xd[XOR @0x100120d] MEM[0x2003f21] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x33[XOR @0x100120d] MEM[0x2003f22] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x00[XOR @0x100120d] MEM[0x2003f23] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x02[XOR @0x100120d] MEM[0x2003f24] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x31[XOR @0x100120d] MEM[0x2003f25] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x02[XOR @0x100120d] MEM[0x2003f26] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x31[STATE] ESI ← 0x27[HOOK MOV] @0x01000db9: mov esi, 0x1a[XOR @0x1000dcd] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000dd3: cmp esi, 0x35[XOR @0x1000dcd] MEM[0x2003f21] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f21 ← 0x01[XOR @0x1000dcd] MEM[0x2003f22] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x30[XOR @0x1000dcd] MEM[0x2003f23] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x32[XOR @0x1000dcd] MEM[0x2003f24] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x30[XOR @0x1000dcd] MEM[0x2003f25] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x03[XOR @0x1000dcd] MEM[0x2003f26] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x31[XOR @0x1000dcd] MEM[0x2003f27] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x01[XOR @0x1000dcd] MEM[0x2003f28] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x31[XOR @0x1000dcd] MEM[0x2003f29] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x31[XOR @0x1000dcd] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x1000dcd] MEM[0x2003f2b] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x32[XOR @0x1000dcd] MEM[0x2003f2c] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x02[XOR @0x1000dcd] MEM[0x2003f2d] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2d ← 0x03[XOR @0x1000dcd] MEM[0x2003f2e] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x03[XOR @0x1000dcd] MEM[0x2003f2f] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x30[XOR @0x1000dcd] MEM[0x2003f30] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x31[XOR @0x1000dcd] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x1000dcd] MEM[0x2003f32] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x32[XOR @0x1000dcd] MEM[0x2003f33] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x03[XOR @0x1000dcd] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x1000dcd] MEM[0x2003f35] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f35 ← 0x30[XOR @0x1000dcd] MEM[0x2003f36] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x02[XOR @0x1000dcd] MEM[0x2003f37] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x30[XOR @0x1000dcd] MEM[0x2003f38] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f38 ← 0x33[XOR @0x1000dcd] MEM[0x2003f39] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x31[XOR @0x1000dcd] MEM[0x2003f3a] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x02[STATE] ESI ← 0x18[XOR @0x10007a9] MEM[0x2003f20] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x010007af: cmp esi, 0x31[XOR @0x10007a9] MEM[0x2003f21] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x30[XOR @0x10007a9] MEM[0x2003f22] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x32[XOR @0x10007a9] MEM[0x2003f23] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x00[XOR @0x10007a9] MEM[0x2003f24] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x00[XOR @0x10007a9] MEM[0x2003f25] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x33[XOR @0x10007a9] MEM[0x2003f26] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x30[XOR @0x10007a9] MEM[0x2003f27] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x00[XOR @0x10007a9] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x10007a9] MEM[0x2003f29] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x33[XOR @0x10007a9] MEM[0x2003f2a] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x00[XOR @0x10007a9] MEM[0x2003f2b] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x30[XOR @0x10007a9] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x10007a9] MEM[0x2003f2d] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x33[XOR @0x10007a9] MEM[0x2003f2e] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x31[XOR @0x10007a9] MEM[0x2003f2f] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x33[XOR @0x10007a9] MEM[0x2003f30] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x03[XOR @0x10007a9] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x10007a9] MEM[0x2003f32] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x02[XOR @0x10007a9] MEM[0x2003f33] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x03[XOR @0x10007a9] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x10007a9] MEM[0x2003f35] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x30[XOR @0x10007a9] MEM[0x2003f36] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x02[XOR @0x10007a9] MEM[0x2003f37] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f37 ← 0x33[XOR @0x10007a9] MEM[0x2003f38] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f38 ← 0x03[STATE] ESI ← 0x58[HOOK MOV] @0x010010df: mov esi, 0x18[XOR @0x10010f3] MEM[0x2003f20] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x010010f9: cmp esi, 0x31[XOR @0x10010f3] MEM[0x2003f21] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x01[XOR @0x10010f3] MEM[0x2003f22] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x30[XOR @0x10010f3] MEM[0x2003f23] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x32[XOR @0x10010f3] MEM[0x2003f24] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x30[XOR @0x10010f3] MEM[0x2003f25] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x03[XOR @0x10010f3] MEM[0x2003f26] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x31[XOR @0x10010f3] MEM[0x2003f27] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f27 ← 0x01[XOR @0x10010f3] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x10010f3] MEM[0x2003f29] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x31[XOR @0x10010f3] MEM[0x2003f2a] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x33[XOR @0x10010f3] MEM[0x2003f2b] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2b ← 0x32[XOR @0x10010f3] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x10010f3] MEM[0x2003f2d] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x03[XOR @0x10010f3] MEM[0x2003f2e] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x03[XOR @0x10010f3] MEM[0x2003f2f] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x30[XOR @0x10010f3] MEM[0x2003f30] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f30 ← 0x31[XOR @0x10010f3] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x10010f3] MEM[0x2003f32] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x32[XOR @0x10010f3] MEM[0x2003f33] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x03[XOR @0x10010f3] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x10010f3] MEM[0x2003f35] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x30[XOR @0x10010f3] MEM[0x2003f36] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x02[XOR @0x10010f3] MEM[0x2003f37] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f37 ← 0x33[XOR @0x10010f3] MEM[0x2003f38] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f38 ← 0x02[STATE] ESI ← 0x3B[HOOK MOV] @0x0100136f: mov esi, 0x1d[XOR @0x1001383] MEM[0x2003f20] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01001389: cmp esi, 0x3b[XOR @0x1001383] MEM[0x2003f21] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x00[XOR @0x1001383] MEM[0x2003f22] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x31[XOR @0x1001383] MEM[0x2003f23] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x32[XOR @0x1001383] MEM[0x2003f24] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x32[XOR @0x1001383] MEM[0x2003f25] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x30[XOR @0x1001383] MEM[0x2003f26] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x33[XOR @0x1001383] MEM[0x2003f27] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x01[XOR @0x1001383] MEM[0x2003f28] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x01[XOR @0x1001383] MEM[0x2003f29] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x03[XOR @0x1001383] MEM[0x2003f2a] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x30[XOR @0x1001383] MEM[0x2003f2b] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x00[XOR @0x1001383] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x1001383] MEM[0x2003f2d] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x33[XOR @0x1001383] MEM[0x2003f2e] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x03[XOR @0x1001383] MEM[0x2003f2f] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x30[XOR @0x1001383] MEM[0x2003f30] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x31[XOR @0x1001383] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x1001383] MEM[0x2003f32] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x02[XOR @0x1001383] MEM[0x2003f33] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x03[XOR @0x1001383] MEM[0x2003f34] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x33[XOR @0x1001383] MEM[0x2003f35] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x02[XOR @0x1001383] MEM[0x2003f36] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x30[XOR @0x1001383] MEM[0x2003f37] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f37 ← 0x03[XOR @0x1001383] MEM[0x2003f38] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f38 ← 0x31[XOR @0x1001383] MEM[0x2003f39] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f39 ← 0x30[XOR @0x1001383] MEM[0x2003f3a] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3a ← 0x03[XOR @0x1001383] MEM[0x2003f3b] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3b ← 0x31[XOR @0x1001383] MEM[0x2003f3c] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3c ← 0x00[XOR @0x1001383] MEM[0x2003f3d] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3d ← 0x30[STATE] ESI ← 0x55[HOOK MOV] @0x0100076b: mov esi, 0x1d[XOR @0x100077f] MEM[0x2003f20] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01000785: cmp esi, 0x3b[XOR @0x100077f] MEM[0x2003f21] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x01[XOR @0x100077f] MEM[0x2003f22] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x30[XOR @0x100077f] MEM[0x2003f23] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x32[XOR @0x100077f] MEM[0x2003f24] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x30[XOR @0x100077f] MEM[0x2003f25] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x03[XOR @0x100077f] MEM[0x2003f26] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x31[XOR @0x100077f] MEM[0x2003f27] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x01[XOR @0x100077f] MEM[0x2003f28] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x31[XOR @0x100077f] MEM[0x2003f29] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x31[XOR @0x100077f] MEM[0x2003f2a] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2a ← 0x33[XOR @0x100077f] MEM[0x2003f2b] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x32[XOR @0x100077f] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x100077f] MEM[0x2003f2d] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x03[XOR @0x100077f] MEM[0x2003f2e] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x03[XOR @0x100077f] MEM[0x2003f2f] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x30[XOR @0x100077f] MEM[0x2003f30] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x31[XOR @0x100077f] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x100077f] MEM[0x2003f32] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x02[XOR @0x100077f] MEM[0x2003f33] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x02[XOR @0x100077f] MEM[0x2003f34] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x03[XOR @0x100077f] MEM[0x2003f35] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f35 ← 0x30[XOR @0x100077f] MEM[0x2003f36] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f36 ← 0x00[XOR @0x100077f] MEM[0x2003f37] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f37 ← 0x00[XOR @0x100077f] MEM[0x2003f38] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f38 ← 0x00[XOR @0x100077f] MEM[0x2003f39] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f39 ← 0x31[XOR @0x100077f] MEM[0x2003f3a] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3a ← 0x32[XOR @0x100077f] MEM[0x2003f3b] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3b ← 0x00[XOR @0x100077f] MEM[0x2003f3c] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x33[XOR @0x100077f] MEM[0x2003f3d] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3d ← 0x02[STATE] ESI ← 0x48[HOOK MOV] @0x01000936: mov esi, 0xe[XOR @0x100094a] MEM[0x2003f20] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01000950: cmp esi, 0x1d[XOR @0x100094a] MEM[0x2003f21] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x31[XOR @0x100094a] MEM[0x2003f22] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x01[XOR @0x100094a] MEM[0x2003f23] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x33[XOR @0x100094a] MEM[0x2003f24] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x32[XOR @0x100094a] MEM[0x2003f25] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x01[XOR @0x100094a] MEM[0x2003f26] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x32[XOR @0x100094a] MEM[0x2003f27] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x31[XOR @0x100094a] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x100094a] MEM[0x2003f29] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x31[XOR @0x100094a] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x100094a] MEM[0x2003f2b] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x03[XOR @0x100094a] MEM[0x2003f2c] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x30[XOR @0x100094a] MEM[0x2003f2d] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x03[XOR @0x100094a] MEM[0x2003f2e] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x30[STATE] ESI ← 0x0A[HOOK MOV] @0x0100081b: mov esi, 0x3[HOOK MOV] @0x01000820: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000836: cmp esi, 0x7[WRITE] @0x2003f21 ← 0x03[WRITE] @0x2003f22 ← 0x00[WRITE] @0x2003f23 ← 0x01[STATE] ESI ← 0x1C[HOOK MOV] @0x01001257: mov esi, 0x18[XOR @0x100126b] MEM[0x2003f20] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01001271: cmp esi, 0x31[XOR @0x100126b] MEM[0x2003f21] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x32[XOR @0x100126b] MEM[0x2003f22] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x32[XOR @0x100126b] MEM[0x2003f23] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x01[XOR @0x100126b] MEM[0x2003f24] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x01[XOR @0x100126b] MEM[0x2003f25] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x03[XOR @0x100126b] MEM[0x2003f26] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x33[XOR @0x100126b] MEM[0x2003f27] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x30[XOR @0x100126b] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x100126b] MEM[0x2003f29] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x33[XOR @0x100126b] MEM[0x2003f2a] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x00[XOR @0x100126b] MEM[0x2003f2b] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x01[XOR @0x100126b] MEM[0x2003f2c] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x30[XOR @0x100126b] MEM[0x2003f2d] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x33[XOR @0x100126b] MEM[0x2003f2e] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x02[XOR @0x100126b] MEM[0x2003f2f] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x33[XOR @0x100126b] MEM[0x2003f30] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x03[XOR @0x100126b] MEM[0x2003f31] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x01[XOR @0x100126b] MEM[0x2003f32] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x32[XOR @0x100126b] MEM[0x2003f33] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f33 ← 0x02[XOR @0x100126b] MEM[0x2003f34] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f34 ← 0x03[XOR @0x100126b] MEM[0x2003f35] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x30[XOR @0x100126b] MEM[0x2003f36] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x00[XOR @0x100126b] MEM[0x2003f37] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x30[XOR @0x100126b] MEM[0x2003f38] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f38 ← 0x32[STATE] ESI ← 0x1B[HOOK MOV] @0x010008d8: mov esi, 0x8[XOR @0x10008ec] MEM[0x2003f20] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x010008f2: cmp esi, 0x11[XOR @0x10008ec] MEM[0x2003f21] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x01[XOR @0x10008ec] MEM[0x2003f22] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x32[XOR @0x10008ec] MEM[0x2003f23] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x00[XOR @0x10008ec] MEM[0x2003f24] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x31[XOR @0x10008ec] MEM[0x2003f25] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x30[XOR @0x10008ec] MEM[0x2003f26] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x31[XOR @0x10008ec] MEM[0x2003f27] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x03[XOR @0x10008ec] MEM[0x2003f28] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x32[STATE] ESI ← 0x2F[HOOK MOV] @0x01000ca7: mov esi, 0x8[XOR @0x1000cbb] MEM[0x2003f20] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x01000cc1: cmp esi, 0x11[XOR @0x1000cbb] MEM[0x2003f21] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x32[XOR @0x1000cbb] MEM[0x2003f22] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x32[XOR @0x1000cbb] MEM[0x2003f23] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x01[XOR @0x1000cbb] MEM[0x2003f24] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x01[XOR @0x1000cbb] MEM[0x2003f25] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x03[XOR @0x1000cbb] MEM[0x2003f26] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x33[XOR @0x1000cbb] MEM[0x2003f27] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x30[XOR @0x1000cbb] MEM[0x2003f28] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x31[STATE] ESI ← 0x5C[HOOK MOV] @0x01001228: mov esi, 0x29[XOR @0x100123c] MEM[0x2003f20] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x01001242: cmp esi, 0x53[XOR @0x100123c] MEM[0x2003f21] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x02[XOR @0x100123c] MEM[0x2003f22] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x32[XOR @0x100123c] MEM[0x2003f23] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x01[XOR @0x100123c] MEM[0x2003f24] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x01[XOR @0x100123c] MEM[0x2003f25] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x03[XOR @0x100123c] MEM[0x2003f26] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x00[XOR @0x100123c] MEM[0x2003f27] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x32[XOR @0x100123c] MEM[0x2003f28] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x03[XOR @0x100123c] MEM[0x2003f29] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x32[XOR @0x100123c] MEM[0x2003f2a] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x01[XOR @0x100123c] MEM[0x2003f2b] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x02[XOR @0x100123c] MEM[0x2003f2c] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x30[XOR @0x100123c] MEM[0x2003f2d] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x01[XOR @0x100123c] MEM[0x2003f2e] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2e ← 0x01[XOR @0x100123c] MEM[0x2003f2f] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x01[XOR @0x100123c] MEM[0x2003f30] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f30 ← 0x02[XOR @0x100123c] MEM[0x2003f31] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x03[XOR @0x100123c] MEM[0x2003f32] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x02[XOR @0x100123c] MEM[0x2003f33] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f33 ← 0x03[XOR @0x100123c] MEM[0x2003f34] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f34 ← 0x02[XOR @0x100123c] MEM[0x2003f35] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f35 ← 0x31[XOR @0x100123c] MEM[0x2003f36] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x02[XOR @0x100123c] MEM[0x2003f37] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f37 ← 0x33[XOR @0x100123c] MEM[0x2003f38] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f38 ← 0x30[XOR @0x100123c] MEM[0x2003f39] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f39 ← 0x32[XOR @0x100123c] MEM[0x2003f3a] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3a ← 0x30[XOR @0x100123c] MEM[0x2003f3b] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3b ← 0x31[XOR @0x100123c] MEM[0x2003f3c] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3c ← 0x31[XOR @0x100123c] MEM[0x2003f3d] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3d ← 0x31[XOR @0x100123c] MEM[0x2003f3e] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3e ← 0x31[XOR @0x100123c] MEM[0x2003f3f] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3f ← 0x33[XOR @0x100123c] MEM[0x2003f40] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f40 ← 0x30[XOR @0x100123c] MEM[0x2003f41] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f41 ← 0x33[XOR @0x100123c] MEM[0x2003f42] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f42 ← 0x02[XOR @0x100123c] MEM[0x2003f43] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f43 ← 0x33[XOR @0x100123c] MEM[0x2003f44] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f44 ← 0x31[XOR @0x100123c] MEM[0x2003f45] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f45 ← 0x03[XOR @0x100123c] MEM[0x2003f46] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f46 ← 0x02[XOR @0x100123c] MEM[0x2003f47] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f47 ← 0x30[XOR @0x100123c] MEM[0x2003f48] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f48 ← 0x30[XOR @0x100123c] MEM[0x2003f49] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f49 ← 0x33[STATE] ESI ← 0x20[HOOK MOV] @0x010003b0: mov esi, 0xb[HOOK MOV] @0x010003b5: mov esi, 0xae4c415d[XOR @0x10003db] MEM[0x2003f20] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x010003e1: cmp esi, 0x17[XOR @0x10003db] MEM[0x2003f21] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x32[XOR @0x10003db] MEM[0x2003f22] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x33[XOR @0x10003db] MEM[0x2003f23] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x00[XOR @0x10003db] MEM[0x2003f24] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x00[XOR @0x10003db] MEM[0x2003f25] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x01[XOR @0x10003db] MEM[0x2003f26] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x03[XOR @0x10003db] MEM[0x2003f27] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f27 ← 0x30[XOR @0x10003db] MEM[0x2003f28] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x00[XOR @0x10003db] MEM[0x2003f29] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x30[XOR @0x10003db] MEM[0x2003f2a] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x30[XOR @0x10003db] MEM[0x2003f2b] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x00[STATE] ESI ← 0x2B[HOOK MOV] @0x010006e1: mov esi, 0xd[XOR @0x10006f5] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x010006fb: cmp esi, 0x1b[XOR @0x10006f5] MEM[0x2003f21] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x33[XOR @0x10006f5] MEM[0x2003f22] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x32[XOR @0x10006f5] MEM[0x2003f23] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x02[XOR @0x10006f5] MEM[0x2003f24] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x03[XOR @0x10006f5] MEM[0x2003f25] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x03[XOR @0x10006f5] MEM[0x2003f26] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f26 ← 0x00[XOR @0x10006f5] MEM[0x2003f27] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x32[XOR @0x10006f5] MEM[0x2003f28] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x31[XOR @0x10006f5] MEM[0x2003f29] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f29 ← 0x32[XOR @0x10006f5] MEM[0x2003f2a] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2a ← 0x03[XOR @0x10006f5] MEM[0x2003f2b] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x30[XOR @0x10006f5] MEM[0x2003f2c] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x02[XOR @0x10006f5] MEM[0x2003f2d] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x31[STATE] ESI ← 0x50[HOOK MOV] @0x010005f9: mov esi, 0x12[XOR @0x100060d] MEM[0x2003f20] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x01000613: cmp esi, 0x25[XOR @0x100060d] MEM[0x2003f21] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f21 ← 0x30[XOR @0x100060d] MEM[0x2003f22] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x30[XOR @0x100060d] MEM[0x2003f23] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x33[XOR @0x100060d] MEM[0x2003f24] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f24 ← 0x01[XOR @0x100060d] MEM[0x2003f25] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x30[XOR @0x100060d] MEM[0x2003f26] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x30[XOR @0x100060d] MEM[0x2003f27] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f27 ← 0x00[XOR @0x100060d] MEM[0x2003f28] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x01[XOR @0x100060d] MEM[0x2003f29] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x03[XOR @0x100060d] MEM[0x2003f2a] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x32[XOR @0x100060d] MEM[0x2003f2b] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2b ← 0x01[XOR @0x100060d] MEM[0x2003f2c] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x33[XOR @0x100060d] MEM[0x2003f2d] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x02[XOR @0x100060d] MEM[0x2003f2e] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2e ← 0x31[XOR @0x100060d] MEM[0x2003f2f] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x32[XOR @0x100060d] MEM[0x2003f30] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f30 ← 0x00[XOR @0x100060d] MEM[0x2003f31] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f31 ← 0x30[XOR @0x100060d] MEM[0x2003f32] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x33[STATE] ESI ← 0x44[HOOK MOV] @0x010015c7: mov esi, 0xe[XOR @0x10015db] MEM[0x2003f20] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x010015e1: cmp esi, 0x1d[XOR @0x10015db] MEM[0x2003f21] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x02[XOR @0x10015db] MEM[0x2003f22] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x30[XOR @0x10015db] MEM[0x2003f23] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f23 ← 0x03[XOR @0x10015db] MEM[0x2003f24] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x32[XOR @0x10015db] MEM[0x2003f25] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x33[XOR @0x10015db] MEM[0x2003f26] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x32[XOR @0x10015db] MEM[0x2003f27] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f27 ← 0x31[XOR @0x10015db] MEM[0x2003f28] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x03[XOR @0x10015db] MEM[0x2003f29] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x30[XOR @0x10015db] MEM[0x2003f2a] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x02[XOR @0x10015db] MEM[0x2003f2b] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x33[XOR @0x10015db] MEM[0x2003f2c] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x03[XOR @0x10015db] MEM[0x2003f2d] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x33[XOR @0x10015db] MEM[0x2003f2e] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x00[STATE] ESI ← 0x2E[HOOK MOV] @0x01001597: mov esi, 0x19[HOOK MOV] @0x0100159c: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x010015b2: cmp esi, 0x33[WRITE] @0x2003f21 ← 0x32[WRITE] @0x2003f22 ← 0x01[WRITE] @0x2003f23 ← 0x32[WRITE] @0x2003f24 ← 0x03[WRITE] @0x2003f25 ← 0x02[WRITE] @0x2003f26 ← 0x01[WRITE] @0x2003f27 ← 0x01[WRITE] @0x2003f28 ← 0x30[WRITE] @0x2003f29 ← 0x32[WRITE] @0x2003f2a ← 0x31[WRITE] @0x2003f2b ← 0x02[WRITE] @0x2003f2c ← 0x00[WRITE] @0x2003f2d ← 0x31[WRITE] @0x2003f2e ← 0x30[WRITE] @0x2003f2f ← 0x02[WRITE] @0x2003f30 ← 0x33[WRITE] @0x2003f31 ← 0x00[WRITE] @0x2003f32 ← 0x33[WRITE] @0x2003f33 ← 0x03[WRITE] @0x2003f34 ← 0x02[WRITE] @0x2003f35 ← 0x31[WRITE] @0x2003f36 ← 0x33[WRITE] @0x2003f37 ← 0x01[WRITE] @0x2003f38 ← 0x31[WRITE] @0x2003f39 ← 0x00[STATE] ESI ← 0x1D[HOOK MOV] @0x01000a21: mov esi, 0x2[XOR @0x1000a35] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000a3b: cmp esi, 0x5[XOR @0x1000a35] MEM[0x2003f21] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x00[XOR @0x1000a35] MEM[0x2003f22] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x02[STATE] ESI ← 0x5E[HOOK MOV] @0x010014b2: mov esi, 0x17[HOOK MOV] @0x010014b7: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x010014cd: cmp esi, 0x2f[WRITE] @0x2003f21 ← 0x31[WRITE] @0x2003f22 ← 0x02[WRITE] @0x2003f23 ← 0x02[WRITE] @0x2003f24 ← 0x32[WRITE] @0x2003f25 ← 0x33[WRITE] @0x2003f26 ← 0x30[WRITE] @0x2003f27 ← 0x30[WRITE] @0x2003f28 ← 0x03[WRITE] @0x2003f29 ← 0x02[WRITE] @0x2003f2a ← 0x02[WRITE] @0x2003f2b ← 0x00[WRITE] @0x2003f2c ← 0x33[WRITE] @0x2003f2d ← 0x00[WRITE] @0x2003f2e ← 0x33[WRITE] @0x2003f2f ← 0x00[WRITE] @0x2003f30 ← 0x03[WRITE] @0x2003f31 ← 0x30[WRITE] @0x2003f32 ← 0x00[WRITE] @0x2003f33 ← 0x33[WRITE] @0x2003f34 ← 0x02[WRITE] @0x2003f35 ← 0x31[WRITE] @0x2003f36 ← 0x33[WRITE] @0x2003f37 ← 0x01[STATE] ESI ← 0x21[HOOK MOV] @0x01001540: mov esi, 0x11[XOR @0x1001554] MEM[0x2003f20] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x0100155a: cmp esi, 0x23[XOR @0x1001554] MEM[0x2003f21] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x31[XOR @0x1001554] MEM[0x2003f22] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x31[XOR @0x1001554] MEM[0x2003f23] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x00[XOR @0x1001554] MEM[0x2003f24] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x03[XOR @0x1001554] MEM[0x2003f25] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x00[XOR @0x1001554] MEM[0x2003f26] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x31[XOR @0x1001554] MEM[0x2003f27] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x01[XOR @0x1001554] MEM[0x2003f28] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x03[XOR @0x1001554] MEM[0x2003f29] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x32[XOR @0x1001554] MEM[0x2003f2a] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2a ← 0x33[XOR @0x1001554] MEM[0x2003f2b] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x31[XOR @0x1001554] MEM[0x2003f2c] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x02[XOR @0x1001554] MEM[0x2003f2d] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2d ← 0x31[XOR @0x1001554] MEM[0x2003f2e] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x00[XOR @0x1001554] MEM[0x2003f2f] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x30[XOR @0x1001554] MEM[0x2003f30] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f30 ← 0x30[XOR @0x1001554] MEM[0x2003f31] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f31 ← 0x32[STATE] ESI ← 0x47[HOOK MOV] @0x01000cd6: mov esi, 0x28[XOR @0x1000cea] MEM[0x2003f20] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01000cf0: cmp esi, 0x51[XOR @0x1000cea] MEM[0x2003f21] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x02[XOR @0x1000cea] MEM[0x2003f22] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x01[XOR @0x1000cea] MEM[0x2003f23] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x00[XOR @0x1000cea] MEM[0x2003f24] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f24 ← 0x03[XOR @0x1000cea] MEM[0x2003f25] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x00[XOR @0x1000cea] MEM[0x2003f26] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x31[XOR @0x1000cea] MEM[0x2003f27] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x30[XOR @0x1000cea] MEM[0x2003f28] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x01[XOR @0x1000cea] MEM[0x2003f29] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x33[XOR @0x1000cea] MEM[0x2003f2a] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x33[XOR @0x1000cea] MEM[0x2003f2b] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x32[XOR @0x1000cea] MEM[0x2003f2c] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x02[XOR @0x1000cea] MEM[0x2003f2d] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x00[XOR @0x1000cea] MEM[0x2003f2e] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x30[XOR @0x1000cea] MEM[0x2003f2f] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x31[XOR @0x1000cea] MEM[0x2003f30] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x03[XOR @0x1000cea] MEM[0x2003f31] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f31 ← 0x01[XOR @0x1000cea] MEM[0x2003f32] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x32[XOR @0x1000cea] MEM[0x2003f33] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f33 ← 0x31[XOR @0x1000cea] MEM[0x2003f34] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x02[XOR @0x1000cea] MEM[0x2003f35] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x01[XOR @0x1000cea] MEM[0x2003f36] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f36 ← 0x02[XOR @0x1000cea] MEM[0x2003f37] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f37 ← 0x02[XOR @0x1000cea] MEM[0x2003f38] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f38 ← 0x30[XOR @0x1000cea] MEM[0x2003f39] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f39 ← 0x32[XOR @0x1000cea] MEM[0x2003f3a] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3a ← 0x01[XOR @0x1000cea] MEM[0x2003f3b] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3b ← 0x33[XOR @0x1000cea] MEM[0x2003f3c] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3c ← 0x30[XOR @0x1000cea] MEM[0x2003f3d] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3d ← 0x33[XOR @0x1000cea] MEM[0x2003f3e] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3e ← 0x33[XOR @0x1000cea] MEM[0x2003f3f] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3f ← 0x03[XOR @0x1000cea] MEM[0x2003f40] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f40 ← 0x02[XOR @0x1000cea] MEM[0x2003f41] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f41 ← 0x32[XOR @0x1000cea] MEM[0x2003f42] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f42 ← 0x31[XOR @0x1000cea] MEM[0x2003f43] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f43 ← 0x03[XOR @0x1000cea] MEM[0x2003f44] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f44 ← 0x02[XOR @0x1000cea] MEM[0x2003f45] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f45 ← 0x30[XOR @0x1000cea] MEM[0x2003f46] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f46 ← 0x01[XOR @0x1000cea] MEM[0x2003f47] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f47 ← 0x32[XOR @0x1000cea] MEM[0x2003f48] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f48 ← 0x02[STATE] ESI ← 0x17[HOOK MOV] @0x0100073c: mov esi, 0x11[XOR @0x1000750] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000756: cmp esi, 0x23[XOR @0x1000750] MEM[0x2003f21] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x30[XOR @0x1000750] MEM[0x2003f22] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x30[XOR @0x1000750] MEM[0x2003f23] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x02[XOR @0x1000750] MEM[0x2003f24] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f24 ← 0x02[XOR @0x1000750] MEM[0x2003f25] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x02[XOR @0x1000750] MEM[0x2003f26] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x33[XOR @0x1000750] MEM[0x2003f27] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x00[XOR @0x1000750] MEM[0x2003f28] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x33[XOR @0x1000750] MEM[0x2003f29] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x32[XOR @0x1000750] MEM[0x2003f2a] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x00[XOR @0x1000750] MEM[0x2003f2b] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x02[XOR @0x1000750] MEM[0x2003f2c] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x31[XOR @0x1000750] MEM[0x2003f2d] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2d ← 0x33[XOR @0x1000750] MEM[0x2003f2e] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x33[XOR @0x1000750] MEM[0x2003f2f] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x33[XOR @0x1000750] MEM[0x2003f30] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f30 ← 0x31[XOR @0x1000750] MEM[0x2003f31] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x30[STATE] ESI ← 0x01[HOOK MOV] @0x01000994: mov esi, 0x4[XOR @0x10009a8] MEM[0x2003f20] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x010009ae: cmp esi, 0x9[XOR @0x10009a8] MEM[0x2003f21] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x32[XOR @0x10009a8] MEM[0x2003f22] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x03[XOR @0x10009a8] MEM[0x2003f23] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x02[XOR @0x10009a8] MEM[0x2003f24] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x31[STATE] ESI ← 0x52[HOOK MOV] @0x01001625: mov esi, 0x15[XOR @0x1001639] MEM[0x2003f20] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x0100163f: cmp esi, 0x2b[XOR @0x1001639] MEM[0x2003f21] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x30[XOR @0x1001639] MEM[0x2003f22] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f22 ← 0x01[XOR @0x1001639] MEM[0x2003f23] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x32[XOR @0x1001639] MEM[0x2003f24] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x03[XOR @0x1001639] MEM[0x2003f25] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x03[XOR @0x1001639] MEM[0x2003f26] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x00[XOR @0x1001639] MEM[0x2003f27] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f27 ← 0x30[XOR @0x1001639] MEM[0x2003f28] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x00[XOR @0x1001639] MEM[0x2003f29] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x01[XOR @0x1001639] MEM[0x2003f2a] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x03[XOR @0x1001639] MEM[0x2003f2b] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x00[XOR @0x1001639] MEM[0x2003f2c] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2c ← 0x03[XOR @0x1001639] MEM[0x2003f2d] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x02[XOR @0x1001639] MEM[0x2003f2e] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x30[XOR @0x1001639] MEM[0x2003f2f] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x31[XOR @0x1001639] MEM[0x2003f30] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x01[XOR @0x1001639] MEM[0x2003f31] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f31 ← 0x31[XOR @0x1001639] MEM[0x2003f32] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x00[XOR @0x1001639] MEM[0x2003f33] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f33 ← 0x33[XOR @0x1001639] MEM[0x2003f34] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x31[XOR @0x1001639] MEM[0x2003f35] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f35 ← 0x31[STATE] ESI ← 0x3F[HOOK MOV] @0x0100110e: mov esi, 0x16[XOR @0x1001122] MEM[0x2003f20] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01001128: cmp esi, 0x2d[XOR @0x1001122] MEM[0x2003f21] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x32[XOR @0x1001122] MEM[0x2003f22] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x31[XOR @0x1001122] MEM[0x2003f23] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f23 ← 0x00[XOR @0x1001122] MEM[0x2003f24] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f24 ← 0x02[XOR @0x1001122] MEM[0x2003f25] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x30[XOR @0x1001122] MEM[0x2003f26] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x30[XOR @0x1001122] MEM[0x2003f27] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x03[XOR @0x1001122] MEM[0x2003f28] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x33[XOR @0x1001122] MEM[0x2003f29] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x02[XOR @0x1001122] MEM[0x2003f2a] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x01[XOR @0x1001122] MEM[0x2003f2b] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x32[XOR @0x1001122] MEM[0x2003f2c] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2c ← 0x32[XOR @0x1001122] MEM[0x2003f2d] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x01[XOR @0x1001122] MEM[0x2003f2e] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x32[XOR @0x1001122] MEM[0x2003f2f] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x01[XOR @0x1001122] MEM[0x2003f30] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x00[XOR @0x1001122] MEM[0x2003f31] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x03[XOR @0x1001122] MEM[0x2003f32] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x02[XOR @0x1001122] MEM[0x2003f33] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f33 ← 0x00[XOR @0x1001122] MEM[0x2003f34] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f34 ← 0x01[XOR @0x1001122] MEM[0x2003f35] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x31[XOR @0x1001122] MEM[0x2003f36] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x02[STATE] ESI ← 0x16[HOOK MOV] @0x01000683: mov esi, 0x2b[XOR @0x1000697] MEM[0x2003f20] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x0100069d: cmp esi, 0x57[XOR @0x1000697] MEM[0x2003f21] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x32[XOR @0x1000697] MEM[0x2003f22] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x31[XOR @0x1000697] MEM[0x2003f23] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x00[XOR @0x1000697] MEM[0x2003f24] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x33[XOR @0x1000697] MEM[0x2003f25] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x02[XOR @0x1000697] MEM[0x2003f26] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x01[XOR @0x1000697] MEM[0x2003f27] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x03[XOR @0x1000697] MEM[0x2003f28] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x00[XOR @0x1000697] MEM[0x2003f29] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x00[XOR @0x1000697] MEM[0x2003f2a] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x00[XOR @0x1000697] MEM[0x2003f2b] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x31[XOR @0x1000697] MEM[0x2003f2c] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x32[XOR @0x1000697] MEM[0x2003f2d] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x01[XOR @0x1000697] MEM[0x2003f2e] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2e ← 0x32[XOR @0x1000697] MEM[0x2003f2f] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x30[XOR @0x1000697] MEM[0x2003f30] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f30 ← 0x32[XOR @0x1000697] MEM[0x2003f31] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f31 ← 0x02[XOR @0x1000697] MEM[0x2003f32] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x30[XOR @0x1000697] MEM[0x2003f33] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x30[XOR @0x1000697] MEM[0x2003f34] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x33[XOR @0x1000697] MEM[0x2003f35] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x33[XOR @0x1000697] MEM[0x2003f36] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x32[XOR @0x1000697] MEM[0x2003f37] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f37 ← 0x32[XOR @0x1000697] MEM[0x2003f38] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f38 ← 0x03[XOR @0x1000697] MEM[0x2003f39] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f39 ← 0x01[XOR @0x1000697] MEM[0x2003f3a] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x33[XOR @0x1000697] MEM[0x2003f3b] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3b ← 0x01[XOR @0x1000697] MEM[0x2003f3c] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3c ← 0x33[XOR @0x1000697] MEM[0x2003f3d] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3d ← 0x32[XOR @0x1000697] MEM[0x2003f3e] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3e ← 0x00[XOR @0x1000697] MEM[0x2003f3f] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3f ← 0x02[XOR @0x1000697] MEM[0x2003f40] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f40 ← 0x31[XOR @0x1000697] MEM[0x2003f41] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f41 ← 0x00[XOR @0x1000697] MEM[0x2003f42] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f42 ← 0x31[XOR @0x1000697] MEM[0x2003f43] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f43 ← 0x01[XOR @0x1000697] MEM[0x2003f44] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f44 ← 0x33[XOR @0x1000697] MEM[0x2003f45] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f45 ← 0x30[XOR @0x1000697] MEM[0x2003f46] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f46 ← 0x30[XOR @0x1000697] MEM[0x2003f47] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f47 ← 0x33[XOR @0x1000697] MEM[0x2003f48] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f48 ← 0x31[XOR @0x1000697] MEM[0x2003f49] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f49 ← 0x03[XOR @0x1000697] MEM[0x2003f4a] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f4a ← 0x00[XOR @0x1000697] MEM[0x2003f4b] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f4b ← 0x33[STATE] ESI ← 0x4C[HOOK MOV] @0x010012e0: mov esi, 0x20[XOR @0x10012f6] MEM[0x2003f20] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x010012fc: cmp esi, 0x41[XOR @0x10012f6] MEM[0x2003f21] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x32[XOR @0x10012f6] MEM[0x2003f22] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x00[XOR @0x10012f6] MEM[0x2003f23] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x01[XOR @0x10012f6] MEM[0x2003f24] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x00[XOR @0x10012f6] MEM[0x2003f25] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x32[XOR @0x10012f6] MEM[0x2003f26] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x31[XOR @0x10012f6] MEM[0x2003f27] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x30[XOR @0x10012f6] MEM[0x2003f28] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x31[XOR @0x10012f6] MEM[0x2003f29] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f29 ← 0x03[XOR @0x10012f6] MEM[0x2003f2a] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x00[XOR @0x10012f6] MEM[0x2003f2b] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x02[XOR @0x10012f6] MEM[0x2003f2c] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x32[XOR @0x10012f6] MEM[0x2003f2d] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x01[XOR @0x10012f6] MEM[0x2003f2e] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2e ← 0x32[XOR @0x10012f6] MEM[0x2003f2f] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x30[XOR @0x10012f6] MEM[0x2003f30] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x00[XOR @0x10012f6] MEM[0x2003f31] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f31 ← 0x02[XOR @0x10012f6] MEM[0x2003f32] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f32 ← 0x31[XOR @0x10012f6] MEM[0x2003f33] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x30[XOR @0x10012f6] MEM[0x2003f34] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x01[XOR @0x10012f6] MEM[0x2003f35] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x02[XOR @0x10012f6] MEM[0x2003f36] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f36 ← 0x02[XOR @0x10012f6] MEM[0x2003f37] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x03[XOR @0x10012f6] MEM[0x2003f38] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f38 ← 0x00[XOR @0x10012f6] MEM[0x2003f39] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x01[XOR @0x10012f6] MEM[0x2003f3a] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3a ← 0x31[XOR @0x10012f6] MEM[0x2003f3b] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3b ← 0x33[XOR @0x10012f6] MEM[0x2003f3c] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3c ← 0x32[XOR @0x10012f6] MEM[0x2003f3d] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3d ← 0x00[XOR @0x10012f6] MEM[0x2003f3e] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x30[XOR @0x10012f6] MEM[0x2003f3f] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3f ← 0x02[XOR @0x10012f6] MEM[0x2003f40] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f40 ← 0x33[STATE] ESI ← 0x0D[HOOK MOV] @0x01000429: mov esi, 0x13[HOOK MOV] @0x0100042e: mov esi, 0xae4c415d[XOR @0x1000450] MEM[0x2003f20] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000456: cmp esi, 0x27[XOR @0x1000450] MEM[0x2003f21] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x33[XOR @0x1000450] MEM[0x2003f22] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x02[XOR @0x1000450] MEM[0x2003f23] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x03[XOR @0x1000450] MEM[0x2003f24] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x03[XOR @0x1000450] MEM[0x2003f25] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x32[XOR @0x1000450] MEM[0x2003f26] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x30[XOR @0x1000450] MEM[0x2003f27] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x01[XOR @0x1000450] MEM[0x2003f28] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x02[XOR @0x1000450] MEM[0x2003f29] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x31[XOR @0x1000450] MEM[0x2003f2a] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x00[XOR @0x1000450] MEM[0x2003f2b] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x32[XOR @0x1000450] MEM[0x2003f2c] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x30[XOR @0x1000450] MEM[0x2003f2d] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x32[XOR @0x1000450] MEM[0x2003f2e] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2e ← 0x32[XOR @0x1000450] MEM[0x2003f2f] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x01[XOR @0x1000450] MEM[0x2003f30] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f30 ← 0x01[XOR @0x1000450] MEM[0x2003f31] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f31 ← 0x31[XOR @0x1000450] MEM[0x2003f32] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x01[XOR @0x1000450] MEM[0x2003f33] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x00[STATE] ESI ← 0x23[HOOK MOV] @0x01000edd: mov esi, 0xc[XOR @0x1000ef1] MEM[0x2003f20] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01000ef7: cmp esi, 0x19[XOR @0x1000ef1] MEM[0x2003f21] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f21 ← 0x01[XOR @0x1000ef1] MEM[0x2003f22] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x30[XOR @0x1000ef1] MEM[0x2003f23] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f23 ← 0x02[XOR @0x1000ef1] MEM[0x2003f24] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f24 ← 0x02[XOR @0x1000ef1] MEM[0x2003f25] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x03[XOR @0x1000ef1] MEM[0x2003f26] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x31[XOR @0x1000ef1] MEM[0x2003f27] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x01[XOR @0x1000ef1] MEM[0x2003f28] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x03[XOR @0x1000ef1] MEM[0x2003f29] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x33[XOR @0x1000ef1] MEM[0x2003f2a] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x02[XOR @0x1000ef1] MEM[0x2003f2b] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x31[XOR @0x1000ef1] MEM[0x2003f2c] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x30[STATE] ESI ← 0x34[HOOK MOV] @0x0100070c: mov esi, 0x2d[HOOK MOV] @0x01000711: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01000727: cmp esi, 0x5b[WRITE] @0x2003f21 ← 0x01[WRITE] @0x2003f22 ← 0x30[WRITE] @0x2003f23 ← 0x03[WRITE] @0x2003f24 ← 0x32[WRITE] @0x2003f25 ← 0x00[WRITE] @0x2003f26 ← 0x03[WRITE] @0x2003f27 ← 0x01[WRITE] @0x2003f28 ← 0x00[WRITE] @0x2003f29 ← 0x32[WRITE] @0x2003f2a ← 0x02[WRITE] @0x2003f2b ← 0x03[WRITE] @0x2003f2c ← 0x32[WRITE] @0x2003f2d ← 0x31[WRITE] @0x2003f2e ← 0x00[WRITE] @0x2003f2f ← 0x30[WRITE] @0x2003f30 ← 0x01[WRITE] @0x2003f31 ← 0x01[WRITE] @0x2003f32 ← 0x00[WRITE] @0x2003f33 ← 0x01[WRITE] @0x2003f34 ← 0x01[WRITE] @0x2003f35 ← 0x03[WRITE] @0x2003f36 ← 0x03[WRITE] @0x2003f37 ← 0x00[WRITE] @0x2003f38 ← 0x03[WRITE] @0x2003f39 ← 0x01[WRITE] @0x2003f3a ← 0x32[WRITE] @0x2003f3b ← 0x32[WRITE] @0x2003f3c ← 0x00[WRITE] @0x2003f3d ← 0x32[WRITE] @0x2003f3e ← 0x30[WRITE] @0x2003f3f ← 0x30[WRITE] @0x2003f40 ← 0x03[WRITE] @0x2003f41 ← 0x30[WRITE] @0x2003f42 ← 0x32[WRITE] @0x2003f43 ← 0x31[WRITE] @0x2003f44 ← 0x01[WRITE] @0x2003f45 ← 0x01[WRITE] @0x2003f46 ← 0x31[WRITE] @0x2003f47 ← 0x32[WRITE] @0x2003f48 ← 0x00[WRITE] @0x2003f49 ← 0x31[WRITE] @0x2003f4a ← 0x00[WRITE] @0x2003f4b ← 0x02[WRITE] @0x2003f4c ← 0x00[WRITE] @0x2003f4d ← 0x02[STATE] ESI ← 0x49[HOOK MOV] @0x01000907: mov esi, 0x24[XOR @0x100091b] MEM[0x2003f20] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x01000921: cmp esi, 0x49[XOR @0x100091b] MEM[0x2003f21] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x00[XOR @0x100091b] MEM[0x2003f22] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f22 ← 0x01[XOR @0x100091b] MEM[0x2003f23] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f23 ← 0x31[XOR @0x100091b] MEM[0x2003f24] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x32[XOR @0x100091b] MEM[0x2003f25] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x31[XOR @0x100091b] MEM[0x2003f26] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f26 ← 0x03[XOR @0x100091b] MEM[0x2003f27] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x03[XOR @0x100091b] MEM[0x2003f28] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x00[XOR @0x100091b] MEM[0x2003f29] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x30[XOR @0x100091b] MEM[0x2003f2a] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2a ← 0x02[XOR @0x100091b] MEM[0x2003f2b] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x02[XOR @0x100091b] MEM[0x2003f2c] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x32[XOR @0x100091b] MEM[0x2003f2d] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x30[XOR @0x100091b] MEM[0x2003f2e] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x31[XOR @0x100091b] MEM[0x2003f2f] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x02[XOR @0x100091b] MEM[0x2003f30] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x30[XOR @0x100091b] MEM[0x2003f31] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x02[XOR @0x100091b] MEM[0x2003f32] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x03[XOR @0x100091b] MEM[0x2003f33] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x01[XOR @0x100091b] MEM[0x2003f34] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x31[XOR @0x100091b] MEM[0x2003f35] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f35 ← 0x01[XOR @0x100091b] MEM[0x2003f36] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x01[XOR @0x100091b] MEM[0x2003f37] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x32[XOR @0x100091b] MEM[0x2003f38] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f38 ← 0x33[XOR @0x100091b] MEM[0x2003f39] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x30[XOR @0x100091b] MEM[0x2003f3a] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3a ← 0x30[XOR @0x100091b] MEM[0x2003f3b] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3b ← 0x02[XOR @0x100091b] MEM[0x2003f3c] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x02[XOR @0x100091b] MEM[0x2003f3d] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3d ← 0x31[XOR @0x100091b] MEM[0x2003f3e] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3e ← 0x31[XOR @0x100091b] MEM[0x2003f3f] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3f ← 0x01[XOR @0x100091b] MEM[0x2003f40] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f40 ← 0x02[XOR @0x100091b] MEM[0x2003f41] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f41 ← 0x31[XOR @0x100091b] MEM[0x2003f42] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f42 ← 0x00[XOR @0x100091b] MEM[0x2003f43] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f43 ← 0x02[XOR @0x100091b] MEM[0x2003f44] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f44 ← 0x31[STATE] ESI ← 0x43[HOOK MOV] @0x01000f66: mov esi, 0x23[HOOK MOV] @0x01000f6b: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01000f81: cmp esi, 0x47[WRITE] @0x2003f21 ← 0x31[WRITE] @0x2003f22 ← 0x00[WRITE] @0x2003f23 ← 0x00[WRITE] @0x2003f24 ← 0x00[WRITE] @0x2003f25 ← 0x31[WRITE] @0x2003f26 ← 0x32[WRITE] @0x2003f27 ← 0x03[WRITE] @0x2003f28 ← 0x02[WRITE] @0x2003f29 ← 0x30[WRITE] @0x2003f2a ← 0x00[WRITE] @0x2003f2b ← 0x02[WRITE] @0x2003f2c ← 0x31[WRITE] @0x2003f2d ← 0x01[WRITE] @0x2003f2e ← 0x31[WRITE] @0x2003f2f ← 0x02[WRITE] @0x2003f30 ← 0x30[WRITE] @0x2003f31 ← 0x33[WRITE] @0x2003f32 ← 0x31[WRITE] @0x2003f33 ← 0x02[WRITE] @0x2003f34 ← 0x33[WRITE] @0x2003f35 ← 0x31[WRITE] @0x2003f36 ← 0x01[WRITE] @0x2003f37 ← 0x30[WRITE] @0x2003f38 ← 0x02[WRITE] @0x2003f39 ← 0x31[WRITE] @0x2003f3a ← 0x01[WRITE] @0x2003f3b ← 0x00[WRITE] @0x2003f3c ← 0x32[WRITE] @0x2003f3d ← 0x02[WRITE] @0x2003f3e ← 0x00[WRITE] @0x2003f3f ← 0x03[WRITE] @0x2003f40 ← 0x31[WRITE] @0x2003f41 ← 0x00[WRITE] @0x2003f42 ← 0x01[WRITE] @0x2003f43 ← 0x32[STATE] ESI ← 0x28[HOOK MOV] @0x01000b64: mov esi, 0x16[XOR @0x1000b78] MEM[0x2003f20] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x02[HOOK CMP] @0x01000b7e: cmp esi, 0x2d[XOR @0x1000b78] MEM[0x2003f21] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x01[XOR @0x1000b78] MEM[0x2003f22] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x02[XOR @0x1000b78] MEM[0x2003f23] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x31[XOR @0x1000b78] MEM[0x2003f24] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x01[XOR @0x1000b78] MEM[0x2003f25] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f25 ← 0x31[XOR @0x1000b78] MEM[0x2003f26] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x00[XOR @0x1000b78] MEM[0x2003f27] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x01[XOR @0x1000b78] MEM[0x2003f28] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x02[XOR @0x1000b78] MEM[0x2003f29] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f29 ← 0x33[XOR @0x1000b78] MEM[0x2003f2a] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x31[XOR @0x1000b78] MEM[0x2003f2b] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x02[XOR @0x1000b78] MEM[0x2003f2c] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2c ← 0x30[XOR @0x1000b78] MEM[0x2003f2d] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x33[XOR @0x1000b78] MEM[0x2003f2e] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x00[XOR @0x1000b78] MEM[0x2003f2f] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2f ← 0x03[XOR @0x1000b78] MEM[0x2003f30] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x01[XOR @0x1000b78] MEM[0x2003f31] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f31 ← 0x01[XOR @0x1000b78] MEM[0x2003f32] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x31[XOR @0x1000b78] MEM[0x2003f33] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f33 ← 0x33[XOR @0x1000b78] MEM[0x2003f34] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x33[XOR @0x1000b78] MEM[0x2003f35] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x33[XOR @0x1000b78] MEM[0x2003f36] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x01[STATE] ESI ← 0x30[HOOK MOV] @0x01000c78: mov esi, 0x2b[XOR @0x1000c8c] MEM[0x2003f20] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01000c92: cmp esi, 0x57[XOR @0x1000c8c] MEM[0x2003f21] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x01[XOR @0x1000c8c] MEM[0x2003f22] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x00[XOR @0x1000c8c] MEM[0x2003f23] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x31[XOR @0x1000c8c] MEM[0x2003f24] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x01[XOR @0x1000c8c] MEM[0x2003f25] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f25 ← 0x30[XOR @0x1000c8c] MEM[0x2003f26] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x00[XOR @0x1000c8c] MEM[0x2003f27] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x30[XOR @0x1000c8c] MEM[0x2003f28] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x03[XOR @0x1000c8c] MEM[0x2003f29] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x03[XOR @0x1000c8c] MEM[0x2003f2a] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x31[XOR @0x1000c8c] MEM[0x2003f2b] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x32[XOR @0x1000c8c] MEM[0x2003f2c] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x33[XOR @0x1000c8c] MEM[0x2003f2d] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x30[XOR @0x1000c8c] MEM[0x2003f2e] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x31[XOR @0x1000c8c] MEM[0x2003f2f] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2f ← 0x31[XOR @0x1000c8c] MEM[0x2003f30] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x32[XOR @0x1000c8c] MEM[0x2003f31] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x31[XOR @0x1000c8c] MEM[0x2003f32] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x00[XOR @0x1000c8c] MEM[0x2003f33] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f33 ← 0x02[XOR @0x1000c8c] MEM[0x2003f34] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f34 ← 0x01[XOR @0x1000c8c] MEM[0x2003f35] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x02[XOR @0x1000c8c] MEM[0x2003f36] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x01[XOR @0x1000c8c] MEM[0x2003f37] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f37 ← 0x32[XOR @0x1000c8c] MEM[0x2003f38] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f38 ← 0x03[XOR @0x1000c8c] MEM[0x2003f39] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f39 ← 0x33[XOR @0x1000c8c] MEM[0x2003f3a] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x00[XOR @0x1000c8c] MEM[0x2003f3b] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3b ← 0x32[XOR @0x1000c8c] MEM[0x2003f3c] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3c ← 0x31[XOR @0x1000c8c] MEM[0x2003f3d] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3d ← 0x31[XOR @0x1000c8c] MEM[0x2003f3e] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x00[XOR @0x1000c8c] MEM[0x2003f3f] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3f ← 0x31[XOR @0x1000c8c] MEM[0x2003f40] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f40 ← 0x00[XOR @0x1000c8c] MEM[0x2003f41] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f41 ← 0x31[XOR @0x1000c8c] MEM[0x2003f42] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f42 ← 0x01[XOR @0x1000c8c] MEM[0x2003f43] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f43 ← 0x03[XOR @0x1000c8c] MEM[0x2003f44] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f44 ← 0x31[XOR @0x1000c8c] MEM[0x2003f45] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f45 ← 0x30[XOR @0x1000c8c] MEM[0x2003f46] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f46 ← 0x30[XOR @0x1000c8c] MEM[0x2003f47] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f47 ← 0x31[XOR @0x1000c8c] MEM[0x2003f48] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f48 ← 0x31[XOR @0x1000c8c] MEM[0x2003f49] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f49 ← 0x01[XOR @0x1000c8c] MEM[0x2003f4a] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f4a ← 0x30[XOR @0x1000c8c] MEM[0x2003f4b] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f4b ← 0x33[STATE] ESI ← 0x33[HOOK MOV] @0x010014e2: mov esi, 0x18[XOR @0x10014f6] MEM[0x2003f20] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x010014fc: cmp esi, 0x31[XOR @0x10014f6] MEM[0x2003f21] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x32[XOR @0x10014f6] MEM[0x2003f22] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x00[XOR @0x10014f6] MEM[0x2003f23] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x03[XOR @0x10014f6] MEM[0x2003f24] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x30[XOR @0x10014f6] MEM[0x2003f25] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x01[XOR @0x10014f6] MEM[0x2003f26] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x00[XOR @0x10014f6] MEM[0x2003f27] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x01[XOR @0x10014f6] MEM[0x2003f28] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x03[XOR @0x10014f6] MEM[0x2003f29] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x32[XOR @0x10014f6] MEM[0x2003f2a] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x30[XOR @0x10014f6] MEM[0x2003f2b] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x31[XOR @0x10014f6] MEM[0x2003f2c] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x02[XOR @0x10014f6] MEM[0x2003f2d] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2d ← 0x00[XOR @0x10014f6] MEM[0x2003f2e] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x01[XOR @0x10014f6] MEM[0x2003f2f] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x00[XOR @0x10014f6] MEM[0x2003f30] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x03[XOR @0x10014f6] MEM[0x2003f31] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x30[XOR @0x10014f6] MEM[0x2003f32] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x30[XOR @0x10014f6] MEM[0x2003f33] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f33 ← 0x31[XOR @0x10014f6] MEM[0x2003f34] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x01[XOR @0x10014f6] MEM[0x2003f35] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f35 ← 0x00[XOR @0x10014f6] MEM[0x2003f36] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x01[XOR @0x10014f6] MEM[0x2003f37] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x31[XOR @0x10014f6] MEM[0x2003f38] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f38 ← 0x31[STATE] ESI ← 0x4A[HOOK MOV] @0x01000624: mov esi, 0x1b[HOOK MOV] @0x01000629: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x0100063f: cmp esi, 0x37[WRITE] @0x2003f21 ← 0x03[WRITE] @0x2003f22 ← 0x31[WRITE] @0x2003f23 ← 0x03[WRITE] @0x2003f24 ← 0x01[WRITE] @0x2003f25 ← 0x01[WRITE] @0x2003f26 ← 0x31[WRITE] @0x2003f27 ← 0x00[WRITE] @0x2003f28 ← 0x00[WRITE] @0x2003f29 ← 0x03[WRITE] @0x2003f2a ← 0x00[WRITE] @0x2003f2b ← 0x01[WRITE] @0x2003f2c ← 0x33[WRITE] @0x2003f2d ← 0x31[WRITE] @0x2003f2e ← 0x00[WRITE] @0x2003f2f ← 0x30[WRITE] @0x2003f30 ← 0x30[WRITE] @0x2003f31 ← 0x30[WRITE] @0x2003f32 ← 0x32[WRITE] @0x2003f33 ← 0x31[WRITE] @0x2003f34 ← 0x30[WRITE] @0x2003f35 ← 0x03[WRITE] @0x2003f36 ← 0x30[WRITE] @0x2003f37 ← 0x32[WRITE] @0x2003f38 ← 0x30[WRITE] @0x2003f39 ← 0x32[WRITE] @0x2003f3a ← 0x31[WRITE] @0x2003f3b ← 0x32[STATE] ESI ← 0x0B[HOOK MOV] @0x010009c3: mov esi, 0x8[XOR @0x10009d7] MEM[0x2003f20] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x010009dd: cmp esi, 0x11[XOR @0x10009d7] MEM[0x2003f21] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x00[XOR @0x10009d7] MEM[0x2003f22] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x31[XOR @0x10009d7] MEM[0x2003f23] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f23 ← 0x02[XOR @0x10009d7] MEM[0x2003f24] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x32[XOR @0x10009d7] MEM[0x2003f25] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x30[XOR @0x10009d7] MEM[0x2003f26] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x31[XOR @0x10009d7] MEM[0x2003f27] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f27 ← 0x30[XOR @0x10009d7] MEM[0x2003f28] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f28 ← 0x30[STATE] ESI ← 0x4B[HOOK MOV] @0x010013cd: mov esi, 0x6[XOR @0x10013e1] MEM[0x2003f20] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x010013e7: cmp esi, 0xd[XOR @0x10013e1] MEM[0x2003f21] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x30[XOR @0x10013e1] MEM[0x2003f22] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x01[XOR @0x10013e1] MEM[0x2003f23] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x01[XOR @0x10013e1] MEM[0x2003f24] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x32[XOR @0x10013e1] MEM[0x2003f25] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f25 ← 0x31[XOR @0x10013e1] MEM[0x2003f26] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x02[STATE] ESI ← 0x32[HOOK MOV] @0x01000fc5: mov esi, 0x13[XOR @0x1000fd9] MEM[0x2003f20] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01000fdf: cmp esi, 0x27[XOR @0x1000fd9] MEM[0x2003f21] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x00[XOR @0x1000fd9] MEM[0x2003f22] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x02[XOR @0x1000fd9] MEM[0x2003f23] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x31[XOR @0x1000fd9] MEM[0x2003f24] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x00[XOR @0x1000fd9] MEM[0x2003f25] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f25 ← 0x01[XOR @0x1000fd9] MEM[0x2003f26] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f26 ← 0x30[XOR @0x1000fd9] MEM[0x2003f27] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x01[XOR @0x1000fd9] MEM[0x2003f28] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f28 ← 0x02[XOR @0x1000fd9] MEM[0x2003f29] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x32[XOR @0x1000fd9] MEM[0x2003f2a] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x31[XOR @0x1000fd9] MEM[0x2003f2b] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x01[XOR @0x1000fd9] MEM[0x2003f2c] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x02[XOR @0x1000fd9] MEM[0x2003f2d] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x31[XOR @0x1000fd9] MEM[0x2003f2e] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2e ← 0x31[XOR @0x1000fd9] MEM[0x2003f2f] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x31[XOR @0x1000fd9] MEM[0x2003f30] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x33[XOR @0x1000fd9] MEM[0x2003f31] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f31 ← 0x01[XOR @0x1000fd9] MEM[0x2003f32] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x02[XOR @0x1000fd9] MEM[0x2003f33] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f33 ← 0x01[STATE] ESI ← 0x24[HOOK MOV] @0x01000384: mov esi, 0x26[XOR @0x1000398] MEM[0x2003f20] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x0100039e: cmp esi, 0x4d[XOR @0x1000398] MEM[0x2003f21] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x31[XOR @0x1000398] MEM[0x2003f22] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x33[XOR @0x1000398] MEM[0x2003f23] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x30[XOR @0x1000398] MEM[0x2003f24] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x30[XOR @0x1000398] MEM[0x2003f25] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x32[XOR @0x1000398] MEM[0x2003f26] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x30[XOR @0x1000398] MEM[0x2003f27] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x03[XOR @0x1000398] MEM[0x2003f28] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x02[XOR @0x1000398] MEM[0x2003f29] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x33[XOR @0x1000398] MEM[0x2003f2a] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x00[XOR @0x1000398] MEM[0x2003f2b] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x32[XOR @0x1000398] MEM[0x2003f2c] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x32[XOR @0x1000398] MEM[0x2003f2d] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x01[XOR @0x1000398] MEM[0x2003f2e] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x03[XOR @0x1000398] MEM[0x2003f2f] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2f ← 0x01[XOR @0x1000398] MEM[0x2003f30] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f30 ← 0x30[XOR @0x1000398] MEM[0x2003f31] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x03[XOR @0x1000398] MEM[0x2003f32] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x31[XOR @0x1000398] MEM[0x2003f33] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x01[XOR @0x1000398] MEM[0x2003f34] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f34 ← 0x02[XOR @0x1000398] MEM[0x2003f35] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f35 ← 0x31[XOR @0x1000398] MEM[0x2003f36] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f36 ← 0x31[XOR @0x1000398] MEM[0x2003f37] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x31[XOR @0x1000398] MEM[0x2003f38] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f38 ← 0x31[XOR @0x1000398] MEM[0x2003f39] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f39 ← 0x02[XOR @0x1000398] MEM[0x2003f3a] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3a ← 0x32[XOR @0x1000398] MEM[0x2003f3b] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3b ← 0x03[XOR @0x1000398] MEM[0x2003f3c] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3c ← 0x30[XOR @0x1000398] MEM[0x2003f3d] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3d ← 0x33[XOR @0x1000398] MEM[0x2003f3e] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x31[XOR @0x1000398] MEM[0x2003f3f] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3f ← 0x00[XOR @0x1000398] MEM[0x2003f40] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f40 ← 0x31[XOR @0x1000398] MEM[0x2003f41] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f41 ← 0x00[XOR @0x1000398] MEM[0x2003f42] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f42 ← 0x03[XOR @0x1000398] MEM[0x2003f43] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f43 ← 0x31[XOR @0x1000398] MEM[0x2003f44] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f44 ← 0x32[XOR @0x1000398] MEM[0x2003f45] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f45 ← 0x00[XOR @0x1000398] MEM[0x2003f46] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f46 ← 0x03[STATE] ESI ← 0x51[HOOK MOV] @0x01000de8: mov esi, 0x15[XOR @0x1000dfc] MEM[0x2003f20] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000e02: cmp esi, 0x2b[XOR @0x1000dfc] MEM[0x2003f21] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x00[XOR @0x1000dfc] MEM[0x2003f22] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x02[XOR @0x1000dfc] MEM[0x2003f23] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x01[XOR @0x1000dfc] MEM[0x2003f24] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x32[XOR @0x1000dfc] MEM[0x2003f25] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x00[XOR @0x1000dfc] MEM[0x2003f26] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x33[XOR @0x1000dfc] MEM[0x2003f27] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x33[XOR @0x1000dfc] MEM[0x2003f28] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x31[XOR @0x1000dfc] MEM[0x2003f29] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x02[XOR @0x1000dfc] MEM[0x2003f2a] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x00[XOR @0x1000dfc] MEM[0x2003f2b] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x03[XOR @0x1000dfc] MEM[0x2003f2c] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x32[XOR @0x1000dfc] MEM[0x2003f2d] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x02[XOR @0x1000dfc] MEM[0x2003f2e] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2e ← 0x32[XOR @0x1000dfc] MEM[0x2003f2f] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2f ← 0x33[XOR @0x1000dfc] MEM[0x2003f30] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x30[XOR @0x1000dfc] MEM[0x2003f31] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f31 ← 0x00[XOR @0x1000dfc] MEM[0x2003f32] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x00[XOR @0x1000dfc] MEM[0x2003f33] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x30[XOR @0x1000dfc] MEM[0x2003f34] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x03[XOR @0x1000dfc] MEM[0x2003f35] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x01[STATE] ESI ← 0x4D[HOOK MOV] @0x0100116c: mov esi, 0x1d[XOR @0x1001180] MEM[0x2003f20] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01001186: cmp esi, 0x3b[XOR @0x1001180] MEM[0x2003f21] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f21 ← 0x31[XOR @0x1001180] MEM[0x2003f22] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x02[XOR @0x1001180] MEM[0x2003f23] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x30[XOR @0x1001180] MEM[0x2003f24] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x32[XOR @0x1001180] MEM[0x2003f25] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x03[XOR @0x1001180] MEM[0x2003f26] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x02[XOR @0x1001180] MEM[0x2003f27] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x01[XOR @0x1001180] MEM[0x2003f28] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x31[XOR @0x1001180] MEM[0x2003f29] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f29 ← 0x01[XOR @0x1001180] MEM[0x2003f2a] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2a ← 0x31[XOR @0x1001180] MEM[0x2003f2b] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x32[XOR @0x1001180] MEM[0x2003f2c] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x33[XOR @0x1001180] MEM[0x2003f2d] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x32[XOR @0x1001180] MEM[0x2003f2e] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2e ← 0x01[XOR @0x1001180] MEM[0x2003f2f] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x33[XOR @0x1001180] MEM[0x2003f30] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x32[XOR @0x1001180] MEM[0x2003f31] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f31 ← 0x00[XOR @0x1001180] MEM[0x2003f32] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f32 ← 0x03[XOR @0x1001180] MEM[0x2003f33] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x01[XOR @0x1001180] MEM[0x2003f34] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f34 ← 0x01[XOR @0x1001180] MEM[0x2003f35] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f35 ← 0x31[XOR @0x1001180] MEM[0x2003f36] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f36 ← 0x03[XOR @0x1001180] MEM[0x2003f37] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f37 ← 0x32[XOR @0x1001180] MEM[0x2003f38] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f38 ← 0x33[XOR @0x1001180] MEM[0x2003f39] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f39 ← 0x03[XOR @0x1001180] MEM[0x2003f3a] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3a ← 0x03[XOR @0x1001180] MEM[0x2003f3b] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3b ← 0x02[XOR @0x1001180] MEM[0x2003f3c] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3c ← 0x01[XOR @0x1001180] MEM[0x2003f3d] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3d ← 0x01[STATE] ESI ← 0x64[HOOK MOV] @0x01000a50: mov esi, 0x16[XOR @0x1000a64] MEM[0x2003f20] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01000a6a: cmp esi, 0x2d[XOR @0x1000a64] MEM[0x2003f21] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x03[XOR @0x1000a64] MEM[0x2003f22] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x31[XOR @0x1000a64] MEM[0x2003f23] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x33[XOR @0x1000a64] MEM[0x2003f24] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x31[XOR @0x1000a64] MEM[0x2003f25] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x01[XOR @0x1000a64] MEM[0x2003f26] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f26 ← 0x03[XOR @0x1000a64] MEM[0x2003f27] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x00[XOR @0x1000a64] MEM[0x2003f28] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x00[XOR @0x1000a64] MEM[0x2003f29] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x01[XOR @0x1000a64] MEM[0x2003f2a] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x00[XOR @0x1000a64] MEM[0x2003f2b] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x32[XOR @0x1000a64] MEM[0x2003f2c] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x30[XOR @0x1000a64] MEM[0x2003f2d] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2d ← 0x03[XOR @0x1000a64] MEM[0x2003f2e] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2e ← 0x33[XOR @0x1000a64] MEM[0x2003f2f] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x33[XOR @0x1000a64] MEM[0x2003f30] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x31[XOR @0x1000a64] MEM[0x2003f31] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f31 ← 0x31[XOR @0x1000a64] MEM[0x2003f32] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f32 ← 0x32[XOR @0x1000a64] MEM[0x2003f33] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x00[XOR @0x1000a64] MEM[0x2003f34] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x31[XOR @0x1000a64] MEM[0x2003f35] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f35 ← 0x02[XOR @0x1000a64] MEM[0x2003f36] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x03[STATE] ESI ← 0x5A[HOOK MOV] @0x010004e9: mov esi, 0x4[XOR @0x10004fd] MEM[0x2003f20] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01000503: cmp esi, 0x9[XOR @0x10004fd] MEM[0x2003f21] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x02[XOR @0x10004fd] MEM[0x2003f22] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x32[XOR @0x10004fd] MEM[0x2003f23] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f23 ← 0x33[XOR @0x10004fd] MEM[0x2003f24] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x31[STATE] ESI ← 0x3A[HOOK MOV] @0x01000965: mov esi, 0x2[XOR @0x1000979] MEM[0x2003f20] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x0100097f: cmp esi, 0x5[XOR @0x1000979] MEM[0x2003f21] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x31[XOR @0x1000979] MEM[0x2003f22] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x03[STATE] ESI ← 0x04[HOOK MOV] @0x01000c48: mov esi, 0xa[HOOK MOV] @0x01000c4d: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01000c63: cmp esi, 0x15[WRITE] @0x2003f21 ← 0x03[WRITE] @0x2003f22 ← 0x33[WRITE] @0x2003f23 ← 0x30[WRITE] @0x2003f24 ← 0x02[WRITE] @0x2003f25 ← 0x32[WRITE] @0x2003f26 ← 0x32[WRITE] @0x2003f27 ← 0x31[WRITE] @0x2003f28 ← 0x32[WRITE] @0x2003f29 ← 0x01[WRITE] @0x2003f2a ← 0x31[STATE] ESI ← 0x26[HOOK MOV] @0x0100087a: mov esi, 0x9[XOR @0x100088e] MEM[0x2003f20] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x02[HOOK CMP] @0x01000894: cmp esi, 0x13[XOR @0x100088e] MEM[0x2003f21] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x32[XOR @0x100088e] MEM[0x2003f22] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x01[XOR @0x100088e] MEM[0x2003f23] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x00[XOR @0x100088e] MEM[0x2003f24] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x01[XOR @0x100088e] MEM[0x2003f25] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x01[XOR @0x100088e] MEM[0x2003f26] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x01[XOR @0x100088e] MEM[0x2003f27] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x00[XOR @0x100088e] MEM[0x2003f28] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x03[XOR @0x100088e] MEM[0x2003f29] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x33[STATE] ESI ← 0x35[HOOK MOV] @0x01000b35: mov esi, 0x24[XOR @0x1000b49] MEM[0x2003f20] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000b4f: cmp esi, 0x49[XOR @0x1000b49] MEM[0x2003f21] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x32[XOR @0x1000b49] MEM[0x2003f22] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x02[XOR @0x1000b49] MEM[0x2003f23] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x31[XOR @0x1000b49] MEM[0x2003f24] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x30[XOR @0x1000b49] MEM[0x2003f25] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x00[XOR @0x1000b49] MEM[0x2003f26] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x31[XOR @0x1000b49] MEM[0x2003f27] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f27 ← 0x33[XOR @0x1000b49] MEM[0x2003f28] 0x03 ^ AL(0x00) → 0x03寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x03[XOR @0x1000b49] MEM[0x2003f29] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x31[XOR @0x1000b49] MEM[0x2003f2a] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x31[XOR @0x1000b49] MEM[0x2003f2b] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x02[XOR @0x1000b49] MEM[0x2003f2c] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x02[XOR @0x1000b49] MEM[0x2003f2d] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x01[XOR @0x1000b49] MEM[0x2003f2e] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x02[XOR @0x1000b49] MEM[0x2003f2f] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x03[XOR @0x1000b49] MEM[0x2003f30] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x31[XOR @0x1000b49] MEM[0x2003f31] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x00[XOR @0x1000b49] MEM[0x2003f32] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f32 ← 0x01[XOR @0x1000b49] MEM[0x2003f33] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x03[XOR @0x1000b49] MEM[0x2003f34] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f34 ← 0x00[XOR @0x1000b49] MEM[0x2003f35] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f35 ← 0x33[XOR @0x1000b49] MEM[0x2003f36] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f36 ← 0x01[XOR @0x1000b49] MEM[0x2003f37] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x30[XOR @0x1000b49] MEM[0x2003f38] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f38 ← 0x32[XOR @0x1000b49] MEM[0x2003f39] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f39 ← 0x01[XOR @0x1000b49] MEM[0x2003f3a] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3a ← 0x00[XOR @0x1000b49] MEM[0x2003f3b] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3b ← 0x33[XOR @0x1000b49] MEM[0x2003f3c] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3c ← 0x01[XOR @0x1000b49] MEM[0x2003f3d] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3d ← 0x00[XOR @0x1000b49] MEM[0x2003f3e] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3e ← 0x32[XOR @0x1000b49] MEM[0x2003f3f] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3f ← 0x00[XOR @0x1000b49] MEM[0x2003f40] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f40 ← 0x02[XOR @0x1000b49] MEM[0x2003f41] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f41 ← 0x01[XOR @0x1000b49] MEM[0x2003f42] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f42 ← 0x33[XOR @0x1000b49] MEM[0x2003f43] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f43 ← 0x03[XOR @0x1000b49] MEM[0x2003f44] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f44 ← 0x33[STATE] ESI ← 0x46[HOOK MOV] @0x01000f96: mov esi, 0x2c[XOR @0x1000faa] MEM[0x2003f20] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000fb0: cmp esi, 0x59[XOR @0x1000faa] MEM[0x2003f21] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x30[XOR @0x1000faa] MEM[0x2003f22] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x02[XOR @0x1000faa] MEM[0x2003f23] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x01[XOR @0x1000faa] MEM[0x2003f24] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x00[XOR @0x1000faa] MEM[0x2003f25] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x02[XOR @0x1000faa] MEM[0x2003f26] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x30[XOR @0x1000faa] MEM[0x2003f27] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x33[XOR @0x1000faa] MEM[0x2003f28] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x01[XOR @0x1000faa] MEM[0x2003f29] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x01[XOR @0x1000faa] MEM[0x2003f2a] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x02[XOR @0x1000faa] MEM[0x2003f2b] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2b ← 0x03[XOR @0x1000faa] MEM[0x2003f2c] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x03[XOR @0x1000faa] MEM[0x2003f2d] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x03[XOR @0x1000faa] MEM[0x2003f2e] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2e ← 0x01[XOR @0x1000faa] MEM[0x2003f2f] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2f ← 0x00[XOR @0x1000faa] MEM[0x2003f30] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x32[XOR @0x1000faa] MEM[0x2003f31] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f31 ← 0x01[XOR @0x1000faa] MEM[0x2003f32] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f32 ← 0x01[XOR @0x1000faa] MEM[0x2003f33] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f33 ← 0x31[XOR @0x1000faa] MEM[0x2003f34] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f34 ← 0x01[XOR @0x1000faa] MEM[0x2003f35] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x32[XOR @0x1000faa] MEM[0x2003f36] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x30[XOR @0x1000faa] MEM[0x2003f37] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f37 ← 0x31[XOR @0x1000faa] MEM[0x2003f38] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f38 ← 0x00[XOR @0x1000faa] MEM[0x2003f39] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f39 ← 0x31[XOR @0x1000faa] MEM[0x2003f3a] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3a ← 0x31[XOR @0x1000faa] MEM[0x2003f3b] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3b ← 0x33[XOR @0x1000faa] MEM[0x2003f3c] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3c ← 0x30[XOR @0x1000faa] MEM[0x2003f3d] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3d ← 0x31[XOR @0x1000faa] MEM[0x2003f3e] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f3e ← 0x01[XOR @0x1000faa] MEM[0x2003f3f] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3f ← 0x30[XOR @0x1000faa] MEM[0x2003f40] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f40 ← 0x33[XOR @0x1000faa] MEM[0x2003f41] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f41 ← 0x00[XOR @0x1000faa] MEM[0x2003f42] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f42 ← 0x03[XOR @0x1000faa] MEM[0x2003f43] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f43 ← 0x30[XOR @0x1000faa] MEM[0x2003f44] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f44 ← 0x33[XOR @0x1000faa] MEM[0x2003f45] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f45 ← 0x03[XOR @0x1000faa] MEM[0x2003f46] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f46 ← 0x33[XOR @0x1000faa] MEM[0x2003f47] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f47 ← 0x02[XOR @0x1000faa] MEM[0x2003f48] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f48 ← 0x32[XOR @0x1000faa] MEM[0x2003f49] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f49 ← 0x32[XOR @0x1000faa] MEM[0x2003f4a] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f4a ← 0x32[XOR @0x1000faa] MEM[0x2003f4b] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f4b ← 0x01[XOR @0x1000faa] MEM[0x2003f4c] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f4c ← 0x32[STATE] ESI ← 0x60[HOOK MOV] @0x010015f6: mov esi, 0x2[XOR @0x100160a] MEM[0x2003f20] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x01001610: cmp esi, 0x5[XOR @0x100160a] MEM[0x2003f21] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x31[XOR @0x100160a] MEM[0x2003f22] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x02[STATE] ESI ← 0x11[XOR @0x1000d40] MEM[0x2003f20] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x01000d46: cmp esi, 0x23[XOR @0x1000d40] MEM[0x2003f21] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x30[XOR @0x1000d40] MEM[0x2003f22] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x33[XOR @0x1000d40] MEM[0x2003f23] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x00[XOR @0x1000d40] MEM[0x2003f24] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x32[XOR @0x1000d40] MEM[0x2003f25] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x32[XOR @0x1000d40] MEM[0x2003f26] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f26 ← 0x01[XOR @0x1000d40] MEM[0x2003f27] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x33[XOR @0x1000d40] MEM[0x2003f28] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f28 ← 0x30[XOR @0x1000d40] MEM[0x2003f29] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x30[XOR @0x1000d40] MEM[0x2003f2a] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2a ← 0x31[XOR @0x1000d40] MEM[0x2003f2b] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x33[XOR @0x1000d40] MEM[0x2003f2c] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2c ← 0x32[XOR @0x1000d40] MEM[0x2003f2d] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2d ← 0x02[XOR @0x1000d40] MEM[0x2003f2e] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2e ← 0x31[XOR @0x1000d40] MEM[0x2003f2f] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x33[XOR @0x1000d40] MEM[0x2003f30] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x32[XOR @0x1000d40] MEM[0x2003f31] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x02[STATE] ESI ← 0x07[HOOK MOV] @0x0100156b: mov esi, 0xf[HOOK MOV] @0x01001570: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x01001586: cmp esi, 0x1f[WRITE] @0x2003f21 ← 0x02[WRITE] @0x2003f22 ← 0x31[WRITE] @0x2003f23 ← 0x01[WRITE] @0x2003f24 ← 0x03[WRITE] @0x2003f25 ← 0x33[WRITE] @0x2003f26 ← 0x33[WRITE] @0x2003f27 ← 0x03[WRITE] @0x2003f28 ← 0x01[WRITE] @0x2003f29 ← 0x30[WRITE] @0x2003f2a ← 0x00[WRITE] @0x2003f2b ← 0x02[WRITE] @0x2003f2c ← 0x01[WRITE] @0x2003f2d ← 0x32[WRITE] @0x2003f2e ← 0x00[WRITE] @0x2003f2f ← 0x32[STATE] ESI ← 0x3E[HOOK MOV] @0x01000bed: mov esi, 0x22[HOOK MOV] @0x01000bf2: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x01000c08: cmp esi, 0x45[WRITE] @0x2003f21 ← 0x32[WRITE] @0x2003f22 ← 0x02[WRITE] @0x2003f23 ← 0x02[WRITE] @0x2003f24 ← 0x30[WRITE] @0x2003f25 ← 0x31[WRITE] @0x2003f26 ← 0x01[WRITE] @0x2003f27 ← 0x31[WRITE] @0x2003f28 ← 0x33[WRITE] @0x2003f29 ← 0x31[WRITE] @0x2003f2a ← 0x32[WRITE] @0x2003f2b ← 0x00[WRITE] @0x2003f2c ← 0x01[WRITE] @0x2003f2d ← 0x31[WRITE] @0x2003f2e ← 0x32[WRITE] @0x2003f2f ← 0x30[WRITE] @0x2003f30 ← 0x30[WRITE] @0x2003f31 ← 0x32[WRITE] @0x2003f32 ← 0x30[WRITE] @0x2003f33 ← 0x30[WRITE] @0x2003f34 ← 0x30[WRITE] @0x2003f35 ← 0x01[WRITE] @0x2003f36 ← 0x01[WRITE] @0x2003f37 ← 0x03[WRITE] @0x2003f38 ← 0x00[WRITE] @0x2003f39 ← 0x30[WRITE] @0x2003f3a ← 0x00[WRITE] @0x2003f3b ← 0x01[WRITE] @0x2003f3c ← 0x00[WRITE] @0x2003f3d ← 0x01[WRITE] @0x2003f3e ← 0x33[WRITE] @0x2003f3f ← 0x00[WRITE] @0x2003f40 ← 0x03[WRITE] @0x2003f41 ← 0x30[WRITE] @0x2003f42 ← 0x02[STATE] ESI ← 0x45[HOOK MOV] @0x01001511: mov esi, 0x2[XOR @0x1001525] MEM[0x2003f20] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x0100152b: cmp esi, 0x5[XOR @0x1001525] MEM[0x2003f21] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x30[XOR @0x1001525] MEM[0x2003f22] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f22 ← 0x32[STATE] ESI ← 0x2A[HOOK MOV] @0x01000e7f: mov esi, 0x14[XOR @0x1000e93] MEM[0x2003f20] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x01000e99: cmp esi, 0x29[XOR @0x1000e93] MEM[0x2003f21] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x31[XOR @0x1000e93] MEM[0x2003f22] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x33[XOR @0x1000e93] MEM[0x2003f23] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x01[XOR @0x1000e93] MEM[0x2003f24] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x30[XOR @0x1000e93] MEM[0x2003f25] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f25 ← 0x01[XOR @0x1000e93] MEM[0x2003f26] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x01[XOR @0x1000e93] MEM[0x2003f27] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x30[XOR @0x1000e93] MEM[0x2003f28] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x33[XOR @0x1000e93] MEM[0x2003f29] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x30[XOR @0x1000e93] MEM[0x2003f2a] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x01[XOR @0x1000e93] MEM[0x2003f2b] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x00[XOR @0x1000e93] MEM[0x2003f2c] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2c ← 0x02[XOR @0x1000e93] MEM[0x2003f2d] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x01[XOR @0x1000e93] MEM[0x2003f2e] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2e ← 0x30[XOR @0x1000e93] MEM[0x2003f2f] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x00[XOR @0x1000e93] MEM[0x2003f30] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f30 ← 0x03[XOR @0x1000e93] MEM[0x2003f31] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f31 ← 0x31[XOR @0x1000e93] MEM[0x2003f32] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f32 ← 0x03[XOR @0x1000e93] MEM[0x2003f33] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x32[XOR @0x1000e93] MEM[0x2003f34] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f34 ← 0x02[STATE] ESI ← 0x19[HOOK MOV] @0x010012b5: mov esi, 0xd[XOR @0x10012c9] MEM[0x2003f20] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x010012cf: cmp esi, 0x1b[XOR @0x10012c9] MEM[0x2003f21] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x01[XOR @0x10012c9] MEM[0x2003f22] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x33[XOR @0x10012c9] MEM[0x2003f23] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f23 ← 0x02[XOR @0x10012c9] MEM[0x2003f24] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f24 ← 0x01[XOR @0x10012c9] MEM[0x2003f25] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f25 ← 0x02[XOR @0x10012c9] MEM[0x2003f26] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x33[XOR @0x10012c9] MEM[0x2003f27] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x32[XOR @0x10012c9] MEM[0x2003f28] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x32[XOR @0x10012c9] MEM[0x2003f29] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f29 ← 0x31[XOR @0x10012c9] MEM[0x2003f2a] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x02[XOR @0x10012c9] MEM[0x2003f2b] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x00[XOR @0x10012c9] MEM[0x2003f2c] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x32[XOR @0x10012c9] MEM[0x2003f2d] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x01[STATE] ESI ← 0x4E[HOOK MOV] @0x0100119b: mov esi, 0x26[XOR @0x10011af] MEM[0x2003f20] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x010011b5: cmp esi, 0x4d[XOR @0x10011af] MEM[0x2003f21] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f21 ← 0x03[XOR @0x10011af] MEM[0x2003f22] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f22 ← 0x01[XOR @0x10011af] MEM[0x2003f23] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x30[XOR @0x10011af] MEM[0x2003f24] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f24 ← 0x33[XOR @0x10011af] MEM[0x2003f25] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x03[XOR @0x10011af] MEM[0x2003f26] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x01[XOR @0x10011af] MEM[0x2003f27] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f27 ← 0x30[XOR @0x10011af] MEM[0x2003f28] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x32[XOR @0x10011af] MEM[0x2003f29] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x32[XOR @0x10011af] MEM[0x2003f2a] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2a ← 0x01[XOR @0x10011af] MEM[0x2003f2b] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2b ← 0x01[XOR @0x10011af] MEM[0x2003f2c] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x02[XOR @0x10011af] MEM[0x2003f2d] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x32[XOR @0x10011af] MEM[0x2003f2e] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x33[XOR @0x10011af] MEM[0x2003f2f] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2f ← 0x01[XOR @0x10011af] MEM[0x2003f30] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f30 ← 0x33[XOR @0x10011af] MEM[0x2003f31] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x03[XOR @0x10011af] MEM[0x2003f32] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f32 ← 0x31[XOR @0x10011af] MEM[0x2003f33] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x33[XOR @0x10011af] MEM[0x2003f34] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x03[XOR @0x10011af] MEM[0x2003f35] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f35 ← 0x03[XOR @0x10011af] MEM[0x2003f36] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x33[XOR @0x10011af] MEM[0x2003f37] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f37 ← 0x30[XOR @0x10011af] MEM[0x2003f38] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f38 ← 0x01[XOR @0x10011af] MEM[0x2003f39] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f39 ← 0x03[XOR @0x10011af] MEM[0x2003f3a] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3a ← 0x03[XOR @0x10011af] MEM[0x2003f3b] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3b ← 0x30[XOR @0x10011af] MEM[0x2003f3c] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3c ← 0x33[XOR @0x10011af] MEM[0x2003f3d] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3d ← 0x02[XOR @0x10011af] MEM[0x2003f3e] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3e ← 0x30[XOR @0x10011af] MEM[0x2003f3f] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3f ← 0x33[XOR @0x10011af] MEM[0x2003f40] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f40 ← 0x33[XOR @0x10011af] MEM[0x2003f41] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f41 ← 0x31[XOR @0x10011af] MEM[0x2003f42] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f42 ← 0x01[XOR @0x10011af] MEM[0x2003f43] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f43 ← 0x33[XOR @0x10011af] MEM[0x2003f44] 0x33 ^ AL(0x30) → 0x03寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f44 ← 0x03[XOR @0x10011af] MEM[0x2003f45] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f45 ← 0x30[XOR @0x10011af] MEM[0x2003f46] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f46 ← 0x31[STATE] ESI ← 0x22[HOOK MOV] @0x0100139e: mov esi, 0x9[XOR @0x10013b2] MEM[0x2003f20] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f20 ← 0x31[HOOK CMP] @0x010013b8: cmp esi, 0x13[XOR @0x10013b2] MEM[0x2003f21] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f21 ← 0x02[XOR @0x10013b2] MEM[0x2003f22] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f22 ← 0x00[XOR @0x10013b2] MEM[0x2003f23] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x32[XOR @0x10013b2] MEM[0x2003f24] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x01[XOR @0x10013b2] MEM[0x2003f25] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f25 ← 0x30[XOR @0x10013b2] MEM[0x2003f26] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f26 ← 0x00[XOR @0x10013b2] MEM[0x2003f27] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x03[XOR @0x10013b2] MEM[0x2003f28] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x31[XOR @0x10013b2] MEM[0x2003f29] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x03[STATE] ESI ← 0x5F[HOOK MOV] @0x01000aaa: mov esi, 0x27[HOOK MOV] @0x01000aaf: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x33[HOOK CMP] @0x01000ac5: cmp esi, 0x4f[WRITE] @0x2003f21 ← 0x30[WRITE] @0x2003f22 ← 0x32[WRITE] @0x2003f23 ← 0x00[WRITE] @0x2003f24 ← 0x00[WRITE] @0x2003f25 ← 0x02[WRITE] @0x2003f26 ← 0x02[WRITE] @0x2003f27 ← 0x03[WRITE] @0x2003f28 ← 0x02[WRITE] @0x2003f29 ← 0x33[WRITE] @0x2003f2a ← 0x33[WRITE] @0x2003f2b ← 0x01[WRITE] @0x2003f2c ← 0x02[WRITE] @0x2003f2d ← 0x30[WRITE] @0x2003f2e ← 0x31[WRITE] @0x2003f2f ← 0x02[WRITE] @0x2003f30 ← 0x31[WRITE] @0x2003f31 ← 0x30[WRITE] @0x2003f32 ← 0x02[WRITE] @0x2003f33 ← 0x32[WRITE] @0x2003f34 ← 0x01[WRITE] @0x2003f35 ← 0x33[WRITE] @0x2003f36 ← 0x02[WRITE] @0x2003f37 ← 0x32[WRITE] @0x2003f38 ← 0x30[WRITE] @0x2003f39 ← 0x33[WRITE] @0x2003f3a ← 0x01[WRITE] @0x2003f3b ← 0x02[WRITE] @0x2003f3c ← 0x32[WRITE] @0x2003f3d ← 0x31[WRITE] @0x2003f3e ← 0x32[WRITE] @0x2003f3f ← 0x01[WRITE] @0x2003f40 ← 0x03[WRITE] @0x2003f41 ← 0x02[WRITE] @0x2003f42 ← 0x00[WRITE] @0x2003f43 ← 0x31[WRITE] @0x2003f44 ← 0x31[WRITE] @0x2003f45 ← 0x01[WRITE] @0x2003f46 ← 0x03[WRITE] @0x2003f47 ← 0x03[STATE] ESI ← 0x25[HOOK MOV] @0x01001311: mov esi, 0x1a[XOR @0x1001325] MEM[0x2003f20] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f20 ← 0x32[HOOK CMP] @0x0100132b: cmp esi, 0x35[XOR @0x1001325] MEM[0x2003f21] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f21 ← 0x32[XOR @0x1001325] MEM[0x2003f22] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f22 ← 0x00[XOR @0x1001325] MEM[0x2003f23] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x31[XOR @0x1001325] MEM[0x2003f24] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f24 ← 0x32[XOR @0x1001325] MEM[0x2003f25] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x03[XOR @0x1001325] MEM[0x2003f26] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f26 ← 0x01[XOR @0x1001325] MEM[0x2003f27] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f27 ← 0x01[XOR @0x1001325] MEM[0x2003f28] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f28 ← 0x02[XOR @0x1001325] MEM[0x2003f29] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f29 ← 0x02[XOR @0x1001325] MEM[0x2003f2a] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2a ← 0x02[XOR @0x1001325] MEM[0x2003f2b] 0x01 ^ AL(0x01) → 0x00寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2b ← 0x00[XOR @0x1001325] MEM[0x2003f2c] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2c ← 0x01[XOR @0x1001325] MEM[0x2003f2d] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2d ← 0x33[XOR @0x1001325] MEM[0x2003f2e] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2e ← 0x03[XOR @0x1001325] MEM[0x2003f2f] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2f ← 0x30[XOR @0x1001325] MEM[0x2003f30] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x03[XOR @0x1001325] MEM[0x2003f31] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f31 ← 0x31[XOR @0x1001325] MEM[0x2003f32] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x30[XOR @0x1001325] MEM[0x2003f33] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f33 ← 0x30[XOR @0x1001325] MEM[0x2003f34] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x01[XOR @0x1001325] MEM[0x2003f35] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x01[XOR @0x1001325] MEM[0x2003f36] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f36 ← 0x30[XOR @0x1001325] MEM[0x2003f37] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x32[XOR @0x1001325] MEM[0x2003f38] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f38 ← 0x01[XOR @0x1001325] MEM[0x2003f39] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f39 ← 0x01[XOR @0x1001325] MEM[0x2003f3a] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x02[STATE] ESI ← 0x41[HOOK MOV] @0x01000b05: mov esi, 0x21[HOOK MOV] @0x01000b0a: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x30[HOOK CMP] @0x01000b20: cmp esi, 0x43[WRITE] @0x2003f21 ← 0x32[WRITE] @0x2003f22 ← 0x31[WRITE] @0x2003f23 ← 0x00[WRITE] @0x2003f24 ← 0x33[WRITE] @0x2003f25 ← 0x00[WRITE] @0x2003f26 ← 0x02[WRITE] @0x2003f27 ← 0x33[WRITE] @0x2003f28 ← 0x30[WRITE] @0x2003f29 ← 0x30[WRITE] @0x2003f2a ← 0x03[WRITE] @0x2003f2b ← 0x32[WRITE] @0x2003f2c ← 0x03[WRITE] @0x2003f2d ← 0x33[WRITE] @0x2003f2e ← 0x33[WRITE] @0x2003f2f ← 0x02[WRITE] @0x2003f30 ← 0x32[WRITE] @0x2003f31 ← 0x31[WRITE] @0x2003f32 ← 0x03[WRITE] @0x2003f33 ← 0x30[WRITE] @0x2003f34 ← 0x03[WRITE] @0x2003f35 ← 0x32[WRITE] @0x2003f36 ← 0x00[WRITE] @0x2003f37 ← 0x02[WRITE] @0x2003f38 ← 0x02[WRITE] @0x2003f39 ← 0x33[WRITE] @0x2003f3a ← 0x01[WRITE] @0x2003f3b ← 0x31[WRITE] @0x2003f3c ← 0x01[WRITE] @0x2003f3d ← 0x33[WRITE] @0x2003f3e ← 0x00[WRITE] @0x2003f3f ← 0x30[WRITE] @0x2003f40 ← 0x00[WRITE] @0x2003f41 ← 0x32[STATE] ESI ← 0x53[HOOK MOV] @0x01000f0c: mov esi, 0x2a[XOR @0x1000f20] MEM[0x2003f20] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f20 ← 0x02[HOOK CMP] @0x01000f26: cmp esi, 0x55[XOR @0x1000f20] MEM[0x2003f21] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x33[XOR @0x1000f20] MEM[0x2003f22] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x03[XOR @0x1000f20] MEM[0x2003f23] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f23 ← 0x02[XOR @0x1000f20] MEM[0x2003f24] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x33[XOR @0x1000f20] MEM[0x2003f25] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f25 ← 0x02[XOR @0x1000f20] MEM[0x2003f26] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f26 ← 0x31[XOR @0x1000f20] MEM[0x2003f27] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x30[XOR @0x1000f20] MEM[0x2003f28] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f28 ← 0x32[XOR @0x1000f20] MEM[0x2003f29] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f29 ← 0x03[XOR @0x1000f20] MEM[0x2003f2a] 0x03 ^ AL(0x02) → 0x01寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2a ← 0x01[XOR @0x1000f20] MEM[0x2003f2b] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2b ← 0x03[XOR @0x1000f20] MEM[0x2003f2c] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2c ← 0x33[XOR @0x1000f20] MEM[0x2003f2d] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2d ← 0x01[XOR @0x1000f20] MEM[0x2003f2e] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2e ← 0x30[XOR @0x1000f20] MEM[0x2003f2f] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2f ← 0x03[XOR @0x1000f20] MEM[0x2003f30] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f30 ← 0x31[XOR @0x1000f20] MEM[0x2003f31] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x02[XOR @0x1000f20] MEM[0x2003f32] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f32 ← 0x02[XOR @0x1000f20] MEM[0x2003f33] 0x30 ^ AL(0x30) → 0x00寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x00[XOR @0x1000f20] MEM[0x2003f34] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f34 ← 0x00[XOR @0x1000f20] MEM[0x2003f35] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f35 ← 0x03[XOR @0x1000f20] MEM[0x2003f36] 0x00 ^ AL(0x02) → 0x02寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x02[XOR @0x1000f20] MEM[0x2003f37] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f37 ← 0x00[XOR @0x1000f20] MEM[0x2003f38] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f38 ← 0x02[XOR @0x1000f20] MEM[0x2003f39] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f39 ← 0x33[XOR @0x1000f20] MEM[0x2003f3a] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3a ← 0x02[XOR @0x1000f20] MEM[0x2003f3b] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3b ← 0x33[XOR @0x1000f20] MEM[0x2003f3c] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3c ← 0x01[XOR @0x1000f20] MEM[0x2003f3d] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3d ← 0x31[XOR @0x1000f20] MEM[0x2003f3e] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3e ← 0x33[XOR @0x1000f20] MEM[0x2003f3f] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3f ← 0x32[XOR @0x1000f20] MEM[0x2003f40] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f40 ← 0x33[XOR @0x1000f20] MEM[0x2003f41] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f41 ← 0x33[XOR @0x1000f20] MEM[0x2003f42] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f42 ← 0x31[XOR @0x1000f20] MEM[0x2003f43] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f43 ← 0x02[XOR @0x1000f20] MEM[0x2003f44] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f44 ← 0x03[XOR @0x1000f20] MEM[0x2003f45] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f45 ← 0x32[XOR @0x1000f20] MEM[0x2003f46] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f46 ← 0x30[XOR @0x1000f20] MEM[0x2003f47] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f47 ← 0x32[XOR @0x1000f20] MEM[0x2003f48] 0x32 ^ AL(0x02) → 0x30寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f48 ← 0x30[XOR @0x1000f20] MEM[0x2003f49] 0x32 ^ AL(0x03) → 0x31寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f49 ← 0x31[XOR @0x1000f20] MEM[0x2003f4a] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f4a ← 0x00[STATE] ESI ← 0x2C[HOOK MOV] @0x01000c1d: mov esi, 0x13[XOR @0x1000c31] MEM[0x2003f20] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f20 ← 0x02[HOOK CMP] @0x01000c37: cmp esi, 0x27[XOR @0x1000c31] MEM[0x2003f21] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f21 ← 0x33[XOR @0x1000c31] MEM[0x2003f22] 0x03 ^ AL(0x03) → 0x00寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f22 ← 0x00[XOR @0x1000c31] MEM[0x2003f23] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f23 ← 0x00[XOR @0x1000c31] MEM[0x2003f24] 0x33 ^ AL(0x00) → 0x33寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x33[XOR @0x1000c31] MEM[0x2003f25] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x00[XOR @0x1000c31] MEM[0x2003f26] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x02[XOR @0x1000c31] MEM[0x2003f27] 0x30 ^ AL(0x02) → 0x32寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f27 ← 0x32[XOR @0x1000c31] MEM[0x2003f28] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x01[XOR @0x1000c31] MEM[0x2003f29] 0x03 ^ AL(0x01) → 0x02寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f29 ← 0x02[XOR @0x1000c31] MEM[0x2003f2a] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x30[XOR @0x1000c31] MEM[0x2003f2b] 0x03 ^ AL(0x33) → 0x30寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x30[XOR @0x1000c31] MEM[0x2003f2c] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2c ← 0x01[XOR @0x1000c31] MEM[0x2003f2d] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2d ← 0x32[XOR @0x1000c31] MEM[0x2003f2e] 0x30 ^ AL(0x33) → 0x03寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2e ← 0x03[XOR @0x1000c31] MEM[0x2003f2f] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2f ← 0x32[XOR @0x1000c31] MEM[0x2003f30] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f30 ← 0x33[XOR @0x1000c31] MEM[0x2003f31] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f31 ← 0x01[XOR @0x1000c31] MEM[0x2003f32] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f32 ← 0x30[XOR @0x1000c31] MEM[0x2003f33] 0x00 ^ AL(0x30) → 0x30寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f33 ← 0x30[STATE] ESI ← 0x09[HOOK MOV] @0x010007ef: mov esi, 0x2e[HOOK MOV] @0x010007f4: mov esi, 0x2f[WRITE] @0x2003f20 ← 0x02[HOOK CMP] @0x0100080a: cmp esi, 0x5d[WRITE] @0x2003f21 ← 0x31[WRITE] @0x2003f22 ← 0x31[WRITE] @0x2003f23 ← 0x31[WRITE] @0x2003f24 ← 0x02[WRITE] @0x2003f25 ← 0x02[WRITE] @0x2003f26 ← 0x00[WRITE] @0x2003f27 ← 0x32[WRITE] @0x2003f28 ← 0x33[WRITE] @0x2003f29 ← 0x31[WRITE] @0x2003f2a ← 0x01[WRITE] @0x2003f2b ← 0x31[WRITE] @0x2003f2c ← 0x30[WRITE] @0x2003f2d ← 0x02[WRITE] @0x2003f2e ← 0x01[WRITE] @0x2003f2f ← 0x33[WRITE] @0x2003f30 ← 0x00[WRITE] @0x2003f31 ← 0x01[WRITE] @0x2003f32 ← 0x31[WRITE] @0x2003f33 ← 0x01[WRITE] @0x2003f34 ← 0x01[WRITE] @0x2003f35 ← 0x02[WRITE] @0x2003f36 ← 0x00[WRITE] @0x2003f37 ← 0x00[WRITE] @0x2003f38 ← 0x02[WRITE] @0x2003f39 ← 0x31[WRITE] @0x2003f3a ← 0x33[WRITE] @0x2003f3b ← 0x00[WRITE] @0x2003f3c ← 0x01[WRITE] @0x2003f3d ← 0x30[WRITE] @0x2003f3e ← 0x03[WRITE] @0x2003f3f ← 0x31[WRITE] @0x2003f40 ← 0x02[WRITE] @0x2003f41 ← 0x31[WRITE] @0x2003f42 ← 0x00[WRITE] @0x2003f43 ← 0x02[WRITE] @0x2003f44 ← 0x01[WRITE] @0x2003f45 ← 0x33[WRITE] @0x2003f46 ← 0x03[WRITE] @0x2003f47 ← 0x31[WRITE] @0x2003f48 ← 0x01[WRITE] @0x2003f49 ← 0x30[WRITE] @0x2003f4a ← 0x30[WRITE] @0x2003f4b ← 0x31[WRITE] @0x2003f4c ← 0x03[WRITE] @0x2003f4d ← 0x01[WRITE] @0x2003f4e ← 0x01[STATE] ESI ← 0x3C[HOOK MOV] @0x01001340: mov esi, 0x18[XOR @0x1001354] MEM[0x2003f20] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f20 ← 0x00[HOOK CMP] @0x0100135a: cmp esi, 0x31[XOR @0x1001354] MEM[0x2003f21] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x00[XOR @0x1001354] MEM[0x2003f22] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x02[XOR @0x1001354] MEM[0x2003f23] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x31[XOR @0x1001354] MEM[0x2003f24] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f24 ← 0x03[XOR @0x1001354] MEM[0x2003f25] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f25 ← 0x32[XOR @0x1001354] MEM[0x2003f26] 0x00 ^ AL(0x03) → 0x03寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f26 ← 0x03[XOR @0x1001354] MEM[0x2003f27] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f27 ← 0x03[XOR @0x1001354] MEM[0x2003f28] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f28 ← 0x31[XOR @0x1001354] MEM[0x2003f29] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x00[XOR @0x1001354] MEM[0x2003f2a] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x01[XOR @0x1001354] MEM[0x2003f2b] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x33[XOR @0x1001354] MEM[0x2003f2c] 0x30 ^ AL(0x01) → 0x31寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2c ← 0x31[XOR @0x1001354] MEM[0x2003f2d] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x31[XOR @0x1001354] MEM[0x2003f2e] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2e ← 0x02[XOR @0x1001354] MEM[0x2003f2f] 0x33 ^ AL(0x31) → 0x02寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f2f ← 0x02[XOR @0x1001354] MEM[0x2003f30] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f30 ← 0x01[XOR @0x1001354] MEM[0x2003f31] 0x01 ^ AL(0x30) → 0x31寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f31 ← 0x31[XOR @0x1001354] MEM[0x2003f32] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f32 ← 0x01[XOR @0x1001354] MEM[0x2003f33] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x30[XOR @0x1001354] MEM[0x2003f34] 0x01 ^ AL(0x03) → 0x02寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f34 ← 0x02[XOR @0x1001354] MEM[0x2003f35] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f35 ← 0x03[XOR @0x1001354] MEM[0x2003f36] 0x00 ^ AL(0x01) → 0x01寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f36 ← 0x01[XOR @0x1001354] MEM[0x2003f37] 0x00 ^ AL(0x00) → 0x00寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x00[XOR @0x1001354] MEM[0x2003f38] 0x02 ^ AL(0x00) → 0x02寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f38 ← 0x02[STATE] ESI ← 0x1E[WRITE] @0x2003f1c ← 0x0d[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x31[WRITE] @0x2003f1c ← 0x0e[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f21 ← 0x02[WRITE] @0x2003f1c ← 0x0f[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x00[WRITE] @0x2003f1c ← 0x10[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f23 ← 0x30[WRITE] @0x2003f1c ← 0x11[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f24 ← 0x32[WRITE] @0x2003f1c ← 0x12[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f25 ← 0x33[WRITE] @0x2003f1c ← 0x13[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f26 ← 0x33[WRITE] @0x2003f1c ← 0x14[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f27 ← 0x01[WRITE] @0x2003f1c ← 0x15[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f28 ← 0x32[WRITE] @0x2003f1c ← 0x16[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f29 ← 0x01[WRITE] @0x2003f1c ← 0x17[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x00) → 0x31寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2a ← 0x01[WRITE] @0x2003f1c ← 0x18[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x31[WRITE] @0x2003f1c ← 0x19[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x31) → 0x00寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2c ← 0x00[WRITE] @0x2003f1c ← 0x1a[XOR @0x1000e34] MEM[0x2003f31] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x02[WRITE] @0x2003f1c ← 0x1b[STATE] ESI ← 0x14[HOOK MOV] @0x0100084b: mov esi, 0x29[XOR @0x100085f] MEM[0x2003f20] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f20 ← 0x01[HOOK CMP] @0x01000865: cmp esi, 0x53[XOR @0x100085f] MEM[0x2003f21] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f21 ← 0x32[XOR @0x100085f] MEM[0x2003f22] 0x00 ^ AL(0x31) → 0x31寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f22 ← 0x31[XOR @0x100085f] MEM[0x2003f23] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f23 ← 0x33[XOR @0x100085f] MEM[0x2003f24] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f24 ← 0x33[XOR @0x100085f] MEM[0x2003f25] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f25 ← 0x32[XOR @0x100085f] MEM[0x2003f26] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f26 ← 0x32[XOR @0x100085f] MEM[0x2003f27] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f27 ← 0x33[XOR @0x100085f] MEM[0x2003f28] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f28 ← 0x03[XOR @0x100085f] MEM[0x2003f29] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f29 ← 0x32[XOR @0x100085f] MEM[0x2003f2a] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2a ← 0x32[XOR @0x100085f] MEM[0x2003f2b] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2b ← 0x03[XOR @0x100085f] MEM[0x2003f2c] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f2c ← 0x32[XOR @0x100085f] MEM[0x2003f2d] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2d ← 0x31[XOR @0x100085f] MEM[0x2003f2e] 0x02 ^ AL(0x03) → 0x01寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2e ← 0x01[XOR @0x100085f] MEM[0x2003f2f] 0x02 ^ AL(0x32) → 0x30寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f2f ← 0x30[XOR @0x100085f] MEM[0x2003f30] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f30 ← 0x33[XOR @0x100085f] MEM[0x2003f31] 0x31 ^ AL(0x03) → 0x32寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f31 ← 0x32[XOR @0x100085f] MEM[0x2003f32] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f32 ← 0x33[XOR @0x100085f] MEM[0x2003f33] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f33 ← 0x01[XOR @0x100085f] MEM[0x2003f34] 0x02 ^ AL(0x01) → 0x03寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f34 ← 0x03[XOR @0x100085f] MEM[0x2003f35] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f35 ← 0x33[XOR @0x100085f] MEM[0x2003f36] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f36 ← 0x32[XOR @0x100085f] MEM[0x2003f37] 0x00 ^ AL(0x32) → 0x32寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f37 ← 0x32[XOR @0x100085f] MEM[0x2003f38] 0x02 ^ AL(0x33) → 0x31寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f38 ← 0x31[XOR @0x100085f] MEM[0x2003f39] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f39 ← 0x30[XOR @0x100085f] MEM[0x2003f3a] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3a ← 0x30[XOR @0x100085f] MEM[0x2003f3b] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f3b ← 0x33[XOR @0x100085f] MEM[0x2003f3c] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f3c ← 0x33[XOR @0x100085f] MEM[0x2003f3d] 0x30 ^ AL(0x32) → 0x02寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3d ← 0x02[XOR @0x100085f] MEM[0x2003f3e] 0x03 ^ AL(0x31) → 0x32寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f3e ← 0x32[XOR @0x100085f] MEM[0x2003f3f] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f3f ← 0x01[XOR @0x100085f] MEM[0x2003f40] 0x02 ^ AL(0x30) → 0x32寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f40 ← 0x32[XOR @0x100085f] MEM[0x2003f41] 0x31 ^ AL(0x33) → 0x02寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f41 ← 0x02[XOR @0x100085f] MEM[0x2003f42] 0x00 ^ AL(0x33) → 0x33寫入後 MEM &#x3D; 0x00[WRITE] @0x2003f42 ← 0x33[XOR @0x100085f] MEM[0x2003f43] 0x02 ^ AL(0x02) → 0x00寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f43 ← 0x00[XOR @0x100085f] MEM[0x2003f44] 0x01 ^ AL(0x32) → 0x33寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f44 ← 0x33[XOR @0x100085f] MEM[0x2003f45] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f45 ← 0x32[XOR @0x100085f] MEM[0x2003f46] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f46 ← 0x31[XOR @0x100085f] MEM[0x2003f47] 0x31 ^ AL(0x02) → 0x33寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f47 ← 0x33[XOR @0x100085f] MEM[0x2003f48] 0x01 ^ AL(0x33) → 0x32寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f48 ← 0x32[XOR @0x100085f] MEM[0x2003f49] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f49 ← 0x30[HOOK MOV] @0x01000654: mov esi, 0x1d[XOR @0x1000668] MEM[0x2003f20] 0x01 ^ AL(0x02) → 0x03寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f20 ← 0x03[HOOK CMP] @0x0100066e: cmp esi, 0x3b[XOR @0x1000668] MEM[0x2003f21] 0x32 ^ AL(0x32) → 0x00寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f21 ← 0x00[XOR @0x1000668] MEM[0x2003f22] 0x31 ^ AL(0x01) → 0x30寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f22 ← 0x30[XOR @0x1000668] MEM[0x2003f23] 0x33 ^ AL(0x32) → 0x01寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f23 ← 0x01[XOR @0x1000668] MEM[0x2003f24] 0x33 ^ AL(0x02) → 0x31寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f24 ← 0x31[XOR @0x1000668] MEM[0x2003f25] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f25 ← 0x01[XOR @0x1000668] MEM[0x2003f26] 0x32 ^ AL(0x00) → 0x32寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f26 ← 0x32[XOR @0x1000668] MEM[0x2003f27] 0x33 ^ AL(0x33) → 0x00寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f27 ← 0x00[XOR @0x1000668] MEM[0x2003f28] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f28 ← 0x31[XOR @0x1000668] MEM[0x2003f29] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f29 ← 0x03[XOR @0x1000668] MEM[0x2003f2a] 0x32 ^ AL(0x33) → 0x01寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2a ← 0x01[XOR @0x1000668] MEM[0x2003f2b] 0x03 ^ AL(0x32) → 0x31寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f2b ← 0x31[XOR @0x1000668] MEM[0x2003f2c] 0x32 ^ AL(0x30) → 0x02寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f2c ← 0x02[XOR @0x1000668] MEM[0x2003f2d] 0x31 ^ AL(0x30) → 0x01寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f2d ← 0x01[XOR @0x1000668] MEM[0x2003f2e] 0x01 ^ AL(0x31) → 0x30寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f2e ← 0x30[XOR @0x1000668] MEM[0x2003f2f] 0x30 ^ AL(0x03) → 0x33寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f2f ← 0x33[XOR @0x1000668] MEM[0x2003f30] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f30 ← 0x32[XOR @0x1000668] MEM[0x2003f31] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f31 ← 0x33[XOR @0x1000668] MEM[0x2003f32] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f32 ← 0x30[XOR @0x1000668] MEM[0x2003f33] 0x01 ^ AL(0x00) → 0x01寫入後 MEM &#x3D; 0x01[WRITE] @0x2003f33 ← 0x01[XOR @0x1000668] MEM[0x2003f34] 0x03 ^ AL(0x30) → 0x33寫入後 MEM &#x3D; 0x03[WRITE] @0x2003f34 ← 0x33[XOR @0x1000668] MEM[0x2003f35] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f35 ← 0x32[XOR @0x1000668] MEM[0x2003f36] 0x32 ^ AL(0x31) → 0x03寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f36 ← 0x03[XOR @0x1000668] MEM[0x2003f37] 0x32 ^ AL(0x01) → 0x33寫入後 MEM &#x3D; 0x32[WRITE] @0x2003f37 ← 0x33[XOR @0x1000668] MEM[0x2003f38] 0x31 ^ AL(0x32) → 0x03寫入後 MEM &#x3D; 0x31[WRITE] @0x2003f38 ← 0x03[XOR @0x1000668] MEM[0x2003f39] 0x30 ^ AL(0x00) → 0x30寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f39 ← 0x30[XOR @0x1000668] MEM[0x2003f3a] 0x30 ^ AL(0x31) → 0x01寫入後 MEM &#x3D; 0x30[WRITE] @0x2003f3a ← 0x01[XOR @0x1000668] MEM[0x2003f3b] 0x33 ^ AL(0x03) → 0x30寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3b ← 0x30[XOR @0x1000668] MEM[0x2003f3c] 0x33 ^ AL(0x01) → 0x32寫入後 MEM &#x3D; 0x33[WRITE] @0x2003f3c ← 0x32[XOR @0x1000668] MEM[0x2003f3d] 0x02 ^ AL(0x31) → 0x33寫入後 MEM &#x3D; 0x02[WRITE] @0x2003f3d ← 0x33[HOOK MOV] @0x01000675: mov esi, 0x11[WRITE] @0x2003f04 ← 0x11[WRITE] @0x2003f00 ← 0x407068<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>根據以上可以總結</p><ul><li><p>每次eip 會有0xaa 到0xbb的變動長度進行xor，進行的方式為</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xbb</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> f<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0xaa</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">47</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  結束後將eip更新</p></li><li><p>其中有一段特別的XOR加密，是從0x0d + i 的數值去做xor加密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xbb</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x0d</span><span class="token operator">+</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>??? note “special case”<br>    <pre class="line-numbers language-none"><code class="language-none">[WRITE] @0x2003f1c ← 0x0d[WRITE] @0x2003f20 ← 0x32[WRITE] @0x2003f1c ← 0x0e[WRITE] @0x2003f21 ← 0x02[WRITE] @0x2003f1c ← 0x0f[WRITE] @0x2003f22 ← 0x30[WRITE] @0x2003f1c ← 0x10[WRITE] @0x2003f23 ← 0x00[WRITE] @0x2003f1c ← 0x11[WRITE] @0x2003f24 ← 0x01[WRITE] @0x2003f1c ← 0x12[WRITE] @0x2003f25 ← 0x02[WRITE] @0x2003f1c ← 0x13[WRITE] @0x2003f26 ← 0x30[WRITE] @0x2003f1c ← 0x14[WRITE] @0x2003f27 ← 0x03[WRITE] @0x2003f1c ← 0x15[WRITE] @0x2003f28 ← 0x02[WRITE] @0x2003f1c ← 0x16[WRITE] @0x2003f29 ← 0x00[WRITE] @0x2003f1c ← 0x17[WRITE] @0x2003f2a ← 0x33[WRITE] @0x2003f1c ← 0x18[WRITE] @0x2003f2b ← 0x03[WRITE] @0x2003f1c ← 0x19[WRITE] @0x2003f2c ← 0x31[WRITE] @0x2003f1c ← 0x1a[WRITE] @0x2003f2d ← 0x30[WRITE] @0x2003f1c ← 0x1b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ul><li>剩下的也是進行第一點的加密方式</li></ul><p>綜合以上 可以寫出下面的解密script</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">step <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x4d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token punctuation">,</span><span class="token number">0x59</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x4d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x2e</span><span class="token punctuation">,</span><span class="token number">0x5d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">]</span>step2 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token punctuation">]</span>cipher_bytes <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0x5a</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span>    <span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x2e</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span>    <span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x5d</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span>    <span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">bytearray</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> first    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">47</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">undo_xor_segment</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">bytearray</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x1b</span> <span class="token operator">-</span> <span class="token number">0x0d</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">0x0d</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>cipher_bytes<span class="token punctuation">)</span>    <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span><span class="token punctuation">:</span>        decrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">-</span> a<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>    undo_xor_segment<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>        decrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">-</span> a<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>             <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./assets/unicorn1.png" alt="unicorn1"></p><p>:flags:AIS3{UniCorn_2.1.3_fk_s1ow_BUT_this_chal_cool?}</p><h2 id="AntiDbg"><a href="#AntiDbg" class="headerlink" title="AntiDbg++++"></a>AntiDbg++++</h2><p>賽後解</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> AIS3 </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🎖️ IPAS 資安工程師中級筆記</title>
      <link href="/2025/08/14/IPAS%E8%B3%87%E5%AE%89%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
      <url>/2025/08/14/IPAS%E8%B3%87%E5%AE%89%E5%B7%A5%E7%A8%8B%E5%B8%AB/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="練習網址"><a href="#練習網址" class="headerlink" title="練習網址"></a>練習網址</h1><ul><li><p><a href="https://drive.google.com/drive/folders/1bPd7Y4PRciqAFrMWPBZ29kps5O0Jh6b8">歷屆考古題</a></p></li><li><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSeDBFyHoanvjsETYjJoxQPbWqaahISPuq-r3Gijr15folh1Cg/viewform">iPas_資訊安全防護實務_中級_歷屆考題</a></p></li><li><p><a href="https://docs.google.com/forms/d/e/1FAIpQLScJGNb341MvMUCDjexHGYAlOuQnZGD5JJmaaurSd1g2OVpTjw/viewform">iPas_資訊安全規劃實務_中級_歷屆考題</a> </p></li><li><p><a href="https://hackmd.io/@hiiii/ryOzgaf0a">iPAS資安證照討論區 Q&amp;A</a></p></li><li><p><a href="https://hackmd.io/@Not/iPASInformationSecuritySpecialist">iPAS資訊安全工程師中級筆記</a></p></li></ul><hr><h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><h2 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h2><table><thead><tr><th>7-layout</th><th>Description</th></tr></thead><tbody><tr><td><code>應用層</code></td><td>通訊協定，如：HTTP、FTP</td></tr><tr><td><code>表達層</code></td><td>通訊過程中使用的編碼，如ASCII、JPEG</td></tr><tr><td><code>會議層</code></td><td>控制開啟與關閉的通訊，檢查傳輸的完整性</td></tr><tr><td><code>傳輸層</code></td><td>端對端之間的通訊、確保資料完整性</td></tr><tr><td><code>網路層</code></td><td>不同網路之間的資料傳輸(封包)：ip、ICMP</td></tr><tr><td><code>資料連結層</code></td><td>同一網路上的兩個裝置之間的資料傳輸</td></tr><tr><td><code>實體層</code></td><td>實體設備</td></tr></tbody></table><h2 id="設備"><a href="#設備" class="headerlink" title="設備"></a>設備</h2><h3 id="橋接器"><a href="#橋接器" class="headerlink" title="橋接器"></a>橋接器</h3><ul><li>OSI 資料連接層</li><li>連接兩個不同區域網路的裝置</li></ul><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><table><thead><tr><th>RAID 等級</th><th>最少磁碟數量</th><th>容錯能力</th><th>讀取效能</th><th>寫入效能</th><th>容量利用率</th></tr></thead><tbody><tr><td><strong>RAID 0</strong></td><td>2</td><td>❌ 無容錯</td><td>高</td><td>高</td><td>100%</td></tr><tr><td><strong>RAID 1</strong></td><td>2</td><td>允許 1 顆故障</td><td>高</td><td>低</td><td>50%</td></tr><tr><td><strong>RAID 5</strong></td><td>3</td><td>允許 1 顆故障</td><td>高</td><td>中</td><td>(N-1)&#x2F;N</td></tr><tr><td><strong>RAID 6</strong></td><td>4</td><td>允許 2 顆故障</td><td>高</td><td>低</td><td>(N-2)&#x2F;N</td></tr><tr><td><strong>RAID 10</strong></td><td>4</td><td>允許 1 顆（每個鏡像組）</td><td>高</td><td>高</td><td>50%</td></tr></tbody></table><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="IDS-IPS"><a href="#IDS-IPS" class="headerlink" title="IDS&#x2F;IPS"></a>IDS&#x2F;IPS</h3><table><thead><tr><th>項目</th><th>IDS（入侵偵測系統）</th><th>IPS（入侵防禦系統）</th></tr></thead><tbody><tr><td><strong>全名</strong></td><td>Intrusion Detection System</td><td>Intrusion Prevention System</td></tr><tr><td><strong>主要功能</strong></td><td>偵測並報告惡意或異常行為</td><td>偵測、封鎖並防止惡意或異常行為</td></tr><tr><td><strong>動作</strong></td><td>✅ 監聽與記錄流量<br>✅ 發出警報</td><td>✅ 監聽與記錄流量<br>✅ 發出警報<br>✅ 自動阻止攻擊</td></tr><tr><td><strong>處理方式</strong></td><td>被動（只發出警報，管理員需手動處理）</td><td>主動（自動進行防禦與阻止）</td></tr><tr><td><strong>部署位置</strong></td><td>內部網路或 DMZ</td><td>通常部署在閘道或防火牆之後</td></tr><tr><td><strong>對流量影響</strong></td><td>不影響流量</td><td>可能影響效能（因為需要即時分析和處理）</td></tr><tr><td><strong>處理技術</strong></td><td>- 簽章比對<br>- 行為分析<br>- 協議異常檢測</td><td>- 簽章比對<br>- 行為分析<br>- 協議異常檢測<br>- 即時封鎖</td></tr><tr><td><strong>偵測方法</strong></td><td>- 簽章式偵測<br>- 異常行為偵測</td><td>- 簽章式偵測<br>- 異常行為偵測<br>- 回應式處理</td></tr><tr><td><strong>優勢</strong></td><td>✅ 不會影響網路效能<br>✅ 可用來調查攻擊來源</td><td>✅ 可即時封鎖攻擊<br>✅ 自動處理無需人力介入</td></tr><tr><td><strong>缺點</strong></td><td>❌ 無法即時阻止攻擊<br>❌ 需要人工干預</td><td>❌ 錯誤封鎖可能影響正常服務<br>❌ 可能降低網路效能</td></tr><tr><td><strong>適用場合</strong></td><td>- 需進行攻擊監控與記錄<br>- 調查及取證用途</td><td>- 需即時防禦攻擊<br>- 防止 DDoS 或零時差攻擊</td></tr><tr><td><strong>常見工具</strong></td><td>- Snort<br>- Suricata<br>- Bro（Zeek）</td><td>- Snort（IPS 模式）<br>- Suricata（IPS 模式）<br>- Palo Alto Networks<br>- Cisco Firepower</td></tr></tbody></table><h2 id="攻擊Attack"><a href="#攻擊Attack" class="headerlink" title="攻擊Attack"></a>攻擊Attack</h2><h3 id="中國菜刀-China-chopper"><a href="#中國菜刀-China-chopper" class="headerlink" title="中國菜刀 China chopper"></a>中國菜刀 China chopper</h3><p>通過向網站提交一句簡短的程式碼,來達到向伺服器插入木馬,並最後獲取 webshell</p><hr><h2 id="基礎度量群-Base-Metric-Group"><a href="#基礎度量群-Base-Metric-Group" class="headerlink" title="基礎度量群 Base Metric Group"></a>基礎度量群 Base Metric Group</h2><p>基本度量群組考慮的是與漏洞本身相關的特徵，例如攻擊向量、攻擊複雜度、身份驗證要求、機密性影響、完整性影響和可用性影響等等。</p><h3 id="Threat-Metric-Group"><a href="#Threat-Metric-Group" class="headerlink" title="Threat Metric Group"></a>Threat Metric Group</h3><h3 id="環境度量群-Environmental-Metric-Group"><a href="#環境度量群-Environmental-Metric-Group" class="headerlink" title="環境度量群 Environmental Metric Group"></a>環境度量群 Environmental Metric Group</h3><p>漏洞在特定使用者環境下的影響。這些因素可以包括組織特有的需求和限制，例如資源重要性、完整性要求和可用性要求等等</p><h3 id="Supplemental-Metric-Group"><a href="#Supplemental-Metric-Group" class="headerlink" title="Supplemental Metric Group"></a>Supplemental Metric Group</h3><hr><h2 id="標準"><a href="#標準" class="headerlink" title="標準"></a>標準</h2><h3 id="ISA-IEC-62443"><a href="#ISA-IEC-62443" class="headerlink" title="ISA&#x2F; IEC 62443"></a>ISA&#x2F; IEC 62443</h3><p>ISA&#x2F;IEC 62443 是針對 工業控制系統（ICS） 和 OT 安全的標準，其中 62443-2-1 規範了安全管理系統，適用於 OT 環境</p><table><thead><tr><th>標準</th><th>重點 &#x2F; 焦點</th></tr></thead><tbody><tr><td>IEC 62443-2-1</td><td>建立工業安全管理系統，提供整體安全策略、政策及程序的規範</td></tr><tr><td>IEC 62443-2-4</td><td>建立與維運組織內部安全管理程式</td></tr><tr><td>IEC 62443-3-3</td><td>工業自動化與控制系統的技術安全要求與安全等級</td></tr><tr><td>IEC 62443-2-3</td><td>針對系統整合商或服務提供商的安全管理流程與工程實踐</td></tr><tr><td>IEC 62443-4-2</td><td>產品層面安全要求，重點在安全產品開發與技術要求</td></tr></tbody></table><h3 id="ISO-22301-營運持續管理系統-BCMS"><a href="#ISO-22301-營運持續管理系統-BCMS" class="headerlink" title="ISO 22301 營運持續管理系統(BCMS)"></a>ISO 22301 營運持續管理系統(BCMS)</h3><p>營運持續管理（BCMS）的一般標準流程如下：</p><ol><li>執行營運衝擊分析（BIA）</li><li>建立營運持續策略與架構</li><li>建立營運持續策略與計畫</li><li>演練與測試</li><li>持續改進與回饋修正</li></ol><p>BCM組織策略</p><ul><li><p>接班人計畫（Succession Planning）</p><p>  定義：用於管理階層或關鍵職務之長期培養、接班計畫，著重未來人員培養。</p><p>  特點：適用於公司長期發展及管理階層的接續，並非短期應急使用。</p></li><li><p>代理人計畫（Alternate Personnel Plan</p><p>  定義：在緊急狀況下，立即有替代人員可執行相同職務。 </p><p>  特點：強調立即性的職務代理，快速提升公司短期營運持續能力。</p></li><li><p>工作輪休計畫（Job Rotation）</p><p>  定義：員工定期交換職務以避免舞弊或單點失敗，通常用於內控管理。</p><p>  特點：偏重於內控，降低內部風險，與營運持續有關但非疫情下最直接的做法。</p></li><li><p>員工進修計畫（Employee Training Program）</p><p>  定義：長期提供員工知識技能訓練，以提升競爭力。</p><p>  特點：偏重長期能力培養，對短期疫情緊急應變較無立即效果。</p></li></ul><h3 id="ISO-IEC-27001"><a href="#ISO-IEC-27001" class="headerlink" title="ISO&#x2F;IEC 27001"></a>ISO&#x2F;IEC 27001</h3><p>資訊安全管理系統要求，規範組織如何建立、實施、維護與持續改善ISMS。</p><ul><li><p>資訊安全政策的規範 </p><p>  必須制訂正式的資訊安全政策，並確保員工了解並遵守。<br>  內容應包括：</p><ul><li>組織安全方針</li><li>管理責任</li><li>資料分類和存取控制</li></ul></li><li><p>風險評鑑與風險處理的過程與結果 </p><p>  組織必須保存：</p><ul><li>風險識別結果</li><li>風險分析結果</li><li>風險處理措施及處理結果</li></ul><p>  用來證明風險評估結果及選擇處理方式的合理性。</p></li><li><p>資訊安全目標的內容與監督量測的結果 </p><p>  設定資訊安全目標（如：系統可用性、合規性、存取控制等），定期監控與量測結果，並進行調整和優化。</p></li></ul><h3 id="ISO-IEC-27002"><a href="#ISO-IEC-27002" class="headerlink" title="ISO&#x2F;IEC 27002"></a>ISO&#x2F;IEC 27002</h3><p>資安控制措施實務指引，提供實務上的控制措施建議（例如訪問控制、加密）。</p><ul><li><p>預防（Preventive）</p><p>  目標是防止事件或攻擊的發生。<br>  例子：防火牆設定、存取控制、加密。</p></li><li><p>偵測（Detective）</p><p>  目標是在事件發生時或發生後，能夠即時或快速偵測到。<br>  例子：日誌記錄、異常行為監控、入侵偵測系統（IDS）。</p></li><li><p>矯正（Corrective）</p><p>  目標是在事件發生後，進行修復或回復，降低影響，恢復正常狀態。<br>  例子：資料備份、系統修復、災難復原（DR）。</p></li><li><p>威嚇性（Deterrent）</p><p>  透過警告或懲戒來阻止行為<br>  例：法律聲明、違規處罰、登入警告</p></li><li><p>補償性（Compensating）</p><p>  在其他控制失效時進行替代<br>  例：建立額外防禦機制</p></li></ul><h3 id="ISO-IEC-27003"><a href="#ISO-IEC-27003" class="headerlink" title="ISO&#x2F;IEC 27003"></a>ISO&#x2F;IEC 27003</h3><p>資訊安全管理系統（ISMS）實施指南，提供如何實施與導入ISMS的詳細步驟與方法的指引。</p><h3 id="ISO-IEC-27004"><a href="#ISO-IEC-27004" class="headerlink" title="ISO&#x2F;IEC 27004"></a>ISO&#x2F;IEC 27004</h3><p>資訊安全管理的績效評估指引，用於量測與監控ISMS的績效。</p><h3 id="ISO-IEC-27005-資安風險評鑒"><a href="#ISO-IEC-27005-資安風險評鑒" class="headerlink" title="ISO&#x2F;IEC 27005 資安風險評鑒"></a>ISO&#x2F;IEC 27005 資安風險評鑒</h3><figure markdown="span">  ![](./assets/ISO27001-struct.png)  <figcaption>Source : https://ithelp.ithome.com.tw/articles/10284562</figcaption></figure><ul><li>全景建立<ul><li>明確訂定風險管理的範圍與情境，包括外部法規、內部政策、利害關係人的需求、營運目標等。</li><li>此階段須考量外在環境要求，包括法規要求、產業標準、合約義務等外部因素</li></ul></li><li>風險識別<ul><li>目的： 找出需要保護的資產以及與這些資產相關的威脅、脆弱性與可能產生的後果。</li><li>工作項目：<ul><li>識別組織中所有重要的資訊資產（例如資料、系統、硬體、業務流程、人員等）。</li><li>確認各類威脅（包括自然災害、人為攻擊、操作失誤等）以及這些威脅可能的來源。</li><li>辨認與資產相關的漏洞或控制缺陷，這些漏洞可能被威脅利用。</li><li>描述各項風險事件可能導致的後果或影響。</li></ul></li></ul></li></ul><ol start="2"><li>風險分析<ul><li>目的： 評估風險事件發生的可能性及其對業務造成的潛在影響。<ul><li>工作項目：</li><li>根據已識別的威脅與漏洞，估算事件發生的可能性（可採用定性、定量或半定量的方法）。</li><li>評估若風險事件發生時，可能帶來的損失、衝擊或影響（例如資金損失、業務中斷、聲譽受損等）。</li><li>考量現有的控制措施對降低威脅可能性與影響的效果。</li></ul></li></ul></li><li>風險評估<ul><li>目的： 將風險分析的結果與組織設定的風險接受準則進行比較，以確定哪些風險需要進行處理。</li><li>工作項目：<ul><li>根據分析結果，將風險依據其可能性和影響大小進行排序和分級。</li><li>與預先制定的風險接受標準進行對照，判斷哪些風險在可接受範圍內，哪些需要進一步進行風險處理（如降低、避免、轉移或接受）。</li><li>為後續的風險處理制定優先順序，確保資源能夠聚焦在最重要的風險上。</li></ul></li></ul></li></ol><h4 id="風險處理"><a href="#風險處理" class="headerlink" title="風險處理"></a>風險處理</h4><ul><li><p>🔻 降低風險&#x2F;風險控制 (Risk Mitigation)</p><p>  實施控制措施來減少威脅或降低風險影響。</p></li></ul><p>例如：防火牆設定、漏洞修補、加密資料、嚴格存取控制等。</p><ul><li><p>🔄 轉移風險（風險分擔）</p><p>  將風險移轉給第三方承擔或共同分擔。</p></li></ul><p>例如：購買保險、外包資安監控（MSSP）服務、第三方合作廠商承擔等。</p><ul><li><p>⚠️ 接受風險</p><p>  組織在評估後，認為風險在可承受範圍內，無需額外控制措施。</p></li></ul><p>例如：若風險發生機率或影響極低，可選擇不處理直接接受。</p><ul><li><p>❌ 規避風險（避免風險）</p><p>  停止進行導致風險產生的業務或活動，以消除風險。</p></li></ul><p>例如：直接停止高風險業務或活動。</p><h4 id="風險矩陣"><a href="#風險矩陣" class="headerlink" title="風險矩陣"></a>風險矩陣</h4><figure markdown="span">![](./assets/風險矩陣.jpg)<figcaption>Source : https://www.facebook.com/photo.php?fbid=3227828824203656&id=1668924616760759&set=a.1877463735906845</figcaption></figure><table><thead><tr><th>指標</th><th>定義</th><th>說明</th></tr></thead><tbody><tr><td>RTO（Recovery Time Objective）</td><td>復原時間目標</td><td>系統發生故障後，應在多少時間內完成復原並恢復運行。</td></tr><tr><td>RPO（Recovery Point Objective）</td><td>復原點目標</td><td>系統復原時，最多允許損失多少時間內的資料（即「允許的資料損失範圍」）。</td></tr><tr><td>MTTR（Mean Time to Recovery）</td><td>平均復原時間</td><td>系統在發生故障後，實際平均完成復原所需的時間。</td></tr><tr><td>MTTF（Mean Time to Failure）</td><td>平均失效時間</td><td>系統平均在運行狀態下持續多久才會發生故障（即系統的可靠度）。</td></tr></tbody></table><h3 id="ISO-27701"><a href="#ISO-27701" class="headerlink" title="ISO 27701"></a>ISO 27701</h3><p>專門的個資與隱私資訊管理系統（Privacy Information Management System，PIMS）指引</p><h3 id="ISO-22317-2021-營運衝擊評鑒"><a href="#ISO-22317-2021-營運衝擊評鑒" class="headerlink" title="ISO 22317:2021 營運衝擊評鑒"></a>ISO 22317:2021 營運衝擊評鑒</h3><h4 id="營運衝擊分析（Business-Impact-Analysis-BIA）"><a href="#營運衝擊分析（Business-Impact-Analysis-BIA）" class="headerlink" title="營運衝擊分析（Business Impact Analysis, BIA）"></a>營運衝擊分析（Business Impact Analysis, BIA）</h4><p>鑑別關鍵營運流程及鑑別關鍵營運流程中斷對組織造成之. 傷害或損失、及中斷後回復至可接受的作業水準之回復時間</p><ul><li>財務衝擊（Financial Impact）：分析業務中斷可能造成的直接或間接財務損失。</li><li>商譽衝擊（Reputational Impact）：分析業務中斷可能對公司聲譽造成的影響。</li><li>法規衝擊（Legal Impact）：考慮業務中斷可能引起的法律問題或法規遵循的問題。</li></ul><h3 id="BS-10012"><a href="#BS-10012" class="headerlink" title="BS 10012"></a>BS 10012</h3><p>明確提供個資管理與隱私保護之系統性的規範與實作指引。<br>與 GDPR、個資保護等法規高度相關</p><h3 id="CVSS-v4-0"><a href="#CVSS-v4-0" class="headerlink" title="CVSS v4.0"></a>CVSS v4.0</h3><p>CVSS（Common Vulnerability Scoring System）是一種被廣泛使用的漏洞評分標準，用於衡量資訊安全漏洞的嚴重程度</p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>CVE 的運作機制<br>由 MITRE 維護：</p><p>MITRE Corporation 是美國國防部資助的非營利性研究機構，負責管理 CVE 系統。<br>MITRE 維護 CVE 並與全球資安社群合作，確保漏洞資訊的完整性和一致性。</p><p>CVE 編號的分配：</p><p>CVE 編號由 CVE Numbering Authority（CNA） 分配。<br>CNA 包括資安公司、研究機構、廠商等。<br>MITRE 是「主 CNA」，負責分配給其他 CNA 權限，並管理全局。</p><p>CVE 的完整名稱：</p><p>CVE 的完整名稱是 Common Vulnerabilities and Exposures（常見漏洞與暴露），不是其他名稱。</p><h3 id="OWASP"><a href="#OWASP" class="headerlink" title="OWASP"></a>OWASP</h3><p>專注於「應用程式安全」的開放性組織，主要針對 網頁應用程式 與 API 提供安全性建議和漏洞列表（如 OWASP Top 10）。</p><h3 id="OSSTMM"><a href="#OSSTMM" class="headerlink" title="OSSTMM"></a>OSSTMM</h3><p>是一種針對資訊安全的開源標準，提供一套完整的安全測試框架，涵蓋了不同層面的安全性測試方法。</p><p>OSSTMM 定義的 5 大安全範圍（Scope）：</p><ul><li><p>PHYSSEC（Physical Security） – 涉及實體安全，包括：</p><ul><li>人員安全（Human）</li><li>設備與設施安全（Physical）</li></ul></li><li><p>COMSEC（Communications Security） – 涉及通訊安全，包括：</p><ul><li>網路安全（Data Networks）</li><li>通訊協定安全</li></ul></li><li><p>SPECSEC（Spectrum Security） – 涉及頻譜安全，包括：</p><ul><li>無線電通訊（如 Wi-Fi、藍牙等）</li><li>✅ 只限於「無線（Wireless）」頻譜，不包括有線通訊</li></ul></li><li><p>TRANSEC（Transmission Security） – 涉及傳輸安全，包括：</p><ul><li>資料在傳輸過程中的完整性與加密</li></ul></li><li><p>PROTSEC（Protection Security） – 涉及防護安全，包括：</p><ul><li>資料保護與存取控制</li></ul></li></ul><table><thead><tr><th>測試類型</th><th>說明</th><th>攻擊者 vs 目標認知</th><th>常見應用</th></tr></thead><tbody><tr><td><strong>Blind Test（盲測）</strong></td><td>攻擊者對目標有限了解，目標對攻擊行為不知情</td><td>攻擊者知識低，目標知識低</td><td>滲透測試（Penetration Test）</td></tr><tr><td><strong>Double Blind Test（雙盲測試）</strong></td><td>攻擊者與目標皆無相關知識</td><td>攻擊者知識低，目標知識低</td><td>高度模擬真實攻擊情境</td></tr><tr><td><strong>Gray Box Test（灰箱測試）</strong></td><td>攻擊者對目標有部分了解，目標對攻擊可能知情</td><td>攻擊者知識中，目標知識低或中</td><td>弱點測試（Vulnerability Test）</td></tr><tr><td><strong>Tandem Test（聯合測試）</strong></td><td>攻擊者與目標皆完全了解</td><td>攻擊者知識高，目標知識高</td><td>協同模擬攻擊情境</td></tr><tr><td><strong>Reversal Test（反向測試）</strong></td><td>攻擊者具備高度知識，目標對攻擊完全知情</td><td>攻擊者知識高，目標知識高</td><td>紅隊演練（Red Team Exercise）</td></tr></tbody></table><h3 id="NIST-SP-800-207-零信任架構"><a href="#NIST-SP-800-207-零信任架構" class="headerlink" title="NIST SP 800-207 零信任架構"></a>NIST SP 800-207 零信任架構</h3><blockquote><p>「永不信任，持續驗證」（Never Trust, Always Verify）</p></blockquote><h4 id="邏輯元件"><a href="#邏輯元件" class="headerlink" title="邏輯元件"></a>邏輯元件</h4><figure markdown="span">![](./assets/零信任-邏輯元件.jpg)<figcaption>Source : https://www.ithome.com.tw/tech/152384</figcaption></figure><ul><li><p>政策引擎（Policy Engine, PE）</p><p>  決定是否允許或拒絕存取請求<br>  參考企業的政策與信任評估來決策<br>  位於 政策決策點（PDP）</p></li><li><p>政策管理者（Policy Administrator, PA）</p><p>  負責將 PE 的決策轉化為行動<br>  發出控制指令來實現允許或拒絕存取<br>  位於 政策決策點（PDP）</p></li><li><p>政策落實點（Policy Enforcement Point, PEP）</p><p>  負責實際的存取控制行動<br>  攔阻或允許來自設備或使用者的連線請求<br>  典型的 PEP 裝置：代理伺服器（Proxy）、終端代理（Endpoint Agent）</p></li></ul><h3 id="NIST-資安框架"><a href="#NIST-資安框架" class="headerlink" title="NIST 資安框架"></a>NIST 資安框架</h3><p>資安框架由3種元素組成，包含<strong>框架核心(Framework Core)</strong>、<strong>框架層級(Implementation Tiers)</strong>、<strong>框架輪廓(Profiles)</strong>，以利企業各部門成員可基於同一套文件，詳細討論資安防禦的措施。</p><figure markdown="span">![](./assets/NIST-struct.jpg)<figcaption>Source : https://teamt5.org/tw/posts/what-is-nist-cybersecurity-framework/</figcaption></figure><hr><h2 id="法規"><a href="#法規" class="headerlink" title="法規"></a>法規</h2><h3 id="資通安全管理法施行細則"><a href="#資通安全管理法施行細則" class="headerlink" title="資通安全管理法施行細則"></a>資通安全管理法施行細則</h3><p>本法第十條、第十六條第二項及第十七條第一項所定<strong>資通安全維護計畫</strong></p><ul><li>核心業務及其重要性。</li><li>資通安全政策及目標。</li><li><strong>資通安全推動組織。</strong></li><li><strong>專責人力及經費之配置。</strong></li><li>公務機關資通安全長之配置。</li><li>資通系統及資訊之盤點，並標示核心資通系統及相關資產。</li><li>資通安全風險評估。</li><li>資通安全防護及控制措施。</li><li>資通安全事件通報、應變及演練相關機制。</li><li>資通安全情資之評估及因應機制。</li><li>資通系統或服務委外辦理之管理措施。</li><li>公務機關所屬人員辦理業務涉及資通安全事項之考核機制。</li><li>資通安全維護計畫與實施情形之持續精進及績效管理機制。</li></ul><h2 id="資通安全責任等級分級辦法"><a href="#資通安全責任等級分級辦法" class="headerlink" title="資通安全責任等級分級辦法"></a>資通安全責任等級分級辦法</h2><table><thead><tr><th>資通安全責任等級</th><th>適用情形</th></tr></thead><tbody><tr><td>A 級</td><td>涉及極高機密或關係國家安全的重要資訊</td></tr><tr><td>B 級</td><td>涉及公務機關捐助或研發之敏感科學技術資訊，需要較高層級的保護</td></tr><tr><td>C 級</td><td>一般內部營運資訊，保護要求中等</td></tr><tr><td>D 級</td><td>資訊公開或低風險資訊</td></tr><tr><td>E 級</td><td>資訊安全保護要求最低</td></tr></tbody></table><h2 id="《資通安全事件通報及應變辦法》分級標準"><a href="#《資通安全事件通報及應變辦法》分級標準" class="headerlink" title="《資通安全事件通報及應變辦法》分級標準"></a>《資通安全事件通報及應變辦法》分級標準</h2><p>根據《資通安全事件通報及應變辦法》，資通安全事件通常依影響程度分為 4 個等級：</p><ul><li><p>四級（最嚴重）</p><p>  對國家安全或重要基礎設施造成嚴重影響或癱瘓。<br>  需跨部門、跨國合作進行應變。</p></li><li><p>三級</p><p>  影響關鍵系統或服務，可能造成重大財務損失或資訊外洩。<br>  需跨單位合作進行應變。</p></li><li><p>二級</p><p>  造成部分系統或服務受影響，但可迅速修復，影響範圍有限。</p></li><li><p>一級（最輕微）</p><p>  屬於初步攻擊或可疑活動，尚未造成明顯損害。<br>  可透過內部資安團隊或 IT 團隊進行應變。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Certificate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iPAS </tag>
            
            <tag> 資安工程師 </tag>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sleepy Pickle</title>
      <link href="/2025/08/14/SleepyPickle/"/>
      <url>/2025/08/14/SleepyPickle/</url>
      
        <content type="html"><![CDATA[<h1 id="💤🥒Sleeply-Pickle"><a href="#💤🥒Sleeply-Pickle" class="headerlink" title="💤🥒Sleeply Pickle"></a>💤🥒Sleeply Pickle</h1><p>Demo code : <a href="https://github.com/YunshiuanOAO/SleepyPickle-Demo">https://github.com/YunshiuanOAO/SleepyPickle-Demo</a></p><p>Slido : <a href="https://speakerdeck.com/yunshiuanoao/sleeplypickle">https://speakerdeck.com/yunshiuanoao/sleeplypickle</a></p><h2 id="♻️序列化-Serialization-反序列化-Deserialization"><a href="#♻️序列化-Serialization-反序列化-Deserialization" class="headerlink" title="♻️序列化(Serialization)&#x2F;反序列化(Deserialization)"></a>♻️序列化(Serialization)&#x2F;反序列化(Deserialization)</h2><p>序列化是將一個資料結構或物件轉換成一種可以儲存或交換的格式（如位元組流、JSON、XML 等）。這樣的轉換讓物件能夠寫入檔案、透過網路傳輸，或儲存在資料庫中。</p><p>反序列化則是將儲存的數據或接收到的數據轉換回原始的物件或資料結構。</p><p><img src="/./assets/picklePic.png" alt="alt text"></p><hr><h2 id="🥒-What-is-Pickle"><a href="#🥒-What-is-Pickle" class="headerlink" title="🥒 What is Pickle?"></a>🥒 What is Pickle?</h2><p>Pickle 是 Python 的內建模組，提供了將 Python 物件序列化和反序列化的功能。</p><p>常見用途</p><dl><dt>:    將物件儲存到檔案中，方便之後載入。<br>:    將物件透過網路或其他通道進行傳輸。</dt><dd><strong>快速儲存和載入機器學習模型、配置檔或計算結果</strong>。</dd></dl><p>支援的物件類型</p><dl><dt>:    Pickle 支援多種 Python 內建的資料型態，包括：<br>:    ✔️ 數字（int, float）<br>:    ✔️ 字串（str）<br>:    ✔️ 列表（list）、元組（tuple）、字典（dict）、集合（set）<br>:    ✔️ 自訂類別物件</dt><dd>✔️ 函數</dd></dl><p>Example : </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletoolsdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"scores"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.pkl"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Data has been successfully serialized to data.pkl"</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data.pkl"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    unpickled_data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>unpickled_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output: </p><pre class="line-numbers language-none"><code class="language-none">Data has been successfully serialized to data.pkl&#123;&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 30, &#39;scores&#39;: [88, 92, 95]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用pickletools將pickle執行的內容dump出來</p><pre class="line-numbers language-none"><code class="language-none">    0: (    MARK    1: d        DICT       (MARK at 0)    2: p    PUT        0    5: V    UNICODE    &#39;name&#39;   11: p    PUT        1   14: V    UNICODE    &#39;Alice&#39;   21: p    PUT        2   24: s    SETITEM   25: V    UNICODE    &#39;age&#39;   30: p    PUT        3   33: I    INT        30   37: s    SETITEM   38: V    UNICODE    &#39;scores&#39;   46: p    PUT        4   49: (    MARK   50: l        LIST       (MARK at 49)   51: p    PUT        5   54: I    INT        88   58: a    APPEND   59: I    INT        92   63: a    APPEND   64: I    INT        95   68: a    APPEND   69: s    SETITEM   70: .    STOPhighest protocol among opcodes &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的資訊可以得知，其實Pickle在反序列化的過成就很像一個簡易的堆疊虛擬機在執行，透過Opcode並且在Pickle Virtual Machine執行<br>主要由這三個</p><ul><li><p>指令處理器 (Instruction Processor)</p><p>  從指令流 (byte stream) 中讀取 opcode 與參數，並依序進行解譯與處理。</p><p>  不斷重複「讀取 -&gt; 處理」的流程，直到遇到結束符號（通常是 .）後停止。</p><p>  反序列化結束時，最終留在 stack 頂端的值將作為反序列化結果返回。</p></li><li><p>Stack (堆疊)</p><p>  由 Python 的 list 實作。</p><p>  用於暫時儲存資料、參數以及各種物件。</p><p>  各種 opcode 會操作此堆疊（如推入、彈出、組合容器等）。</p></li><li><p>Memo (備忘錄)</p><p>  由 Python 的 dict 實作。</p><p>  在 PVM 整個生命週期中，負責儲存先前出現過的物件，以便重複引用或避免重複建立。</p><p>  透過索引或序號 (index) 來存取對應物件。</p></li></ul><p>以下為常用的opcode </p><table><thead><tr><th align="center"><strong>指令</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>具體寫法</strong></th><th align="left"><strong>對 stack 的變化</strong></th></tr></thead><tbody><tr><td align="center"><strong>c</strong></td><td align="left">取得一個全局物件或 import 一個模組</td><td align="left"><code>c[module]\n[instance]\n</code></td><td align="left">取得的物件入 stack</td></tr><tr><td align="center"><strong>o</strong></td><td align="left">尋找 stack 中的上一個 MARK，以之間的第一個資料（必須為函數）為 callable，第二個到第 n 個資料為參數，執行該函數（或實例化一個物件）</td><td align="left"><code>o</code></td><td align="left">這個過程中涉及到的資料都出 stack，函數的返回值（或生成的物件）入 stack</td></tr><tr><td align="center"><strong>i</strong></td><td align="left">相當於 c 和 o 的組合，先取得一個全局函數，然後尋找 stack 中的上一個 MARK，並組合之間的資料為元組，再以該元組為參數執行全局函數（或實例化一個物件）</td><td align="left"><code>i[module]\n[callable]\n</code></td><td align="left">這個過程中涉及到的資料都出 stack，函數返回值（或生成的物件）入 stack</td></tr><tr><td align="center"><strong>N</strong></td><td align="left">實例化一個 None</td><td align="left"><code>N</code></td><td align="left">取得的 None 對象入 stack</td></tr><tr><td align="center"><strong>S</strong></td><td align="left">實例化一個字串對象</td><td align="left"><code>S&#39;xxx&#39;\n</code><br>也可使用雙引號或 <code>\&#39;</code> 等 Python 字串形式</td><td align="left">取得的字串對象入 stack</td></tr><tr><td align="center"><strong>V</strong></td><td align="left">實例化一個 Unicode 字串對象</td><td align="left"><code>Vxxx\n</code></td><td align="left">取得的字串對象入 stack</td></tr><tr><td align="center"><strong>I</strong></td><td align="left">實例化一個 int 對象</td><td align="left"><code>Ixxx\n</code></td><td align="left">取得的整數對象入 stack</td></tr><tr><td align="center"><strong>F</strong></td><td align="left">實例化一個 float 對象</td><td align="left"><code>Fx.x\n</code></td><td align="left">取得的浮點數對象入 stack</td></tr><tr><td align="center"><strong>R</strong></td><td align="left">選擇 stack 上的第一個對象作為函數、第二個對象作為參數（第二個對象必須為元組），然後呼叫該函數</td><td align="left"><code>R</code></td><td align="left">函數和參數出 stack，函數的返回值入 stack</td></tr><tr><td align="center"><strong>.</strong></td><td align="left">程式結束，stack 頂的單一元素作為 <code>pickle.loads()</code> 的返回值</td><td align="left"><code>.</code></td><td align="left">無</td></tr><tr><td align="center"><strong>(</strong></td><td align="left">向 stack 中壓入一個 MARK 標記</td><td align="left"><code>(</code></td><td align="left">MARK 標記入 stack</td></tr><tr><td align="center"><strong>t</strong></td><td align="left">尋找 stack 中的上一個 MARK，並組合之間的資料為元組</td><td align="left"><code>t</code></td><td align="left">MARK 標記以及被組合的資料出 stack，生成的元組入 stack</td></tr><tr><td align="center"><strong>)</strong></td><td align="left">向 stack 中直接壓入一個空元組</td><td align="left"><code>)</code></td><td align="left">空元組入 stack</td></tr><tr><td align="center"><strong>l</strong></td><td align="left">尋找 stack 中的上一個 MARK，並組合之間的資料為列表</td><td align="left"><code>l</code></td><td align="left">MARK 標記以及被組合的資料出 stack，生成的列表入 stack</td></tr><tr><td align="center"><strong>]</strong></td><td align="left">向 stack 中直接壓入一個空列表</td><td align="left"><code>]</code></td><td align="left">空列表入 stack</td></tr><tr><td align="center"><strong>d</strong></td><td align="left">尋找 stack 中的上一個 MARK，並組合之間的資料為字典（資料必須有偶數個，即呈 key-value 對）</td><td align="left"><code>d</code></td><td align="left">MARK 標記以及被組合的資料出 stack，生成的字典入 stack</td></tr><tr><td align="center"><strong>}</strong></td><td align="left">向 stack 中直接壓入一個空字典</td><td align="left"><code>&#125;</code></td><td align="left">空字典入 stack</td></tr><tr><td align="center"><strong>p</strong></td><td align="left">將 stack 頂對象儲存至 memo_n</td><td align="left"><code>pn\n</code></td><td align="left">無</td></tr><tr><td align="center"><strong>g</strong></td><td align="left">將 memo_n 的對象壓入 stack</td><td align="left"><code>gn\n</code></td><td align="left">將指定索引的 memo 對象入 stack</td></tr><tr><td align="center"><strong>0</strong></td><td align="left">丟棄 stack 頂對象</td><td align="left"><code>0</code></td><td align="left">stack 頂對象被丟棄</td></tr><tr><td align="center"><strong>b</strong></td><td align="left">使用 stack 中的第一個元素（儲存多個屬性名: 屬性值的字典）對第二個元素（對象實例）進行屬性設置</td><td align="left"><code>b</code></td><td align="left">stack 上第一個元素出 stack；第二個元素（對象）被更新</td></tr><tr><td align="center"><strong>s</strong></td><td align="left">將 stack 的第一個和第二個對象作為 key-value 對，添加或更新到 stack 的第三個對象（必須為列表或字典，列表以數字作為 key）</td><td align="left"><code>s</code></td><td align="left">第一、二個元素出 stack，第三個元素（列表或字典）被更新</td></tr><tr><td align="center"><strong>u</strong></td><td align="left">尋找 stack 中的上一個 MARK，組合之間的資料（必須有偶數個，即 key-value 對）並全部添加或更新到該 MARK 之前的一個對象（必須為字典）</td><td align="left"><code>u</code></td><td align="left">MARK 標記以及被組合的資料出 stack，字典被更新</td></tr><tr><td align="center"><strong>a</strong></td><td align="left">將 stack 的第一個元素 append 到第二個元素（列表）中</td><td align="left"><code>a</code></td><td align="left">stack 頂元素出 stack，第二個元素（列表）被更新</td></tr><tr><td align="center"><strong>e</strong></td><td align="left">尋找 stack 中的上一個 MARK，組合之間的資料並 extends 到該 MARK 之前的一個元素（必須為列表）</td><td align="left"><code>e</code></td><td align="left">MARK 標記以及被組合的資料出 stack，列表被更新</td></tr></tbody></table><hr><h2 id="⚠️What’s-Wrong-with-Pickle"><a href="#⚠️What’s-Wrong-with-Pickle" class="headerlink" title="⚠️What’s Wrong with Pickle ?"></a>⚠️What’s Wrong with Pickle ?</h2><p>Pickle文檔上有出現這一個警告<br><img src="/./assets/image.png" alt="alt text"></p><p>Pickle當中有一個 <code>__reduce__</code> 可以使用，當反序列化時會自動呼叫</p><p>以下範例為製作一個惡意的pickle</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> subprocess<span class="token keyword">class</span> <span class="token class-name">EvilPickle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e <span class="token operator">=</span>  EvilPickle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'evil.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用pickletool 把惡意pickle檔dump出來看看</p><pre class="line-numbers language-none"><code class="language-none">    0: c    GLOBAL     &#39;commands Popen&#39;   16: p    PUT        0   19: (    MARK   20: (        MARK   21: V            UNICODE    &#39;ls&#39;   25: p            PUT        1   28: t            TUPLE      (MARK at 20)   29: p        PUT        2   32: t        TUPLE      (MARK at 19)   33: p    PUT        3   36: R    REDUCE   37: p    PUT        4   40: .    STOPhighest protocol among opcodes &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>執行結果：<br><img src="/./assets/reduce_RCE.png" alt="alt text"></p><p>即可執行<code>ls</code>指令</p><hr><h2 id="💤Sleepy-Pickle"><a href="#💤Sleepy-Pickle" class="headerlink" title="💤Sleepy Pickle"></a>💤Sleepy Pickle</h2><p>利用pickle不安全的特性，將惡意的Bytecode植入使用pickle的模型檔案內。</p><p><img src="/./assets/image-2.png" alt="alt text"><br>有一個針對此攻擊而產生的工具：<a href="https://github.com/trailofbits/fickling">fickling</a></p><p>此工具可以輕易的將想要執行的程式轉成bytecode值入進pickle中，另外也有檢測pickele內的惡意行為功能</p><p>demo:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> models<span class="token keyword">import</span> warnings<span class="token keyword">from</span> fickling<span class="token punctuation">.</span>pytorch <span class="token keyword">import</span> PyTorchModelWrapperwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> models<span class="token punctuation">.</span>mobilenet_v2<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">"mobilenet.pth"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> PyTorchModelWrapper<span class="token punctuation">(</span><span class="token string">"mobilenet.pth"</span><span class="token punctuation">)</span>temp_filename <span class="token operator">=</span> <span class="token string">"temp_filename.pt"</span>result<span class="token punctuation">.</span>inject_payload<span class="token punctuation">(</span>    <span class="token string">"print('Inject successful!')"</span><span class="token punctuation">,</span>    temp_filename<span class="token punctuation">,</span>    injection<span class="token operator">=</span><span class="token string">"insertion"</span><span class="token punctuation">,</span>    overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># Load file with injected payload</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"mobilenet.pth"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>輸出：</p><p><img src="/./assets/image-1.png" alt="alt text"></p><p>在 Hugging face 上在目前常出現的是<code>pytorch_model.bin</code><br><img src="/./assets/image-3.png" alt="alt text"></p><p>pytorch_model.bin是使用PyTorch中的torch.save 函數所生成的二進位檔案，裡面會存 weights, biases, 或者其他parameters，如果將它unzip會有一個data.pkl可以利用(會依照Pytorch不同的版本裡面會包含不同的檔案)</p><p>!!! info</p><pre><code>* PyTorch v0.1.1: Tar file with sys_info, pickle, storages, and tensors* PyTorch v0.1.10: Stacked pickle files* TorchScript v1.0: ZIP file with model.json* TorchScript v1.1: ZIP file with model.json and attributes.pkl* TorchScript v1.3: ZIP file with data.pkl and constants.pkl* TorchScript v1.4: ZIP file with data.pkl, constants.pkl, and version set at 2 or higher (2 pickle files and a folder)* PyTorch v1.3: ZIP file containing data.pkl (1 pickle file)* PyTorch model archive format[ZIP]: ZIP file that includes Python code files and pickle files</code></pre><p><img src="/./assets/image-4.png" alt="alt text"></p><p>!!! warning “PyTorch適用版本”<br>    PyTorch &lt;2.6 在最新 2.6版本中，Pytorch 將 torch.load 的參數weights_only預設為True</p><pre><code>&gt; Also in this release as an important security improvement measure we have changed the default value for weights_only parameter of torch.load. This is a backward compatibility-breaking change, please see this forum post for more details.</code></pre><p>接下來Hacker 會先透過中間人攻擊、供應鏈攻擊、社交工程等手法，將惡意Pickle檔案傳送至受害者的系統，一旦反序列化後有可能會進行以下的惡意攻擊</p><ul><li>修改模型參數</li></ul><p>可以去微調模型的參數讓他輸出出誤導性或有惡意的輸出</p><p>如：<a href="https://rome.baulab.info/">ROME</a></p><p><img src="/./assets/image6.png" alt="alt text"></p><ul><li>釣魚</li></ul><p>可以在每次問答時插入惡意的連結<br><img src="/./assets/image-5.png" alt="alt text"></p><ul><li>埋後門</li><li>XSS</li><li>竊取使用者資料</li><li>竄改資料</li><li>…</li></ul><hr><h2 id="🦾How-To-Prevent"><a href="#🦾How-To-Prevent" class="headerlink" title="🦾How To Prevent"></a>🦾How To Prevent</h2><ul><li>不要使用Pickle，使用 SafeTensors.</li><li>如果一定要使用Pickle，需要使用fickling對pickle進行掃描或者限制unpickler</li></ul><hr><h2 id="📚Reference"><a href="#📚Reference" class="headerlink" title="📚Reference"></a>📚Reference</h2><ul><li><p><a href="https://blog.trailofbits.com/2024/06/11/exploiting-ml-models-with-pickle-file-attacks-part-1/">Exploiting ML models with pickle file attacks: Part 1</a></p></li><li><p><a href="https://blog.trailofbits.com/2024/06/11/exploiting-ml-models-with-pickle-file-attacks-part-2/">Exploiting ML models with pickle file attacks: Part 2</a></p></li><li><p><a href="https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/">Never a dill moment: Exploiting machine learning pickle files</a></p></li><li><p><a href="https://thesisapi.lib.nycu.edu.tw/server/api/core/bitstreams/affc3d4c-9f19-429a-b392-ce8420d7351b/content">Pain Pickle: 繞過 Python 中受限制的 Unpickler 之自動化脅迫生成</a></p></li><li><p><a href="https://www.ithome.com.tw/news/163545">研究人員揭露針對機器學習模型而來的攻擊手法Sleepy Pickle</a></p></li><li><p><a href="https://goodapple.top/archives/1069">Pickle反序列化</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pickle </tag>
            
            <tag> Python </tag>
            
            <tag> Deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reversing.kr Writes up</title>
      <link href="/2025/08/14/Reversing-kr/"/>
      <url>/2025/08/14/Reversing-kr/</url>
      
        <content type="html"><![CDATA[<h1 id="題目總覽"><a href="#題目總覽" class="headerlink" title="題目總覽"></a>題目總覽</h1><ul><li>Easy Crack</li><li>Easy Keygen</li><li>Easy Unpack</li></ul><span id="more"></span><hr><h1 id="Easy-Crack-100"><a href="#Easy-Crack-100" class="headerlink" title="Easy Crack: 100"></a>Easy Crack: 100</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>打開之後會彈出一個視窗，要使用者輸入文字</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>開啟ghidra分析，使用search-&gt;strings</p><p><img src="/./assets/reversing_easy_crackme.png"></p><p>可以看到在00406044位置有一個Congratulation!!字串 跟進去看使用他的函示</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">FUN_00401080</span><span class="token punctuation">(</span>HWND param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  byte bVar1<span class="token punctuation">;</span>  byte <span class="token operator">*</span>pbVar2<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar3<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar4<span class="token punctuation">;</span>  undefined4 <span class="token operator">*</span>puVar5<span class="token punctuation">;</span>  <span class="token keyword">bool</span> bVar6<span class="token punctuation">;</span>  <span class="token keyword">char</span> local_64<span class="token punctuation">;</span>  <span class="token keyword">char</span> local_63<span class="token punctuation">;</span>  <span class="token keyword">char</span> cStack_62<span class="token punctuation">;</span>  byte abStack_61 <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    local_64 <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  puVar5 <span class="token operator">=</span> <span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>local_63<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>iVar3 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span> iVar3 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> iVar3 <span class="token operator">=</span> iVar3 <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span>puVar5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    puVar5 <span class="token operator">=</span> puVar5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>undefined2 <span class="token operator">*</span><span class="token punctuation">)</span>puVar5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>puVar5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">GetDlgItemTextA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_64<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>local_63 <span class="token operator">==</span> <span class="token char">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iVar3 <span class="token operator">=</span> <span class="token function">_strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_63 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_00406078<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar3 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pcVar4 <span class="token operator">=</span> s_AGR3versing_0040606a<span class="token punctuation">;</span>      pbVar2 <span class="token operator">=</span> <span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local_63 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        pcVar4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bVar1 <span class="token operator">=</span> <span class="token operator">*</span>pbVar2<span class="token punctuation">;</span>        bVar6 <span class="token operator">=</span> bVar1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token operator">*</span>pcVar4<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token operator">*</span>pcVar4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>LAB_00401102<span class="token operator">:</span>          iVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>bVar6<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span>bVar6 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LAB_00401107<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        bVar1 <span class="token operator">=</span> pbVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bVar6 <span class="token operator">=</span> bVar1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar4<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar4<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00401102<span class="token punctuation">;</span>        pbVar2 <span class="token operator">=</span> pbVar2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LAB_00401107<span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iVar3 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>local_64 <span class="token operator">==</span> <span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>s_Congratulation_<span class="token operator">!</span><span class="token operator">!</span>_00406044<span class="token punctuation">,</span>s_EasyCrackMe_00406058<span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">EndDialog</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>s_Incorrect_Password_00406030<span class="token punctuation">,</span>s_EasyCrackMe_00406058<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>發現他是在拿我們使用著的輸入去比對，輸入正確會使用MessageBoxA出現Congratulation!!<br>將函示整理一下<br>可以先將</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> local_64<span class="token punctuation">;</span>  <span class="token keyword">char</span> local_63<span class="token punctuation">;</span>  <span class="token keyword">char</span> cStack_62<span class="token punctuation">;</span>  byte abStack_61 <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>合併成</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> user_input <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外原反編譯s_AGR3versing_0040606a跟反組譯過後是不同的，因此需要將0040606a位置的資料手動更新</p><p><a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-getdlgitemtexta">GetDlgItemTextA</a> : 擷取對話方塊中控制項相關聯的標題或文字。</p><pre class="line-numbers language-none"><code class="language-none">UINT GetDlgItemTextA(  [in]  HWND  hDlg,  [in]  int   nIDDlgItem,  [out] LPSTR lpString,  [in]  int   cchMax);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">FUN_00401080</span><span class="token punctuation">(</span>HWND param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  byte bVar1<span class="token punctuation">;</span>  byte <span class="token operator">*</span>pbVar2<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar3<span class="token punctuation">;</span>  undefined4 <span class="token operator">*</span>puVar4<span class="token punctuation">;</span>  <span class="token keyword">bool</span> bVar5<span class="token punctuation">;</span>  <span class="token keyword">char</span> user_input <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    user_input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  puVar4 <span class="token operator">=</span> <span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>user_input <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span>puVar4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    puVar4 <span class="token operator">=</span> puVar4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>undefined2 <span class="token operator">*</span><span class="token punctuation">)</span>puVar4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>puVar4 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">GetDlgItemTextA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>user_input<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user_input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">=</span> <span class="token function">_strncmp</span><span class="token punctuation">(</span>user_input <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span>y_DAT_00406078<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pcVar3 <span class="token operator">=</span> s_R3versing_0040606c<span class="token punctuation">;</span>      pbVar2 <span class="token operator">=</span> <span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>user_input <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        bVar1 <span class="token operator">=</span> <span class="token operator">*</span>pbVar2<span class="token punctuation">;</span>        bVar5 <span class="token operator">=</span> bVar1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token operator">*</span>pcVar3<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token operator">*</span>pcVar3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>LAB_00401102<span class="token operator">:</span>          i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>bVar5<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span>bVar5 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LAB_00401107<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        bVar1 <span class="token operator">=</span> pbVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bVar5 <span class="token operator">=</span> bVar1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00401102<span class="token punctuation">;</span>        pbVar2 <span class="token operator">=</span> pbVar2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        pcVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>pcVar3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>bVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LAB_00401107<span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>user_input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>s_Congratulation_<span class="token operator">!</span><span class="token operator">!</span>_00406044<span class="token punctuation">,</span>s_EasyCrackMe_00406058<span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">EndDialog</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>s_Incorrect_Password_00406030<span class="token punctuation">,</span>s_EasyCrackMe_00406058<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此可以推斷user input內容會是<br>user_input[0] &#x3D; ‘E’<br>user_input[1] &#x3D; ‘a’<br>user_input[2-3] &#x3D; “5y”<br>user_input[4-12] &#x3D; “R3versing”<br>驗證之後即為答案</p><blockquote><p>flag : Ea5yR3versing</p></blockquote><hr><h1 id="Easy-Keygen-100"><a href="#Easy-Keygen-100" class="headerlink" title="Easy Keygen: 100"></a>Easy Keygen: 100</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>有一個Readme.txt，內容為</p><pre class="line-numbers language-none"><code class="language-none">ReversingKr KeygenMeFind the Name when the Serial is 5B134977135E7D13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Easy Keygen.exe執行後需要輸入一個input 與serial</p><h2 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h2><p>使用ida 分析exe</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">char</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-130h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+Dh] [ebp-12Fh] BYREF</span>  <span class="token keyword">char</span> v8<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-12Ch] BYREF</span>  <span class="token keyword">char</span> Buffer<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+74h] [ebp-C8h] BYREF</span>  __int16 v10<span class="token punctuation">;</span> <span class="token comment">// [esp+139h] [ebp-3h]</span>  <span class="token keyword">char</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+13Bh] [ebp-1h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token string">" 0"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4011B9</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>aInputName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v3 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> <span class="token number">3</span> <span class="token punctuation">)</span>      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token string">"%s%02X"</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> v8<span class="token punctuation">[</span>v3<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">^</span> v7<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v7[i - 1]有解錯應為v7[i]</span>  <span class="token punctuation">&#125;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4011B9</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>aInputSerial<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> Buffer<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">sub_4011B9</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>aCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">sub_4011B9</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>aWrong<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以觀察到他先將使用者輸入的文字一個一個取出來對一個keys[0x10,0x20,0x30]做xor，最後再取得用者輸入的serial比對是否相同，因為題目有提供正確答案xor後的serial，因此可以使用xor性質a^b&#x3D;c,b^c&#x3D;a反寫回去得到答案</p><p>chal.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_correct_serial</span><span class="token punctuation">(</span>input_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    v7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">]</span>    Buffer <span class="token operator">=</span> <span class="token string">""</span>     i <span class="token operator">=</span> <span class="token number">0</span>    v3 <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span>input_name<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> result<span class="token punctuation">:</span>        Buffer <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span>input_name <span class="token operator">=</span> <span class="token string">"5B134977135E7D13"</span>  <span class="token comment"># 假設這是我們的輸入名稱</span>generate_correct_serial<span class="token punctuation">(</span>input_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>flag:K3yg3nm3</p></blockquote><hr><h1 id="Easy-Unpack-100"><a href="#Easy-Unpack-100" class="headerlink" title="Easy Unpack: 100"></a>Easy Unpack: 100</h1><p>根據題目名稱應該是一個需要脫殼的題目，先丟入PEiD看看</p><p><img src="/./assets/Easy_unpack_PEiD.png" alt="Easy_unpack_PEiD.png"></p><p>發現到有加殼，但不知道是什麼殼，另外在Readme.txt中有說要找到OEP(Orginal Entry Point)，因此可以用ida 或 gdb 分析。</p><p><img src="/./assets/Easy_unpack_ida.png" alt="Easy_unpack_ida.png"></p><p>可以看到loc_40A1FB，有一個大跳越，跳到loc_401150，這很像脫殼後的樣子，可以猜測0x00401150就是Original Entry Point。可以用x32dbg驗證，在0040A1FB下斷點</p><p><img src="/./assets/Easy_unpack_breakpoint.png" alt="Easy_unpack_breakpoint.png"></p><p>F7追進去之後發現在0x00401150的地方有55(push ebp)，因此0x00401150就是OEP</p><p><img src="/./assets/Easy_unpack_entrypoint.png" alt="Easy_unpack_entrypoint.png"></p><blockquote><p>flag : 00401150</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
            <tag> Ghidra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🛡️ BlueTeam CheatSheet</title>
      <link href="/2025/08/12/BlueTeamCheatSheet/"/>
      <url>/2025/08/12/BlueTeamCheatSheet/</url>
      
        <content type="html"><![CDATA[<p>In this note, I organize the commons blue team skill</p><h2 id="Event-code"><a href="#Event-code" class="headerlink" title="Event code"></a>Event code</h2><h3 id="winlog"><a href="#winlog" class="headerlink" title="winlog"></a>winlog</h3><table><thead><tr><th>Event ID</th><th>說明</th></tr></thead><tbody><tr><td>4104</td><td>Windows powershell 執行日記</td></tr><tr><td>4624</td><td>登入成功</td></tr><tr><td>4625</td><td>登入失敗</td></tr><tr><td>4648</td><td>明確帳號登入（如 RunAs）</td></tr><tr><td>4672</td><td>特權登入（如 admin 登入）</td></tr><tr><td>4634</td><td>使用者登出</td></tr><tr><td>4688</td><td>建立新程序（程式啟動）</td></tr><tr><td>4689</td><td>程式結束</td></tr><tr><td>4697</td><td>安裝新服務（常用於惡意持久化）</td></tr><tr><td>4720</td><td>建立新帳號</td></tr><tr><td>4722</td><td>啟用帳戶</td></tr><tr><td>4723</td><td>嘗試變更自己的密碼</td></tr><tr><td>4724</td><td>嘗試為他人變更密碼</td></tr><tr><td>4725</td><td>停用帳戶</td></tr><tr><td>4726</td><td>刪除帳戶</td></tr><tr><td>4732</td><td>使用者被加入群組</td></tr><tr><td>4768</td><td>Kerberos TGT 請求</td></tr><tr><td>4769</td><td>Kerberos 服務票證請求</td></tr><tr><td>4776</td><td>NTLM 驗證請求</td></tr><tr><td>5140</td><td>存取共用資料夾</td></tr><tr><td>5156</td><td>防火牆允許的網路連線（NetConn 事件）</td></tr><tr><td>7045</td><td>安裝服務（System log，也可監控持久化）</td></tr></tbody></table><h3 id="Sysmon"><a href="#Sysmon" class="headerlink" title="Sysmon"></a>Sysmon</h3><table><thead><tr><th>Event ID</th><th>說明</th></tr></thead><tbody><tr><td>1</td><td>Process Create（程式啟動）</td></tr><tr><td>2</td><td>File creation time changed（時間戳被修改）</td></tr><tr><td>3</td><td>Network connection（TCP 連線）</td></tr><tr><td>5</td><td>Process Terminate（程式終止）</td></tr><tr><td>6</td><td>Driver Loaded（驅動載入）</td></tr><tr><td>7</td><td>Image Loaded（DLL載入）</td></tr><tr><td>8</td><td>CreateRemoteThread（遠端執行緒注入）</td></tr><tr><td>9</td><td>RawAccessRead（磁碟原始存取）</td></tr><tr><td>10</td><td>ProcessAccess（程式存取他人記憶體）</td></tr><tr><td>11</td><td>File Create（檔案建立）</td></tr><tr><td>12</td><td>Registry Key Create（註冊表鍵建立）</td></tr><tr><td>13</td><td>Registry Value Set（註冊表值修改）</td></tr><tr><td>14</td><td>Registry Key Delete（註冊表鍵刪除）</td></tr><tr><td>15</td><td>FileCreateStreamHash（建立 ADS）</td></tr><tr><td>22</td><td>DNS Query（DNS 查詢事件）</td></tr><tr><td>23</td><td>File Delete（檔案刪除）</td></tr><tr><td>25</td><td>Process Tampering（程式記憶體被修改）</td></tr><tr><td>26</td><td>File Deleted and Overwritten（防止取證）</td></tr><tr><td>255</td><td>Sysmon 設定被修改（Config change）</td></tr></tbody></table><h2 id="IDS-IPS"><a href="#IDS-IPS" class="headerlink" title="IDS&#x2F;IPS"></a>IDS&#x2F;IPS</h2><ul><li><p><a href="https://www.ossec.net/">OSSEC</a></p><ul><li>HIDS</li></ul></li><li><p><a href="https://suricata.io/">Suricata</a></p><ul><li>NIDS&#x2F;NIPS</li><li><code>ls -lah /etc/suricata/rules/</code> see all rulus</li><li><code>suricata -r test.pcap</code> create various logs(etc eve.json,fast.log…)</li><li><code>suricata --pcap=ens160 -vv</code>  Suricata’s (Live) LibPCAP mod</li><li><code>cat /var/log/suricata/old_eve.json | jq -c &#39;select(.event_type == &quot;http&quot;)&#39; | head -1 | jq </code>quury example</li></ul></li><li><p><a href="https://github.com/activecm/rita">RITA</a></p><ul><li>detect C2</li><li>&#96;&#96;</li><li><a href="https://cn-sec.com/archives/1901157.html">simple tour</a></li><li><a href="https://ithelp.ithome.com.tw/m/articles/10209273">simple tour2</a></li></ul></li><li><p><a href="https://www.snort.org/">Snort</a></p><ul><li>example:</li></ul>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snort <span class="token parameter variable">-c</span> /root/snorty/etc/snort/snort.lua --daq-dir /usr/local/lib/daq <span class="token parameter variable">-R</span> /home/htb-student/local.rules <span class="token parameter variable">-r</span> /home/htb-student/pcaps/cerber.pcap <span class="token parameter variable">-A</span> cmg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snort <span class="token parameter variable">-c</span> /root/snorty/etc/snort/snort.lua --daq-dir /usr/local/lib/daq <span class="token punctuation">\</span><span class="token parameter variable">-r</span> XXX.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snort <span class="token parameter variable">-c</span> /root/snorty/etc/snort/snort.lua --daq-dir /usr/local/lib/daq <span class="token punctuation">\</span><span class="token parameter variable">-i</span> ens160<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Zeek </p><ul><li><code>/usr/local/zeek/bin/zeek -C -r XXX.pcap</code></li></ul></li><li><p>[Sysmon]</p></li></ul><p>xml filter example</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>QueryList</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Query</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft-Windows-Sysmon/Operational<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Select</span> <span class="token attr-name">Path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft-Windows-Sysmon/Operational<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      *[        System[          (EventID=3)          and TimeCreated[            @SystemTime >= '2022-01-01T07:41:36.000Z'            and @SystemTime &lt;= '2022-10-02T07:41:36.999Z'          ]        ]        and EventData[          Data[@Name='ProcessGuid']='a79137ec-af0f-6338-b702-00000000e901'        ]      ]    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Query</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>QueryList</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SIEM"><a href="#SIEM" class="headerlink" title="SIEM"></a>SIEM</h2><p>Continuously, for ongoing detection and alerting</p><h3 id="ELK-Stack"><a href="#ELK-Stack" class="headerlink" title="ELK Stack"></a><a href="https://www.elastic.co/elastic-stack">ELK Stack</a></h3><h4 id="Elastic-Common-Schema-ECS"><a href="#Elastic-Common-Schema-ECS" class="headerlink" title="Elastic Common Schema (ECS)"></a>Elastic Common Schema (ECS)</h4><table><thead><tr><th>字段類型</th><th>描述</th><th>KQL 範例</th></tr></thead><tbody><tr><td>event.category</td><td>將事件按大型邏輯類別分組，通常與”event.category”字段結合使用進行過濾搜索</td><td>• event.category: authentication<br>• event.category: process<br>• event.category: file<br>• event.category: malware<br>• event.category: network</td></tr><tr><td>event.type</td><td>作為子分類，通常與”event.category”字段結合使用過濾搜索</td><td>• event.type: creation<br>• event.type: deletion<br>• event.type: access</td></tr><tr><td>event.outcome</td><td>指示事件是否成功或失敗</td><td>• event.outcome: success<br>• event.outcome: failure</td></tr></tbody></table><h4 id="Common-Search-Fields"><a href="#Common-Search-Fields" class="headerlink" title="Common Search Fields"></a>Common Search Fields</h4><table><thead><tr><th>字段</th><th>KQL 範例</th><th>輸出</th></tr></thead><tbody><tr><td>@timestamp</td><td>@timestamp: 2023-01-25</td><td>事件發生時間的時間戳（事件來源於該時間而非更早或更晚）</td></tr><tr><td>agent.name</td><td>agent.name: “DESKTOP*”</td><td>從代理名稱中搜索指定字符並顯示結果</td></tr><tr><td>message</td><td>message: powershell</td><td>在任何含有”powershell”字符的消息中搜索</td></tr></tbody></table><h4 id="Process-Related-Fields"><a href="#Process-Related-Fields" class="headerlink" title="Process Related Fields"></a>Process Related Fields</h4><table><thead><tr><th>字段</th><th>KQL 範例</th><th>輸出</th></tr></thead><tbody><tr><td>process.name</td><td>event.category: process and process.name: svchost</td><td>尋找進程名為svchost的所有進程</td></tr><tr><td>process.command_line</td><td>process.command_line: (cmd or “&#x2F;c”)</td><td>尋找使用cmd並且含有命令行參數為”&#x2F;c”的進程</td></tr><tr><td>process.pid</td><td>event.category: process and process.pid: 4360</td><td>尋找PID為4360的進程</td></tr><tr><td>process.parent.name</td><td>event.category: process and process.parent.name: cmd.exe and process.name: powershell.exe</td><td>尋找父進程為cmd.exe且該進程名為powershell的進程；尋找由cmd.exe父進程啟動的PowerShell進程</td></tr><tr><td>process.parent.pid</td><td>event.category: process and process.parent.pid: 1240</td><td>尋找父進程PID為1240的進程</td></tr></tbody></table><h4 id="Network-Related-Fields"><a href="#Network-Related-Fields" class="headerlink" title="Network Related Fields"></a>Network Related Fields</h4><table><thead><tr><th>字段</th><th>KQL 範例</th><th>輸出</th></tr></thead><tbody><tr><td>source.ip</td><td>source.ip: 127.0.0.1</td><td>尋找源IP地址中的任何出站流量</td></tr><tr><td>destination.ip</td><td>destination.ip: 23.184.192.62</td><td>尋找目的IP地址中的任何入站流量</td></tr><tr><td>destination.port</td><td>destination.port: 443</td><td>尋找目的端口中的任何入站流量，例如目的端口443</td></tr><tr><td>dns.question.name</td><td>dns.question.name: “<a href="http://www.youtube.com/">www.youtube.com</a>“</td><td>尋找DNS查詢記錄查看DNS解析，包括網站youtube.com</td></tr><tr><td>dns.response_code</td><td>dns.response_code: “NXDOMAIN”</td><td>尋找DNS響應代碼的返回碼，包含NXDOMAIN</td></tr><tr><td>destination.geo.country_name</td><td>destination.geo.country_name: “Canada”</td><td>尋找目的地理國家欄位，例如Canada</td></tr></tbody></table><h4 id="Authentication-Related-Fields"><a href="#Authentication-Related-Fields" class="headerlink" title="Authentication Related Fields"></a>Authentication Related Fields</h4><table><thead><tr><th>字段</th><th>KQL 範例</th><th>輸出</th></tr></thead><tbody><tr><td>user.name</td><td>event.category: “authentication” and user.name: john</td><td>尋找用戶名john的登錄嘗試</td></tr><tr><td>winlog.logon.type</td><td>event.category: “authentication” and winlog.logon.type: 3</td><td>尋找logon type為3（網路登錄）的驗證事件</td></tr><tr><td>winlog.event_data.AuthenticationPackageName</td><td>event.category: “authentication” and winlog.event_data.AuthenticationPackageName: “NTLM”</td><td>尋找使用NTLM驗證包的驗證事件</td></tr></tbody></table><h4 id="常用查詢語法"><a href="#常用查詢語法" class="headerlink" title="常用查詢語法"></a>常用查詢語法</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">event.provider: <span class="token string">"Microsoft-Windows-Sysmon"</span> and event.code: <span class="token number">11</span>  and winlog.event_data.TargetFilename  <span class="token builtin class-name">:</span> *.aspx<span class="token comment"># DNS相關查詢</span>agent.type <span class="token builtin class-name">:</span> <span class="token string">"packetbeat"</span> and type:<span class="token string">"dns"</span>  dns.question.registered_domain <span class="token builtin class-name">:</span> <span class="token string">"XXX"</span><span class="token comment"># 程序監控</span>event.category: process and process.name: powershell.exeprocess.command_line: *encoded* and event.category: process<span class="token comment"># 網路流量分析</span>source.ip: <span class="token number">192.168</span>.1.0/24 and destination.port: <span class="token punctuation">(</span><span class="token number">443</span> or <span class="token number">80</span><span class="token punctuation">)</span>event.category: network and destination.geo.country_name: <span class="token string">"China"</span><span class="token comment"># 驗證事件</span>event.category: authentication and event.outcome: failurewinlog.event_id: <span class="token number">4625</span> and user.name: administrator<span class="token comment"># 檔案操作</span>event.category: <span class="token function">file</span> and event.type: creationfile.extension: <span class="token punctuation">(</span>exe or dll<span class="token punctuation">)</span> and file.path: *temp*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><a href="https://www.splunk.com/zh_tw">splunk</a></p></li><li><p>chainsaw</p><ul><li>use sigma</li></ul></li></ul><h2 id="DFIR"><a href="#DFIR" class="headerlink" title="DFIR"></a>DFIR</h2><p>after an incident has occurred </p><ul><li><a href="https://docs.velociraptor.app/">Velociraptor</a></li></ul><h2 id="CTI"><a href="#CTI" class="headerlink" title="CTI"></a>CTI</h2><ul><li><a href="">MISP</a></li><li><a href="https://yeti-platform.io/">YETI</a></li><li><a href="https://github.com/OpenCTI-Platform/opencti">openCTI</a></li></ul><h2 id="malware-analysis"><a href="#malware-analysis" class="headerlink" title="malware analysis"></a>malware analysis</h2><ul><li><a href="https://github.com/Rurik/Noriben">Noriben</a><ul><li>Noriben is a Python-based script that works in conjunction with Sysinternals Procmon to automatically collect, analyze, and report on runtime indicators of malware.</li><li><code>python Noriben.py</code> launch the script</li></ul></li></ul><h2 id="Memory-Forensics"><a href="#Memory-Forensics" class="headerlink" title="Memory Forensics"></a>Memory Forensics</h2><h3 id="Volatility-Framework"><a href="#Volatility-Framework" class="headerlink" title="Volatility Framework"></a>Volatility Framework</h3><p>記憶體取證分析工具，用於分析記憶體映像檔案</p><h4 id="System-Profiling"><a href="#System-Profiling" class="headerlink" title="System Profiling"></a>System Profiling</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>識別作業系統版本</td><td>imageinfo</td><td><code>python vol.py -f memory.dump imageinfo</code></td></tr><tr><td>分析KDBG結構</td><td>kdbgscan</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 kdbgscan</code></td></tr></tbody></table><h4 id="Processes-Analysis"><a href="#Processes-Analysis" class="headerlink" title="Processes Analysis"></a>Processes Analysis</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>程序列表</td><td>pslist</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 pslist</code></td></tr><tr><td>程序父子關係</td><td>pstree</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 pstree</code></td></tr><tr><td>掃描程序 (含隱藏&#x2F;終止)</td><td>psscan</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 psscan</code></td></tr><tr><td>隱藏程序檢查</td><td>psxview</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 psxview</code></td></tr><tr><td>程序詳細資訊</td><td>psinfo</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 psinfo -p 1640</code></td></tr><tr><td>程序權限</td><td>privs</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 privs -p 1640</code></td></tr><tr><td>程序執行緒</td><td>threads</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 threads -p 1640</code></td></tr><tr><td>程序SID</td><td>getsids</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 getsids -p 1640</code></td></tr><tr><td>程序令牌</td><td>tokens</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 tokens -p 1640</code></td></tr><tr><td>轉儲程序執行檔</td><td>procdump</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 procdump -p 1640 --dump-dir=./</code></td></tr><tr><td>虛擬位址描述符</td><td>vadinfo</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 vadinfo -p 1640</code></td></tr><tr><td>VAD樹結構</td><td>vadtree</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 vadtree -p 1640</code></td></tr><tr><td>遍歷VAD</td><td>vadwalk</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 vadwalk -p 1640</code></td></tr></tbody></table><h4 id="Network-Connections"><a href="#Network-Connections" class="headerlink" title="Network Connections"></a>Network Connections</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>網路連線&#x2F;網路活動</td><td>netscan</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 netscan</code></td></tr></tbody></table><h4 id="Persistence-Techniques"><a href="#Persistence-Techniques" class="headerlink" title="Persistence Techniques"></a>Persistence Techniques</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>註冊表鍵值</td><td>printkey</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 printkey -K &quot;Software\Microsoft\Windows\CurrentVersion\Run&quot;</code></td></tr><tr><td>查找所有持久化機制</td><td>autoruns</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 autoruns</code></td></tr></tbody></table><h4 id="Filesystem"><a href="#Filesystem" class="headerlink" title="Filesystem"></a>Filesystem</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>解析MFT項目</td><td>mftparser</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 mftparser</code></td></tr><tr><td>掃描檔案物件</td><td>filescan</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 filescan</code></td></tr><tr><td>轉儲檔案</td><td>dumpfiles</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 --dump-dir=./</code></td></tr></tbody></table><h4 id="Advanced-Analysis"><a href="#Advanced-Analysis" class="headerlink" title="Advanced Analysis"></a>Advanced Analysis</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>掃描DLL</td><td>dlllist</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 dlllist -p 1640</code></td></tr><tr><td>檢查處理程序句柄</td><td>handles</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 handles -p 1640 -t Process,Thread</code></td></tr><tr><td>命令行歷史</td><td>cmdline</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 cmdline</code></td></tr><tr><td>環境變數</td><td>envars</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 envars</code></td></tr><tr><td>記憶體字串搜尋</td><td>strings</td><td><code>strings memory.dump | grep -i password</code></td></tr><tr><td>轉儲程序記憶體</td><td>memdump</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 memdump -p 1640 --dump-dir=./</code></td></tr><tr><td>拿evtx</td><td>dumpfiles + Evtxcmd</td><td><code>python vol.py –f Win7SP1x86.vmem --profile=Win7SP1x86 dumpfiles --regex .evtx$ --ignore-case --dump-dir output</code> <code>EvtxECmd.exe -f &quot;C:\Temp\Application.evtx&quot; --csv &quot;c:\temp\out&quot;</code></td></tr></tbody></table><h4 id="Malware-Detection"><a href="#Malware-Detection" class="headerlink" title="Malware Detection"></a>Malware Detection</h4><table><thead><tr><th>分析項目</th><th>插件</th><th>命令行</th></tr></thead><tbody><tr><td>檢查程序注入</td><td>malfind</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 malfind</code></td></tr><tr><td>Hook檢測</td><td>apihooks</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 apihooks</code></td></tr><tr><td>SSDT Hook檢測</td><td>ssdt</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 ssdt</code></td></tr><tr><td>驅動程式掃描</td><td>driverscan</td><td><code>python vol.py -f memory.dump --profile=Win7SP1x64 driverscan</code></td></tr></tbody></table><h2 id="Network-Forensics"><a href="#Network-Forensics" class="headerlink" title="Network Forensics"></a>Network Forensics</h2><ul><li>wireshark</li><li>NetworkMiner</li><li>Zui <ul><li>find who is attacker by alert<br>  查看attacker掃描主機port指令</li></ul>  <pre class="line-numbers language-none"><code class="language-none">_path&#x3D;&#x3D;&quot;conn&quot; and id.resp_h &#x3D; xxx.xxx.xxx.xxx | cut id.resp_p | sort | uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="disk-Forensics"><a href="#disk-Forensics" class="headerlink" title="disk Forensics"></a>disk Forensics</h2><ul><li><p>AutoSpy</p></li><li><p>R-studio</p><ul><li>$MFT viewer</li></ul></li><li><p>MFTECmd</p><ul><li>$MFT to csv file</li><li>can use timeline Explorer to see the csv</li></ul></li><li><p>NTFS Log Tracker</p></li><li><p><a href="https://github.com/strozfriedberg/sidr">SIDR</a></p><ul><li>windows Search Index Database Reporter</li><li>detect the delete file</li></ul></li><li><p><a href="https://ericzimmerman.github.io/#!index.md">shellbagsexplorer</a></p><ul><li><a href="https://zhuanlan.zhihu.com/p/585383290">shellbags</a> date changes into nice view</li><li>to trace the user active  even the file had been delete</li><li>need %userprofile%\AppData\Local\Microsoft\Windows\USRCLASS.dat and %userprofile%\NTUSER.dat</li></ul></li><li><p>[LECmd]</p><ul><li>to see link file<br>  <code>LECmd.exe -d &quot;C:\Users\Administrator\Desktop\Start Here\Artifacts&quot; --csvf lnk.csv --csv &quot;C:\Users\Administrator\Desktop\lnk-files&quot;</code></li></ul></li><li><p>jumpLists Explorer</p><ul><li>to</li></ul></li><li><p>USB Forensics tracker </p></li><li><p>WxTCMD</p><ul><li>analyze timeline data base to csv file </li><li>“C:\Users\ <user>\AppData\Local\ConnectedDevicesPlatform\L.<user>\ActivitiesCache.db”</li></ul></li><li><p>Amcache parser</p><ul><li>may catch the app install time</li></ul></li><li><p>RegistryExplorer</p></li><li><p>WinPrefetchView</p></li><li><p>SrumECmd</p></li></ul><table><thead><tr><th>項目</th><th><strong>Shellbags</strong></th><th><strong>$MFT (主檔案表)</strong></th><th><strong>$LogFile</strong></th><th><code>$UsnJrnl:$J</code></th></tr></thead><tbody><tr><td>📦 <strong>來源</strong></td><td>註冊表 (NTUSER.DAT &#x2F; USRCLASS.DAT)</td><td>NTFS檔案系統中繼資料</td><td>NTFS交易日誌 (操作歷程記錄)</td><td>NTFS更新序號日誌 (USN Journal)</td></tr><tr><td>📂 <strong>追蹤內容</strong></td><td>透過檔案總管GUI存取的資料夾 (本機、USB、網路)</td><td>每個檔案&#x2F;資料夾的中繼資料和時間戳記</td><td>低階檔案&#x2F;資料夾變更 (建立、重新命名、刪除)</td><td>所有檔案&#x2F;資料夾變更事件，包含USN ID和時間戳記</td></tr><tr><td>⏱️ <strong>包含時間戳記</strong></td><td>✅ 是 – 資料夾存取&#x2F;建立時間戳記</td><td>✅ 是 – MACB時間戳記 (修改、存取、建立、項目修改時間)</td><td>✅ 是 – 變更時間戳記 (不記錄內容變更)</td><td>✅ 是 – 詳細的變更時間</td></tr><tr><td>👁️ <strong>分析重點</strong></td><td>使用者GUI行為：哪些資料夾被點擊&#x2F;檢視？</td><td>檔案存在性和生命週期中繼資料</td><td>變更日誌，類似交易記錄</td><td>追蹤檔案&#x2F;資料夾的完整變更歷史</td></tr><tr><td>🧠 <strong>保留目的</strong></td><td>儲存資料夾檢視設定和歷程 (維持UI一致性)</td><td>NTFS操作的核心結構</td><td>提供檔案系統一致性和當機復原</td><td>提供快速檔案變更查詢 (應用程式、索引、備份使用)</td></tr><tr><td>👣 <strong>常見鑑識用途</strong></td><td>- 偵測使用者是否存取 <code>\\10.10.5.86\shared</code><br>- 追蹤橫向移動或USB使用</td><td>- 檢查檔案是否存在、建立時間<br>- 識別惡意檔案活動</td><td>- 重建惡意活動序列 (例如：惡意程式建立過程)</td><td>- 識別檔案使用和重新命名&#x2F;刪除事件</td></tr><tr><td>🧪 <strong>可恢復刪除檔案？</strong></td><td>❌ 否 – 基於資料夾，不保留刪除檔案資訊</td><td>✅ 是 – 除非被覆寫，否則可能留有痕跡</td><td>✅ 可能 – 如果日誌完整可恢復部分操作</td><td>✅ 是 – 顯示檔案建立、重新命名、刪除歷史</td></tr><tr><td>🔍 <strong>資料保留期間</strong></td><td>長期保存 (直到使用者清理註冊表)</td><td>永久保存 (直到檔案系統格式化或損毀)</td><td>循環覆寫 (取決於系統活動量)</td><td>循環覆寫 (預設約3天到數週)</td></tr><tr><td>💾 <strong>檔案位置</strong></td><td><code>C:\Users\[用戶]\NTUSER.DAT</code><br><code>C:\Users\[用戶]\AppData\Local\Microsoft\Windows\UsrClass.dat</code></td><td><code>$MFT</code> (NTFS根目錄)</td><td><code>$LogFile</code> (NTFS根目錄)</td><td><code>$Extend\$UsnJrnl:$J</code> (NTFS)</td></tr><tr><td>🛠️ <strong>分析工具</strong></td><td>- Registry Explorer<br>- ShellBags Explorer<br>- RegRipper</td><td>- MFTECmd<br>- FTK Imager<br>- Autopsy<br>- X-Ways Forensics</td><td>- LogFileParser<br>- NTFS Log Tracker</td><td>- UsnJrnl2Csv<br>- USN Analytics<br>- NTFS Log Tracker</td></tr><tr><td>⚠️ <strong>限制</strong></td><td>僅追蹤GUI操作，不包含命令列存取</td><td>不包含檔案內容，僅中繼資料</td><td>日誌大小有限，舊記錄會被覆寫</td><td>不追蹤檔案內容變更，僅追蹤檔案系統變更</td></tr></tbody></table><h3 id="Zone-Identifier"><a href="#Zone-Identifier" class="headerlink" title="Zone Identifier"></a>Zone Identifier</h3><p>當從瀏覽器（如 Edge、Chrome、IE）下載檔案時，Windows 會建立一個 NTFS 區段資料（ADS） 來記錄檔案來源，例如：</p><pre class="line-numbers language-none"><code class="language-none">[ZoneTransfer]ZoneId&#x3D;3ReferrerUrl&#x3D;https:&#x2F;&#x2F;example.comHostUrl&#x3D;https:&#x2F;&#x2F;example.com&#x2F;download&#x2F;file.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>這通常儲存在 Zone.Identifier 流裡。</p><p>要查看可以從FTK imager 中點擊下載的檔案看有沒有附加的Zone.Identifier</p><hr><h2 id="Rapid-Triage-tool"><a href="#Rapid-Triage-tool" class="headerlink" title="Rapid Triage tool"></a>Rapid Triage tool</h2><ul><li><a href="https://ericzimmerman.github.io/#!index.md">Eric Zimmerman</a><ul><li>MFTECmd<ul><li><code>.\MFTECmd.exe -f &#39;C:\Users\johndoe\Desktop\forensic_data\kape_output\D\$Extend\$J&#39; --csv C:\Users\johndoe\Desktop\forensic_data\mft_analysis\ --csvf MFT-J.csv</code></li></ul></li><li>Timeline Explorer    <ul><li>View CSV and Excel files, filter, group, sort, etc. with ease</li></ul></li><li>EvtxECmd    <ul><li>Event log (evtx) parser with standardized CSV, XML, and json output! Custom maps, locked file support, and more!</li><li><code>.\EvtxECmd.exe -f &quot;C:\Users\johndoe\Desktop\forensic_data\kape_output\D\Windows\System32\winevt\logs\Microsoft-Windows-Sysmon%4Operational.evtx&quot; --csv &quot;C:\Users\johndoe\Desktop\forensic_data\event_logs\csv_timeline&quot; --csvf kape_event_log.csv</code></li></ul></li><li>Registry Explorer <ul><li>Registry viewer with searching, multi-hive support, plugins, and more. Handles locked files</li></ul></li><li>RegRipper<ul><li><code>.\rip.exe -r &quot;C:\Users\johndoe\Desktop\forensic_data\kape_output\D\Windows\System32\config\SYSTEM&quot; -p compname</code></li></ul></li><li>PECmd<ul><li>Prefetch parser</li><li><code>.\PECmd.exe -d C:\Users\johndoe\Desktop\forensic_data\kape_output\D\Windows\prefetch --csv C:\Users\johndoe\Desktop\forensic_data\prefetch_analysis</code></li></ul></li><li>API Monitor</li></ul></li></ul><h2 id="Acquision"><a href="#Acquision" class="headerlink" title="Acquision"></a>Acquision</h2><ul><li>Dumpit.exe<ul><li>windows memory image</li></ul></li><li><a href="https://github.com/504ensicsLabs/LiME">LiME</a><ul><li>Linux memory image</li></ul></li><li><a href="https://www.magnetforensics.com/resources/encrypted-disk-detector/">EDD</a><ul><li>check disk wheather has been encrypted</li></ul></li><li>KAPE<ul><li>triage image</li></ul></li><li>CyLR<ul><li>inux triage image</li></ul></li></ul><p>if windwos memory dead Acquision</p><ul><li><p>hiberfil.sys C:&#x2F;</p></li><li><p>pagefile.sys C:&#x2F;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensic </tag>
            
            <tag> BlueTeam </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
